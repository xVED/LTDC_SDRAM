
LTDC_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080033f0  080033f0  000133f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080033f4  080033f4  000133f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000028  20000000  080033f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006434  20000028  08003420  00020028  2**3
                  ALLOC
  8 ._user_heap_stack 00006000  2000645c  08003420  0002645c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020028  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001aa31  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000415c  00000000  00000000  0003aa89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000093de  00000000  00000000  0003ebe5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000f48  00000000  00000000  00047fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000012c0  00000000  00000000  00048f10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00008659  00000000  00000000  0004a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000065cd  00000000  00000000  00052829  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00058df6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002840  00000000  00000000  00058e74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000028 	.word	0x20000028
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003390 	.word	0x08003390

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000002c 	.word	0x2000002c
 800020c:	08003390 	.word	0x08003390

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000220:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000224:	f000 b97a 	b.w	800051c <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	468c      	mov	ip, r1
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	9e08      	ldr	r6, [sp, #32]
 800024c:	2b00      	cmp	r3, #0
 800024e:	d151      	bne.n	80002f4 <__udivmoddi4+0xb4>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d96d      	bls.n	8000332 <__udivmoddi4+0xf2>
 8000256:	fab2 fe82 	clz	lr, r2
 800025a:	f1be 0f00 	cmp.w	lr, #0
 800025e:	d00b      	beq.n	8000278 <__udivmoddi4+0x38>
 8000260:	f1ce 0c20 	rsb	ip, lr, #32
 8000264:	fa01 f50e 	lsl.w	r5, r1, lr
 8000268:	fa20 fc0c 	lsr.w	ip, r0, ip
 800026c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000270:	ea4c 0c05 	orr.w	ip, ip, r5
 8000274:	fa00 f40e 	lsl.w	r4, r0, lr
 8000278:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800027c:	0c25      	lsrs	r5, r4, #16
 800027e:	fbbc f8fa 	udiv	r8, ip, sl
 8000282:	fa1f f987 	uxth.w	r9, r7
 8000286:	fb0a cc18 	mls	ip, sl, r8, ip
 800028a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800028e:	fb08 f309 	mul.w	r3, r8, r9
 8000292:	42ab      	cmp	r3, r5
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x6c>
 8000296:	19ed      	adds	r5, r5, r7
 8000298:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800029c:	f080 8123 	bcs.w	80004e6 <__udivmoddi4+0x2a6>
 80002a0:	42ab      	cmp	r3, r5
 80002a2:	f240 8120 	bls.w	80004e6 <__udivmoddi4+0x2a6>
 80002a6:	f1a8 0802 	sub.w	r8, r8, #2
 80002aa:	443d      	add	r5, r7
 80002ac:	1aed      	subs	r5, r5, r3
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb5 f0fa 	udiv	r0, r5, sl
 80002b4:	fb0a 5510 	mls	r5, sl, r0, r5
 80002b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002bc:	fb00 f909 	mul.w	r9, r0, r9
 80002c0:	45a1      	cmp	r9, r4
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x98>
 80002c4:	19e4      	adds	r4, r4, r7
 80002c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ca:	f080 810a 	bcs.w	80004e2 <__udivmoddi4+0x2a2>
 80002ce:	45a1      	cmp	r9, r4
 80002d0:	f240 8107 	bls.w	80004e2 <__udivmoddi4+0x2a2>
 80002d4:	3802      	subs	r0, #2
 80002d6:	443c      	add	r4, r7
 80002d8:	eba4 0409 	sub.w	r4, r4, r9
 80002dc:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002e0:	2100      	movs	r1, #0
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d061      	beq.n	80003aa <__udivmoddi4+0x16a>
 80002e6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002ea:	2300      	movs	r3, #0
 80002ec:	6034      	str	r4, [r6, #0]
 80002ee:	6073      	str	r3, [r6, #4]
 80002f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d907      	bls.n	8000308 <__udivmoddi4+0xc8>
 80002f8:	2e00      	cmp	r6, #0
 80002fa:	d054      	beq.n	80003a6 <__udivmoddi4+0x166>
 80002fc:	2100      	movs	r1, #0
 80002fe:	e886 0021 	stmia.w	r6, {r0, r5}
 8000302:	4608      	mov	r0, r1
 8000304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000308:	fab3 f183 	clz	r1, r3
 800030c:	2900      	cmp	r1, #0
 800030e:	f040 808e 	bne.w	800042e <__udivmoddi4+0x1ee>
 8000312:	42ab      	cmp	r3, r5
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xdc>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80fa 	bhi.w	8000510 <__udivmoddi4+0x2d0>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb65 0503 	sbc.w	r5, r5, r3
 8000322:	2001      	movs	r0, #1
 8000324:	46ac      	mov	ip, r5
 8000326:	2e00      	cmp	r6, #0
 8000328:	d03f      	beq.n	80003aa <__udivmoddi4+0x16a>
 800032a:	e886 1010 	stmia.w	r6, {r4, ip}
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	b912      	cbnz	r2, 800033a <__udivmoddi4+0xfa>
 8000334:	2701      	movs	r7, #1
 8000336:	fbb7 f7f2 	udiv	r7, r7, r2
 800033a:	fab7 fe87 	clz	lr, r7
 800033e:	f1be 0f00 	cmp.w	lr, #0
 8000342:	d134      	bne.n	80003ae <__udivmoddi4+0x16e>
 8000344:	1beb      	subs	r3, r5, r7
 8000346:	0c3a      	lsrs	r2, r7, #16
 8000348:	fa1f fc87 	uxth.w	ip, r7
 800034c:	2101      	movs	r1, #1
 800034e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000352:	0c25      	lsrs	r5, r4, #16
 8000354:	fb02 3318 	mls	r3, r2, r8, r3
 8000358:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800035c:	fb0c f308 	mul.w	r3, ip, r8
 8000360:	42ab      	cmp	r3, r5
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x134>
 8000364:	19ed      	adds	r5, r5, r7
 8000366:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x132>
 800036c:	42ab      	cmp	r3, r5
 800036e:	f200 80d1 	bhi.w	8000514 <__udivmoddi4+0x2d4>
 8000372:	4680      	mov	r8, r0
 8000374:	1aed      	subs	r5, r5, r3
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb5 f0f2 	udiv	r0, r5, r2
 800037c:	fb02 5510 	mls	r5, r2, r0, r5
 8000380:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000384:	fb0c fc00 	mul.w	ip, ip, r0
 8000388:	45a4      	cmp	ip, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x15c>
 800038c:	19e4      	adds	r4, r4, r7
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x15a>
 8000394:	45a4      	cmp	ip, r4
 8000396:	f200 80b8 	bhi.w	800050a <__udivmoddi4+0x2ca>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 040c 	sub.w	r4, r4, ip
 80003a0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003a4:	e79d      	b.n	80002e2 <__udivmoddi4+0xa2>
 80003a6:	4631      	mov	r1, r6
 80003a8:	4630      	mov	r0, r6
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	f1ce 0420 	rsb	r4, lr, #32
 80003b2:	fa05 f30e 	lsl.w	r3, r5, lr
 80003b6:	fa07 f70e 	lsl.w	r7, r7, lr
 80003ba:	fa20 f804 	lsr.w	r8, r0, r4
 80003be:	0c3a      	lsrs	r2, r7, #16
 80003c0:	fa25 f404 	lsr.w	r4, r5, r4
 80003c4:	ea48 0803 	orr.w	r8, r8, r3
 80003c8:	fbb4 f1f2 	udiv	r1, r4, r2
 80003cc:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80003d0:	fb02 4411 	mls	r4, r2, r1, r4
 80003d4:	fa1f fc87 	uxth.w	ip, r7
 80003d8:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80003dc:	fb01 f30c 	mul.w	r3, r1, ip
 80003e0:	42ab      	cmp	r3, r5
 80003e2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003e6:	d909      	bls.n	80003fc <__udivmoddi4+0x1bc>
 80003e8:	19ed      	adds	r5, r5, r7
 80003ea:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ee:	f080 808a 	bcs.w	8000506 <__udivmoddi4+0x2c6>
 80003f2:	42ab      	cmp	r3, r5
 80003f4:	f240 8087 	bls.w	8000506 <__udivmoddi4+0x2c6>
 80003f8:	3902      	subs	r1, #2
 80003fa:	443d      	add	r5, r7
 80003fc:	1aeb      	subs	r3, r5, r3
 80003fe:	fa1f f588 	uxth.w	r5, r8
 8000402:	fbb3 f0f2 	udiv	r0, r3, r2
 8000406:	fb02 3310 	mls	r3, r2, r0, r3
 800040a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800040e:	fb00 f30c 	mul.w	r3, r0, ip
 8000412:	42ab      	cmp	r3, r5
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x1e6>
 8000416:	19ed      	adds	r5, r5, r7
 8000418:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800041c:	d26f      	bcs.n	80004fe <__udivmoddi4+0x2be>
 800041e:	42ab      	cmp	r3, r5
 8000420:	d96d      	bls.n	80004fe <__udivmoddi4+0x2be>
 8000422:	3802      	subs	r0, #2
 8000424:	443d      	add	r5, r7
 8000426:	1aeb      	subs	r3, r5, r3
 8000428:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800042c:	e78f      	b.n	800034e <__udivmoddi4+0x10e>
 800042e:	f1c1 0720 	rsb	r7, r1, #32
 8000432:	fa22 f807 	lsr.w	r8, r2, r7
 8000436:	408b      	lsls	r3, r1
 8000438:	fa05 f401 	lsl.w	r4, r5, r1
 800043c:	ea48 0303 	orr.w	r3, r8, r3
 8000440:	fa20 fe07 	lsr.w	lr, r0, r7
 8000444:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000448:	40fd      	lsrs	r5, r7
 800044a:	ea4e 0e04 	orr.w	lr, lr, r4
 800044e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000452:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000456:	fb0c 5519 	mls	r5, ip, r9, r5
 800045a:	fa1f f883 	uxth.w	r8, r3
 800045e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000462:	fb09 f408 	mul.w	r4, r9, r8
 8000466:	42ac      	cmp	r4, r5
 8000468:	fa02 f201 	lsl.w	r2, r2, r1
 800046c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x244>
 8000472:	18ed      	adds	r5, r5, r3
 8000474:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000478:	d243      	bcs.n	8000502 <__udivmoddi4+0x2c2>
 800047a:	42ac      	cmp	r4, r5
 800047c:	d941      	bls.n	8000502 <__udivmoddi4+0x2c2>
 800047e:	f1a9 0902 	sub.w	r9, r9, #2
 8000482:	441d      	add	r5, r3
 8000484:	1b2d      	subs	r5, r5, r4
 8000486:	fa1f fe8e 	uxth.w	lr, lr
 800048a:	fbb5 f0fc 	udiv	r0, r5, ip
 800048e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000492:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000496:	fb00 f808 	mul.w	r8, r0, r8
 800049a:	45a0      	cmp	r8, r4
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x26e>
 800049e:	18e4      	adds	r4, r4, r3
 80004a0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80004a4:	d229      	bcs.n	80004fa <__udivmoddi4+0x2ba>
 80004a6:	45a0      	cmp	r8, r4
 80004a8:	d927      	bls.n	80004fa <__udivmoddi4+0x2ba>
 80004aa:	3802      	subs	r0, #2
 80004ac:	441c      	add	r4, r3
 80004ae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004b2:	eba4 0408 	sub.w	r4, r4, r8
 80004b6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ba:	454c      	cmp	r4, r9
 80004bc:	46c6      	mov	lr, r8
 80004be:	464d      	mov	r5, r9
 80004c0:	d315      	bcc.n	80004ee <__udivmoddi4+0x2ae>
 80004c2:	d012      	beq.n	80004ea <__udivmoddi4+0x2aa>
 80004c4:	b156      	cbz	r6, 80004dc <__udivmoddi4+0x29c>
 80004c6:	ebba 030e 	subs.w	r3, sl, lr
 80004ca:	eb64 0405 	sbc.w	r4, r4, r5
 80004ce:	fa04 f707 	lsl.w	r7, r4, r7
 80004d2:	40cb      	lsrs	r3, r1
 80004d4:	431f      	orrs	r7, r3
 80004d6:	40cc      	lsrs	r4, r1
 80004d8:	6037      	str	r7, [r6, #0]
 80004da:	6074      	str	r4, [r6, #4]
 80004dc:	2100      	movs	r1, #0
 80004de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004e2:	4618      	mov	r0, r3
 80004e4:	e6f8      	b.n	80002d8 <__udivmoddi4+0x98>
 80004e6:	4690      	mov	r8, r2
 80004e8:	e6e0      	b.n	80002ac <__udivmoddi4+0x6c>
 80004ea:	45c2      	cmp	sl, r8
 80004ec:	d2ea      	bcs.n	80004c4 <__udivmoddi4+0x284>
 80004ee:	ebb8 0e02 	subs.w	lr, r8, r2
 80004f2:	eb69 0503 	sbc.w	r5, r9, r3
 80004f6:	3801      	subs	r0, #1
 80004f8:	e7e4      	b.n	80004c4 <__udivmoddi4+0x284>
 80004fa:	4628      	mov	r0, r5
 80004fc:	e7d7      	b.n	80004ae <__udivmoddi4+0x26e>
 80004fe:	4640      	mov	r0, r8
 8000500:	e791      	b.n	8000426 <__udivmoddi4+0x1e6>
 8000502:	4681      	mov	r9, r0
 8000504:	e7be      	b.n	8000484 <__udivmoddi4+0x244>
 8000506:	4601      	mov	r1, r0
 8000508:	e778      	b.n	80003fc <__udivmoddi4+0x1bc>
 800050a:	3802      	subs	r0, #2
 800050c:	443c      	add	r4, r7
 800050e:	e745      	b.n	800039c <__udivmoddi4+0x15c>
 8000510:	4608      	mov	r0, r1
 8000512:	e708      	b.n	8000326 <__udivmoddi4+0xe6>
 8000514:	f1a8 0802 	sub.w	r8, r8, #2
 8000518:	443d      	add	r5, r7
 800051a:	e72b      	b.n	8000374 <__udivmoddi4+0x134>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000520:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000522:	4b0e      	ldr	r3, [pc, #56]	; (800055c <HAL_InitTick+0x3c>)
{
 8000524:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000526:	4a0e      	ldr	r2, [pc, #56]	; (8000560 <HAL_InitTick+0x40>)
 8000528:	7818      	ldrb	r0, [r3, #0]
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000532:	6810      	ldr	r0, [r2, #0]
 8000534:	fbb0 f0f3 	udiv	r0, r0, r3
 8000538:	f000 f890 	bl	800065c <HAL_SYSTICK_Config>
 800053c:	4604      	mov	r4, r0
 800053e:	b958      	cbnz	r0, 8000558 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000540:	2d0f      	cmp	r5, #15
 8000542:	d809      	bhi.n	8000558 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000544:	4602      	mov	r2, r0
 8000546:	4629      	mov	r1, r5
 8000548:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800054c:	f000 f84e 	bl	80005ec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000550:	4b04      	ldr	r3, [pc, #16]	; (8000564 <HAL_InitTick+0x44>)
 8000552:	4620      	mov	r0, r4
 8000554:	601d      	str	r5, [r3, #0]
 8000556:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000558:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800055a:	bd38      	pop	{r3, r4, r5, pc}
 800055c:	20000000 	.word	0x20000000
 8000560:	2000000c 	.word	0x2000000c
 8000564:	20000004 	.word	0x20000004

08000568 <HAL_Init>:
{
 8000568:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056a:	2003      	movs	r0, #3
 800056c:	f000 f82c 	bl	80005c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000570:	200f      	movs	r0, #15
 8000572:	f7ff ffd5 	bl	8000520 <HAL_InitTick>
  HAL_MspInit();
 8000576:	f002 fd31 	bl	8002fdc <HAL_MspInit>
}
 800057a:	2000      	movs	r0, #0
 800057c:	bd08      	pop	{r3, pc}
	...

08000580 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000580:	4a03      	ldr	r2, [pc, #12]	; (8000590 <HAL_IncTick+0x10>)
 8000582:	4b04      	ldr	r3, [pc, #16]	; (8000594 <HAL_IncTick+0x14>)
 8000584:	6811      	ldr	r1, [r2, #0]
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	440b      	add	r3, r1
 800058a:	6013      	str	r3, [r2, #0]
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	20003ff0 	.word	0x20003ff0
 8000594:	20000000 	.word	0x20000000

08000598 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000598:	4b01      	ldr	r3, [pc, #4]	; (80005a0 <HAL_GetTick+0x8>)
 800059a:	6818      	ldr	r0, [r3, #0]
}
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20003ff0 	.word	0x20003ff0

080005a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005a4:	b538      	push	{r3, r4, r5, lr}
 80005a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005a8:	f7ff fff6 	bl	8000598 <HAL_GetTick>
 80005ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005b0:	bf1e      	ittt	ne
 80005b2:	4b04      	ldrne	r3, [pc, #16]	; (80005c4 <HAL_Delay+0x20>)
 80005b4:	781b      	ldrbne	r3, [r3, #0]
 80005b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80005b8:	f7ff ffee 	bl	8000598 <HAL_GetTick>
 80005bc:	1b40      	subs	r0, r0, r5
 80005be:	4284      	cmp	r4, r0
 80005c0:	d8fa      	bhi.n	80005b8 <HAL_Delay+0x14>
  {
  }
}
 80005c2:	bd38      	pop	{r3, r4, r5, pc}
 80005c4:	20000000 	.word	0x20000000

080005c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4a07      	ldr	r2, [pc, #28]	; (80005e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ca:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ce:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005d6:	041b      	lsls	r3, r3, #16
 80005d8:	0c1b      	lsrs	r3, r3, #16
 80005da:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80005e2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005e4:	60d3      	str	r3, [r2, #12]
 80005e6:	4770      	bx	lr
 80005e8:	e000ed00 	.word	0xe000ed00

080005ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005ec:	4b19      	ldr	r3, [pc, #100]	; (8000654 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005ee:	b530      	push	{r4, r5, lr}
 80005f0:	68dc      	ldr	r4, [r3, #12]
 80005f2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005f6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005fa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	bf28      	it	cs
 8000600:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000602:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000604:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000608:	bf8c      	ite	hi
 800060a:	3c03      	subhi	r4, #3
 800060c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800060e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8000612:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000614:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000618:	ea01 0103 	and.w	r1, r1, r3
 800061c:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000620:	fa05 f404 	lsl.w	r4, r5, r4
 8000624:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8000628:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800062c:	ea42 0201 	orr.w	r2, r2, r1
 8000630:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 8000634:	db07      	blt.n	8000646 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000636:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800063a:	b2d2      	uxtb	r2, r2
 800063c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000640:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 8000644:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000646:	f000 000f 	and.w	r0, r0, #15
 800064a:	b2d2      	uxtb	r2, r2
 800064c:	4b02      	ldr	r3, [pc, #8]	; (8000658 <HAL_NVIC_SetPriority+0x6c>)
 800064e:	541a      	strb	r2, [r3, r0]
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00
 8000658:	e000ed14 	.word	0xe000ed14

0800065c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800065c:	3801      	subs	r0, #1
 800065e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000662:	d20a      	bcs.n	800067a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000664:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000666:	21f0      	movs	r1, #240	; 0xf0
 8000668:	4a06      	ldr	r2, [pc, #24]	; (8000684 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066a:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800066c:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066e:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000672:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000674:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800067a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	e000e010 	.word	0xe000e010
 8000684:	e000ed00 	.word	0xe000ed00

08000688 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000688:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800068c:	4a04      	ldr	r2, [pc, #16]	; (80006a0 <HAL_MPU_Disable+0x18>)
 800068e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000694:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000696:	2200      	movs	r2, #0
 8000698:	4b02      	ldr	r3, [pc, #8]	; (80006a4 <HAL_MPU_Disable+0x1c>)
 800069a:	605a      	str	r2, [r3, #4]
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	e000ed00 	.word	0xe000ed00
 80006a4:	e000ed90 	.word	0xe000ed90

080006a8 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006a8:	4a06      	ldr	r2, [pc, #24]	; (80006c4 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80006aa:	f040 0001 	orr.w	r0, r0, #1
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <HAL_MPU_Enable+0x20>)
 80006b0:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80006b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80006b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80006b8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80006ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80006be:	f3bf 8f6f 	isb	sy
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	e000ed90 	.word	0xe000ed90

080006cc <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80006cc:	7843      	ldrb	r3, [r0, #1]
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_MPU_ConfigRegion+0x4c>)
{
 80006d0:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 80006d2:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 80006d4:	7801      	ldrb	r1, [r0, #0]
 80006d6:	b1d9      	cbz	r1, 8000710 <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80006d8:	6843      	ldr	r3, [r0, #4]
 80006da:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006dc:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006de:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80006e0:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80006e2:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006e6:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80006e8:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006ea:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80006ee:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006f0:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80006f4:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80006fa:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80006fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000700:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000702:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8000706:	7a01      	ldrb	r1, [r0, #8]
 8000708:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800070c:	6113      	str	r3, [r2, #16]
 800070e:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 8000710:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 8000712:	6111      	str	r1, [r2, #16]
 8000714:	bd10      	pop	{r4, pc}
 8000716:	bf00      	nop
 8000718:	e000ed90 	.word	0xe000ed90

0800071c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800071c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000720:	680b      	ldr	r3, [r1, #0]
{
 8000722:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000724:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80008e8 <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000728:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 800072a:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800072c:	4a6c      	ldr	r2, [pc, #432]	; (80008e0 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800072e:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80008ec <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000732:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000734:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000736:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000738:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 800073a:	42ac      	cmp	r4, r5
 800073c:	f040 80b6 	bne.w	80008ac <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000740:	684c      	ldr	r4, [r1, #4]
 8000742:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000746:	f024 0c10 	bic.w	ip, r4, #16
 800074a:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 800074e:	2e01      	cmp	r6, #1
 8000750:	d812      	bhi.n	8000778 <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000752:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000754:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000756:	fa06 f60e 	lsl.w	r6, r6, lr
 800075a:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800075e:	68ce      	ldr	r6, [r1, #12]
 8000760:	fa06 f60e 	lsl.w	r6, r6, lr
 8000764:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000766:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000768:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 800076c:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800076e:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000770:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000774:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000776:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000778:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 800077a:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800077c:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000780:	fa06 f60e 	lsl.w	r6, r6, lr
 8000784:	ea6f 0606 	mvn.w	r6, r6
 8000788:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800078c:	688f      	ldr	r7, [r1, #8]
 800078e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000792:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000796:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000798:	d116      	bne.n	80007c8 <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 800079a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800079e:	f003 0b07 	and.w	fp, r3, #7
 80007a2:	f04f 0c0f 	mov.w	ip, #15
 80007a6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 80007aa:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 80007ae:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80007b2:	fa0c fc0b 	lsl.w	ip, ip, fp
 80007b6:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80007ba:	690f      	ldr	r7, [r1, #16]
 80007bc:	fa07 f70b 	lsl.w	r7, r7, fp
 80007c0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 80007c4:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80007c8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80007ca:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80007cc:	f004 0703 	and.w	r7, r4, #3
 80007d0:	fa07 fe0e 	lsl.w	lr, r7, lr
 80007d4:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80007d8:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007da:	00e6      	lsls	r6, r4, #3
 80007dc:	d566      	bpl.n	80008ac <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 80007e2:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007e6:	f003 0e03 	and.w	lr, r3, #3
 80007ea:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ee:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007f2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80007f6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fa:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 80007fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000802:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000806:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 800080a:	9603      	str	r6, [sp, #12]
 800080c:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800080e:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000812:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000816:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800081a:	4e32      	ldr	r6, [pc, #200]	; (80008e4 <HAL_GPIO_Init+0x1c8>)
 800081c:	42b0      	cmp	r0, r6
 800081e:	d04c      	beq.n	80008ba <HAL_GPIO_Init+0x19e>
 8000820:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000824:	42b0      	cmp	r0, r6
 8000826:	d04a      	beq.n	80008be <HAL_GPIO_Init+0x1a2>
 8000828:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800082c:	42b0      	cmp	r0, r6
 800082e:	d048      	beq.n	80008c2 <HAL_GPIO_Init+0x1a6>
 8000830:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000834:	42b0      	cmp	r0, r6
 8000836:	d046      	beq.n	80008c6 <HAL_GPIO_Init+0x1aa>
 8000838:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800083c:	42b0      	cmp	r0, r6
 800083e:	d044      	beq.n	80008ca <HAL_GPIO_Init+0x1ae>
 8000840:	4548      	cmp	r0, r9
 8000842:	d044      	beq.n	80008ce <HAL_GPIO_Init+0x1b2>
 8000844:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000848:	42b0      	cmp	r0, r6
 800084a:	d042      	beq.n	80008d2 <HAL_GPIO_Init+0x1b6>
 800084c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000850:	42b0      	cmp	r0, r6
 8000852:	d040      	beq.n	80008d6 <HAL_GPIO_Init+0x1ba>
 8000854:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000858:	42b0      	cmp	r0, r6
 800085a:	d03e      	beq.n	80008da <HAL_GPIO_Init+0x1be>
 800085c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000860:	42b0      	cmp	r0, r6
 8000862:	bf14      	ite	ne
 8000864:	260a      	movne	r6, #10
 8000866:	2609      	moveq	r6, #9
 8000868:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800086c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000870:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000874:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000876:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 800087a:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800087c:	bf0c      	ite	eq
 800087e:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000880:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000882:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000886:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000888:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 800088a:	bf0c      	ite	eq
 800088c:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800088e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000890:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000894:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000896:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000898:	bf0c      	ite	eq
 800089a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 800089c:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800089e:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 80008a0:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80008a2:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 80008a4:	bf54      	ite	pl
 80008a6:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 80008a8:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 80008aa:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80008ac:	3301      	adds	r3, #1
 80008ae:	2b10      	cmp	r3, #16
 80008b0:	f47f af3f 	bne.w	8000732 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80008b4:	b005      	add	sp, #20
 80008b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80008ba:	2600      	movs	r6, #0
 80008bc:	e7d4      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008be:	2601      	movs	r6, #1
 80008c0:	e7d2      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008c2:	2602      	movs	r6, #2
 80008c4:	e7d0      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008c6:	2603      	movs	r6, #3
 80008c8:	e7ce      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008ca:	2604      	movs	r6, #4
 80008cc:	e7cc      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008ce:	2605      	movs	r6, #5
 80008d0:	e7ca      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008d2:	2606      	movs	r6, #6
 80008d4:	e7c8      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008d6:	2607      	movs	r6, #7
 80008d8:	e7c6      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008da:	2608      	movs	r6, #8
 80008dc:	e7c4      	b.n	8000868 <HAL_GPIO_Init+0x14c>
 80008de:	bf00      	nop
 80008e0:	40013c00 	.word	0x40013c00
 80008e4:	40020000 	.word	0x40020000
 80008e8:	40023800 	.word	0x40023800
 80008ec:	40021400 	.word	0x40021400

080008f0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008f0:	b10a      	cbz	r2, 80008f6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80008f2:	6181      	str	r1, [r0, #24]
 80008f4:	4770      	bx	lr
 80008f6:	0409      	lsls	r1, r1, #16
 80008f8:	e7fb      	b.n	80008f2 <HAL_GPIO_WritePin+0x2>

080008fa <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80008fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80008fe:	4607      	mov	r7, r0
{
 8000900:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000902:	2800      	cmp	r0, #0
 8000904:	d041      	beq.n	800098a <HAL_HCD_Init+0x90>
  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000906:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 800090a:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 800090c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000910:	b91b      	cbnz	r3, 800091a <HAL_HCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8000912:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8000916:	f002 fc0d 	bl	8003134 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800091a:	2303      	movs	r3, #3

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800091c:	466d      	mov	r5, sp
 800091e:	f107 0804 	add.w	r8, r7, #4

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000922:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000924:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000928:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 800092a:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800092c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000930:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000934:	bf08      	it	eq
 8000936:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000938:	f001 f83f 	bl	80019ba <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800093c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800093e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000940:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000942:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000944:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000948:	e885 0003 	stmia.w	r5, {r0, r1}
 800094c:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000950:	6838      	ldr	r0, [r7, #0]

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000952:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000954:	f000 fff6 	bl	8001944 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000958:	f856 0b10 	ldr.w	r0, [r6], #16
 800095c:	2101      	movs	r1, #1
 800095e:	f001 f832 	bl	80019c6 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000962:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000964:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000966:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000968:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800096a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800096e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000972:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000976:	6838      	ldr	r0, [r7, #0]
 8000978:	f001 f87e 	bl	8001a78 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800097c:	2301      	movs	r3, #1

  return HAL_OK;
 800097e:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8000980:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8000984:	b00a      	add	sp, #40	; 0x28
 8000986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800098a:	2001      	movs	r0, #1
 800098c:	e7fa      	b.n	8000984 <HAL_HCD_Init+0x8a>

0800098e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800098e:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000990:	f04f 0c00 	mov.w	ip, #0
{
 8000994:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8000998:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800099a:	6804      	ldr	r4, [r0, #0]
 800099c:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800099e:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009a0:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009a2:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009a6:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009a8:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009ac:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80009b0:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009b4:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80009b8:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80009ba:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009bc:	68e0      	ldr	r0, [r4, #12]
 80009be:	f3c0 400b 	ubfx	r0, r0, #16, #12
 80009c2:	4430      	add	r0, r6
 80009c4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009c8:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80009ca:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80009cc:	68e0      	ldr	r0, [r4, #12]
 80009ce:	f3c0 000a 	ubfx	r0, r0, #0, #11
 80009d2:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80009d4:	6898      	ldr	r0, [r3, #8]
 80009d6:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 80009da:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009dc:	6888      	ldr	r0, [r1, #8]
 80009de:	68e6      	ldr	r6, [r4, #12]
 80009e0:	3001      	adds	r0, #1
 80009e2:	f3c6 060a 	ubfx	r6, r6, #0, #11
 80009e6:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80009e8:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80009ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ee:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80009f0:	6918      	ldr	r0, [r3, #16]
 80009f2:	f020 0007 	bic.w	r0, r0, #7
 80009f6:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80009f8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80009fa:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80009fc:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8000a00:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8000a04:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8000a08:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8000a0c:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8000a10:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8000a14:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000a18:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8000a1a:	6958      	ldr	r0, [r3, #20]
 8000a1c:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8000a20:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8000a22:	6948      	ldr	r0, [r1, #20]
 8000a24:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8000a26:	69d8      	ldr	r0, [r3, #28]
 8000a28:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8000a2c:	f020 0007 	bic.w	r0, r0, #7
 8000a30:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8000a32:	6a08      	ldr	r0, [r1, #32]
 8000a34:	69cd      	ldr	r5, [r1, #28]
 8000a36:	4305      	orrs	r5, r0
 8000a38:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000a3a:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000a3c:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8000a3e:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8000a42:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8000a44:	b31e      	cbz	r6, 8000a8e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8000a46:	2e01      	cmp	r6, #1
 8000a48:	d023      	beq.n	8000a92 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8000a4a:	1eb0      	subs	r0, r6, #2
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d922      	bls.n	8000a96 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8000a50:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8000a52:	bf0c      	ite	eq
 8000a54:	2002      	moveq	r0, #2
 8000a56:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a58:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a5a:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8000a5e:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8000a62:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a64:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a66:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8000a68:	4345      	muls	r5, r0
 8000a6a:	4378      	muls	r0, r7
 8000a6c:	3003      	adds	r0, #3
 8000a6e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a72:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8000a74:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000a76:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8000a7a:	f020 0007 	bic.w	r0, r0, #7
 8000a7e:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8000a80:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8000a82:	58a3      	ldr	r3, [r4, r2]
 8000a84:	f043 0301 	orr.w	r3, r3, #1
 8000a88:	50a3      	str	r3, [r4, r2]
 8000a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8000a8e:	2004      	movs	r0, #4
 8000a90:	e7e2      	b.n	8000a58 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8000a92:	2003      	movs	r0, #3
 8000a94:	e7e0      	b.n	8000a58 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8000a96:	2002      	movs	r0, #2
 8000a98:	e7de      	b.n	8000a58 <LTDC_SetConfig+0xca>
	...

08000a9c <HAL_LTDC_Init>:
{
 8000a9c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8000a9e:	4604      	mov	r4, r0
 8000aa0:	2800      	cmp	r0, #0
 8000aa2:	d063      	beq.n	8000b6c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8000aa4:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8000aa8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000aac:	b91b      	cbnz	r3, 8000ab6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8000aae:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8000ab2:	f002 fab3 	bl	800301c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000ab6:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ab8:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000aba:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8000abe:	6823      	ldr	r3, [r4, #0]
 8000ac0:	699a      	ldr	r2, [r3, #24]
 8000ac2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8000ac6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ac8:	6862      	ldr	r2, [r4, #4]
 8000aca:	6999      	ldr	r1, [r3, #24]
 8000acc:	4302      	orrs	r2, r0
 8000ace:	68e0      	ldr	r0, [r4, #12]
 8000ad0:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8000ad2:	6920      	ldr	r0, [r4, #16]
 8000ad4:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8000ad6:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000ad8:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000ada:	4925      	ldr	r1, [pc, #148]	; (8000b70 <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8000adc:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8000ade:	689a      	ldr	r2, [r3, #8]
 8000ae0:	400a      	ands	r2, r1
 8000ae2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000ae4:	689a      	ldr	r2, [r3, #8]
 8000ae6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aea:	69a0      	ldr	r0, [r4, #24]
 8000aec:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8000aee:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8000af0:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	400a      	ands	r2, r1
 8000af6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000af8:	68da      	ldr	r2, [r3, #12]
 8000afa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000afe:	6a20      	ldr	r0, [r4, #32]
 8000b00:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8000b02:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8000b04:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8000b06:	691a      	ldr	r2, [r3, #16]
 8000b08:	400a      	ands	r2, r1
 8000b0a:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8000b0c:	691a      	ldr	r2, [r3, #16]
 8000b0e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b12:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8000b14:	4302      	orrs	r2, r0
 8000b16:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8000b18:	695a      	ldr	r2, [r3, #20]
 8000b1a:	4011      	ands	r1, r2
 8000b1c:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8000b1e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b26:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8000b28:	430a      	orrs	r2, r1
 8000b2a:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b2c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8000b2e:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b32:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8000b36:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8000b3a:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000b3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000b3e:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8000b42:	430a      	orrs	r2, r1
 8000b44:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8000b48:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000b4c:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8000b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	f042 0206 	orr.w	r2, r2, #6
 8000b56:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8000b58:	699a      	ldr	r2, [r3, #24]
 8000b5a:	f042 0201 	orr.w	r2, r2, #1
 8000b5e:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8000b60:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8000b62:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8000b66:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b6c:	2001      	movs	r0, #1
}
 8000b6e:	bd38      	pop	{r3, r4, r5, pc}
 8000b70:	f000f800 	.word	0xf000f800

08000b74 <HAL_LTDC_ConfigLayer>:
{
 8000b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8000b76:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8000b7a:	4606      	mov	r6, r0
 8000b7c:	468e      	mov	lr, r1
 8000b7e:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8000b80:	2b01      	cmp	r3, #1
 8000b82:	f04f 0002 	mov.w	r0, #2
 8000b86:	d01d      	beq.n	8000bc4 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000b88:	2434      	movs	r4, #52	; 0x34
 8000b8a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000b8c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 8000b90:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000b92:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8000b96:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000b9a:	3438      	adds	r4, #56	; 0x38
 8000b9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000baa:	4630      	mov	r0, r6
 8000bac:	4662      	mov	r2, ip
 8000bae:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8000bb0:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bb2:	f7ff feec 	bl	800098e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bb6:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8000bb8:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bba:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8000bbc:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000bc0:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8000bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000bc6 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8000bc6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8000bca:	2b01      	cmp	r3, #1
 8000bcc:	f04f 0302 	mov.w	r3, #2
{
 8000bd0:	b570      	push	{r4, r5, r6, lr}
 8000bd2:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8000bd4:	d015      	beq.n	8000c02 <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8000bd6:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8000bda:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8000bdc:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 8000bde:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 8000be0:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8000be4:	18c6      	adds	r6, r0, r3
 8000be6:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8000be8:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8000bec:	4401      	add	r1, r0
 8000bee:	f7ff fece 	bl	800098e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bf2:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8000bf4:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8000bf6:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8000bf8:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8000bfc:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 8000c00:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 8000c02:	4618      	mov	r0, r3
}
 8000c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c08 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	4b19      	ldr	r3, [pc, #100]	; (8000c70 <HAL_PWREx_EnableOverDrive+0x68>)
{
 8000c0a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c0e:	4c19      	ldr	r4, [pc, #100]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c14:	641a      	str	r2, [r3, #64]	; 0x40
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000c20:	6823      	ldr	r3, [r4, #0]
 8000c22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c26:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c28:	f7ff fcb6 	bl	8000598 <HAL_GetTick>
 8000c2c:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000c2e:	6863      	ldr	r3, [r4, #4]
 8000c30:	03da      	lsls	r2, r3, #15
 8000c32:	d50c      	bpl.n	8000c4e <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000c34:	6823      	ldr	r3, [r4, #0]
 8000c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3a:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3c:	f7ff fcac 	bl	8000598 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c40:	4c0c      	ldr	r4, [pc, #48]	; (8000c74 <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 8000c42:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c44:	6863      	ldr	r3, [r4, #4]
 8000c46:	039b      	lsls	r3, r3, #14
 8000c48:	d50a      	bpl.n	8000c60 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	e006      	b.n	8000c5c <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c4e:	f7ff fca3 	bl	8000598 <HAL_GetTick>
 8000c52:	1b40      	subs	r0, r0, r5
 8000c54:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c58:	d9e9      	bls.n	8000c2e <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8000c5a:	2003      	movs	r0, #3
}
 8000c5c:	b003      	add	sp, #12
 8000c5e:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c60:	f7ff fc9a 	bl	8000598 <HAL_GetTick>
 8000c64:	1b40      	subs	r0, r0, r5
 8000c66:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8000c6a:	d9eb      	bls.n	8000c44 <HAL_PWREx_EnableOverDrive+0x3c>
 8000c6c:	e7f5      	b.n	8000c5a <HAL_PWREx_EnableOverDrive+0x52>
 8000c6e:	bf00      	nop
 8000c70:	40023800 	.word	0x40023800
 8000c74:	40007000 	.word	0x40007000

08000c78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c78:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c7c:	4604      	mov	r4, r0
 8000c7e:	b908      	cbnz	r0, 8000c84 <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8000c80:	2001      	movs	r0, #1
 8000c82:	e03f      	b.n	8000d04 <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c84:	6803      	ldr	r3, [r0, #0]
 8000c86:	07d8      	lsls	r0, r3, #31
 8000c88:	d410      	bmi.n	8000cac <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	0799      	lsls	r1, r3, #30
 8000c8e:	d460      	bmi.n	8000d52 <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c90:	6823      	ldr	r3, [r4, #0]
 8000c92:	0719      	lsls	r1, r3, #28
 8000c94:	f100 80a5 	bmi.w	8000de2 <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c98:	6823      	ldr	r3, [r4, #0]
 8000c9a:	075a      	lsls	r2, r3, #29
 8000c9c:	f100 80c6 	bmi.w	8000e2c <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ca0:	69a0      	ldr	r0, [r4, #24]
 8000ca2:	2800      	cmp	r0, #0
 8000ca4:	f040 8130 	bne.w	8000f08 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8000ca8:	2000      	movs	r0, #0
 8000caa:	e02b      	b.n	8000d04 <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000cac:	4b94      	ldr	r3, [pc, #592]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	f002 020c 	and.w	r2, r2, #12
 8000cb4:	2a04      	cmp	r2, #4
 8000cb6:	d007      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000cb8:	689a      	ldr	r2, [r3, #8]
 8000cba:	f002 020c 	and.w	r2, r2, #12
 8000cbe:	2a08      	cmp	r2, #8
 8000cc0:	d10a      	bne.n	8000cd8 <HAL_RCC_OscConfig+0x60>
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	025a      	lsls	r2, r3, #9
 8000cc6:	d507      	bpl.n	8000cd8 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cc8:	4b8d      	ldr	r3, [pc, #564]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	039b      	lsls	r3, r3, #14
 8000cce:	d5dc      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x12>
 8000cd0:	6863      	ldr	r3, [r4, #4]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d1d9      	bne.n	8000c8a <HAL_RCC_OscConfig+0x12>
 8000cd6:	e7d3      	b.n	8000c80 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cd8:	6863      	ldr	r3, [r4, #4]
 8000cda:	4d89      	ldr	r5, [pc, #548]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ce0:	d113      	bne.n	8000d0a <HAL_RCC_OscConfig+0x92>
 8000ce2:	682b      	ldr	r3, [r5, #0]
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000cea:	f7ff fc55 	bl	8000598 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cee:	4d84      	ldr	r5, [pc, #528]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 8000cf0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	682b      	ldr	r3, [r5, #0]
 8000cf4:	039f      	lsls	r7, r3, #14
 8000cf6:	d4c8      	bmi.n	8000c8a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cf8:	f7ff fc4e 	bl	8000598 <HAL_GetTick>
 8000cfc:	1b80      	subs	r0, r0, r6
 8000cfe:	2864      	cmp	r0, #100	; 0x64
 8000d00:	d9f7      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000d02:	2003      	movs	r0, #3
}
 8000d04:	b002      	add	sp, #8
 8000d06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0a:	b99b      	cbnz	r3, 8000d34 <HAL_RCC_OscConfig+0xbc>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d12:	602b      	str	r3, [r5, #0]
 8000d14:	682b      	ldr	r3, [r5, #0]
 8000d16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d1a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc3c 	bl	8000598 <HAL_GetTick>
 8000d20:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	0398      	lsls	r0, r3, #14
 8000d26:	d5b0      	bpl.n	8000c8a <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d28:	f7ff fc36 	bl	8000598 <HAL_GetTick>
 8000d2c:	1b80      	subs	r0, r0, r6
 8000d2e:	2864      	cmp	r0, #100	; 0x64
 8000d30:	d9f7      	bls.n	8000d22 <HAL_RCC_OscConfig+0xaa>
 8000d32:	e7e6      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d38:	682b      	ldr	r3, [r5, #0]
 8000d3a:	d103      	bne.n	8000d44 <HAL_RCC_OscConfig+0xcc>
 8000d3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d40:	602b      	str	r3, [r5, #0]
 8000d42:	e7ce      	b.n	8000ce2 <HAL_RCC_OscConfig+0x6a>
 8000d44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d48:	602b      	str	r3, [r5, #0]
 8000d4a:	682b      	ldr	r3, [r5, #0]
 8000d4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d50:	e7ca      	b.n	8000ce8 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d52:	4b6b      	ldr	r3, [pc, #428]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000d54:	689a      	ldr	r2, [r3, #8]
 8000d56:	f012 0f0c 	tst.w	r2, #12
 8000d5a:	d007      	beq.n	8000d6c <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5c:	689a      	ldr	r2, [r3, #8]
 8000d5e:	f002 020c 	and.w	r2, r2, #12
 8000d62:	2a08      	cmp	r2, #8
 8000d64:	d111      	bne.n	8000d8a <HAL_RCC_OscConfig+0x112>
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	0259      	lsls	r1, r3, #9
 8000d6a:	d40e      	bmi.n	8000d8a <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d6c:	4b64      	ldr	r3, [pc, #400]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	0792      	lsls	r2, r2, #30
 8000d72:	d502      	bpl.n	8000d7a <HAL_RCC_OscConfig+0x102>
 8000d74:	68e2      	ldr	r2, [r4, #12]
 8000d76:	2a01      	cmp	r2, #1
 8000d78:	d182      	bne.n	8000c80 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	6921      	ldr	r1, [r4, #16]
 8000d7e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000d82:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000d86:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d88:	e782      	b.n	8000c90 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000d8a:	68e3      	ldr	r3, [r4, #12]
 8000d8c:	4d5c      	ldr	r5, [pc, #368]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000d8e:	b1bb      	cbz	r3, 8000dc0 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8000d90:	682b      	ldr	r3, [r5, #0]
 8000d92:	f043 0301 	orr.w	r3, r3, #1
 8000d96:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fbfe 	bl	8000598 <HAL_GetTick>
 8000d9c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9e:	682b      	ldr	r3, [r5, #0]
 8000da0:	079f      	lsls	r7, r3, #30
 8000da2:	d507      	bpl.n	8000db4 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da4:	682b      	ldr	r3, [r5, #0]
 8000da6:	6922      	ldr	r2, [r4, #16]
 8000da8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000dac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000db0:	602b      	str	r3, [r5, #0]
 8000db2:	e76d      	b.n	8000c90 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000db4:	f7ff fbf0 	bl	8000598 <HAL_GetTick>
 8000db8:	1b80      	subs	r0, r0, r6
 8000dba:	2802      	cmp	r0, #2
 8000dbc:	d9ef      	bls.n	8000d9e <HAL_RCC_OscConfig+0x126>
 8000dbe:	e7a0      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000dc0:	682b      	ldr	r3, [r5, #0]
 8000dc2:	f023 0301 	bic.w	r3, r3, #1
 8000dc6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000dc8:	f7ff fbe6 	bl	8000598 <HAL_GetTick>
 8000dcc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dce:	682b      	ldr	r3, [r5, #0]
 8000dd0:	0798      	lsls	r0, r3, #30
 8000dd2:	f57f af5d 	bpl.w	8000c90 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dd6:	f7ff fbdf 	bl	8000598 <HAL_GetTick>
 8000dda:	1b80      	subs	r0, r0, r6
 8000ddc:	2802      	cmp	r0, #2
 8000dde:	d9f6      	bls.n	8000dce <HAL_RCC_OscConfig+0x156>
 8000de0:	e78f      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8000de2:	6963      	ldr	r3, [r4, #20]
 8000de4:	4d46      	ldr	r5, [pc, #280]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000de6:	b183      	cbz	r3, 8000e0a <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 8000de8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000df0:	f7ff fbd2 	bl	8000598 <HAL_GetTick>
 8000df4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000df6:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000df8:	079b      	lsls	r3, r3, #30
 8000dfa:	f53f af4d 	bmi.w	8000c98 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fbcb 	bl	8000598 <HAL_GetTick>
 8000e02:	1b80      	subs	r0, r0, r6
 8000e04:	2802      	cmp	r0, #2
 8000e06:	d9f6      	bls.n	8000df6 <HAL_RCC_OscConfig+0x17e>
 8000e08:	e77b      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000e0a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8000e12:	f7ff fbc1 	bl	8000598 <HAL_GetTick>
 8000e16:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e18:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000e1a:	079f      	lsls	r7, r3, #30
 8000e1c:	f57f af3c 	bpl.w	8000c98 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fbba 	bl	8000598 <HAL_GetTick>
 8000e24:	1b80      	subs	r0, r0, r6
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d9f6      	bls.n	8000e18 <HAL_RCC_OscConfig+0x1a0>
 8000e2a:	e76a      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e2c:	4b34      	ldr	r3, [pc, #208]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000e2e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e30:	00d0      	lsls	r0, r2, #3
 8000e32:	d427      	bmi.n	8000e84 <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8000e36:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e3c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e48:	4d2e      	ldr	r5, [pc, #184]	; (8000f04 <HAL_RCC_OscConfig+0x28c>)
 8000e4a:	682b      	ldr	r3, [r5, #0]
 8000e4c:	05d9      	lsls	r1, r3, #23
 8000e4e:	d51b      	bpl.n	8000e88 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e50:	68a3      	ldr	r3, [r4, #8]
 8000e52:	4d2b      	ldr	r5, [pc, #172]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d127      	bne.n	8000ea8 <HAL_RCC_OscConfig+0x230>
 8000e58:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000e5a:	f043 0301 	orr.w	r3, r3, #1
 8000e5e:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e60:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e64:	f7ff fb98 	bl	8000598 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e68:	4f25      	ldr	r7, [pc, #148]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8000e6a:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e6c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e6e:	079b      	lsls	r3, r3, #30
 8000e70:	d53f      	bpl.n	8000ef2 <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8000e72:	2e00      	cmp	r6, #0
 8000e74:	f43f af14 	beq.w	8000ca0 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e78:	4a21      	ldr	r2, [pc, #132]	; (8000f00 <HAL_RCC_OscConfig+0x288>)
 8000e7a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e80:	6413      	str	r3, [r2, #64]	; 0x40
 8000e82:	e70d      	b.n	8000ca0 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8000e84:	2600      	movs	r6, #0
 8000e86:	e7df      	b.n	8000e48 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8000e88:	682b      	ldr	r3, [r5, #0]
 8000e8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e8e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000e90:	f7ff fb82 	bl	8000598 <HAL_GetTick>
 8000e94:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e96:	682b      	ldr	r3, [r5, #0]
 8000e98:	05da      	lsls	r2, r3, #23
 8000e9a:	d4d9      	bmi.n	8000e50 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e9c:	f7ff fb7c 	bl	8000598 <HAL_GetTick>
 8000ea0:	1bc0      	subs	r0, r0, r7
 8000ea2:	2864      	cmp	r0, #100	; 0x64
 8000ea4:	d9f7      	bls.n	8000e96 <HAL_RCC_OscConfig+0x21e>
 8000ea6:	e72c      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea8:	b9ab      	cbnz	r3, 8000ed6 <HAL_RCC_OscConfig+0x25e>
 8000eaa:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	672b      	str	r3, [r5, #112]	; 0x70
 8000eb6:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000ebe:	f7ff fb6b 	bl	8000598 <HAL_GetTick>
 8000ec2:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ec4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ec6:	0798      	lsls	r0, r3, #30
 8000ec8:	d5d3      	bpl.n	8000e72 <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000eca:	f7ff fb65 	bl	8000598 <HAL_GetTick>
 8000ece:	1bc0      	subs	r0, r0, r7
 8000ed0:	4540      	cmp	r0, r8
 8000ed2:	d9f7      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x24c>
 8000ed4:	e715      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ed6:	2b05      	cmp	r3, #5
 8000ed8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eda:	d103      	bne.n	8000ee4 <HAL_RCC_OscConfig+0x26c>
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	672b      	str	r3, [r5, #112]	; 0x70
 8000ee2:	e7b9      	b.n	8000e58 <HAL_RCC_OscConfig+0x1e0>
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	672b      	str	r3, [r5, #112]	; 0x70
 8000eea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000eec:	f023 0304 	bic.w	r3, r3, #4
 8000ef0:	e7b5      	b.n	8000e5e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ef2:	f7ff fb51 	bl	8000598 <HAL_GetTick>
 8000ef6:	eba0 0008 	sub.w	r0, r0, r8
 8000efa:	42a8      	cmp	r0, r5
 8000efc:	d9b6      	bls.n	8000e6c <HAL_RCC_OscConfig+0x1f4>
 8000efe:	e700      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000f08:	4d38      	ldr	r5, [pc, #224]	; (8000fec <HAL_RCC_OscConfig+0x374>)
 8000f0a:	68ab      	ldr	r3, [r5, #8]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d041      	beq.n	8000f98 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8000f14:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f16:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000f18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f1c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	d12e      	bne.n	8000f7e <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8000f20:	f7ff fb3a 	bl	8000598 <HAL_GetTick>
 8000f24:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f26:	682b      	ldr	r3, [r5, #0]
 8000f28:	0199      	lsls	r1, r3, #6
 8000f2a:	d422      	bmi.n	8000f72 <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f2c:	6a22      	ldr	r2, [r4, #32]
 8000f2e:	69e3      	ldr	r3, [r4, #28]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000f38:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000f3c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000f3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000f42:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f44:	4c29      	ldr	r4, [pc, #164]	; (8000fec <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f46:	0852      	lsrs	r2, r2, #1
 8000f48:	3a01      	subs	r2, #1
 8000f4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000f4e:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f50:	682b      	ldr	r3, [r5, #0]
 8000f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f56:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f58:	f7ff fb1e 	bl	8000598 <HAL_GetTick>
 8000f5c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f5e:	6823      	ldr	r3, [r4, #0]
 8000f60:	019a      	lsls	r2, r3, #6
 8000f62:	f53f aea1 	bmi.w	8000ca8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f66:	f7ff fb17 	bl	8000598 <HAL_GetTick>
 8000f6a:	1b40      	subs	r0, r0, r5
 8000f6c:	2802      	cmp	r0, #2
 8000f6e:	d9f6      	bls.n	8000f5e <HAL_RCC_OscConfig+0x2e6>
 8000f70:	e6c7      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f72:	f7ff fb11 	bl	8000598 <HAL_GetTick>
 8000f76:	1b80      	subs	r0, r0, r6
 8000f78:	2802      	cmp	r0, #2
 8000f7a:	d9d4      	bls.n	8000f26 <HAL_RCC_OscConfig+0x2ae>
 8000f7c:	e6c1      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000f7e:	f7ff fb0b 	bl	8000598 <HAL_GetTick>
 8000f82:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f84:	682b      	ldr	r3, [r5, #0]
 8000f86:	019b      	lsls	r3, r3, #6
 8000f88:	f57f ae8e 	bpl.w	8000ca8 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f8c:	f7ff fb04 	bl	8000598 <HAL_GetTick>
 8000f90:	1b00      	subs	r0, r0, r4
 8000f92:	2802      	cmp	r0, #2
 8000f94:	d9f6      	bls.n	8000f84 <HAL_RCC_OscConfig+0x30c>
 8000f96:	e6b4      	b.n	8000d02 <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f98:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8000f9a:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000f9c:	f43f aeb2 	beq.w	8000d04 <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fa0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000fa4:	69e1      	ldr	r1, [r4, #28]
 8000fa6:	428a      	cmp	r2, r1
 8000fa8:	f47f ae6a 	bne.w	8000c80 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000fb0:	6a21      	ldr	r1, [r4, #32]
 8000fb2:	428a      	cmp	r2, r1
 8000fb4:	f47f ae64 	bne.w	8000c80 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fb8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fbc:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000fc4:	f47f ae5c 	bne.w	8000c80 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fc8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000fca:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000fce:	0852      	lsrs	r2, r2, #1
 8000fd0:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000fd2:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000fd6:	f47f ae53 	bne.w	8000c80 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000fda:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000fdc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8000fe0:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8000fe4:	bf14      	ite	ne
 8000fe6:	2001      	movne	r0, #1
 8000fe8:	2000      	moveq	r0, #0
 8000fea:	e68b      	b.n	8000d04 <HAL_RCC_OscConfig+0x8c>
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff0:	4913      	ldr	r1, [pc, #76]	; (8001040 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000ff2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000ff4:	688b      	ldr	r3, [r1, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b04      	cmp	r3, #4
 8000ffc:	d003      	beq.n	8001006 <HAL_RCC_GetSysClockFreq+0x16>
 8000ffe:	2b08      	cmp	r3, #8
 8001000:	d003      	beq.n	800100a <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001002:	4810      	ldr	r0, [pc, #64]	; (8001044 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001004:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001006:	4810      	ldr	r0, [pc, #64]	; (8001048 <HAL_RCC_GetSysClockFreq+0x58>)
 8001008:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800100a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800100c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800100e:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001010:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001014:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001018:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800101c:	bf1a      	itte	ne
 800101e:	480a      	ldrne	r0, [pc, #40]	; (8001048 <HAL_RCC_GetSysClockFreq+0x58>)
 8001020:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001022:	4808      	ldreq	r0, [pc, #32]	; (8001044 <HAL_RCC_GetSysClockFreq+0x54>)
 8001024:	fba1 0100 	umull	r0, r1, r1, r0
 8001028:	f7ff f8f2 	bl	8000210 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800102c:	4b04      	ldr	r3, [pc, #16]	; (8001040 <HAL_RCC_GetSysClockFreq+0x50>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001034:	3301      	adds	r3, #1
 8001036:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001038:	fbb0 f0f3 	udiv	r0, r0, r3
 800103c:	bd08      	pop	{r3, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	00f42400 	.word	0x00f42400
 8001048:	017d7840 	.word	0x017d7840

0800104c <HAL_RCC_ClockConfig>:
{
 800104c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001050:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001052:	4604      	mov	r4, r0
 8001054:	b910      	cbnz	r0, 800105c <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001056:	2001      	movs	r0, #1
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800105c:	4a46      	ldr	r2, [pc, #280]	; (8001178 <HAL_RCC_ClockConfig+0x12c>)
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f003 030f 	and.w	r3, r3, #15
 8001064:	428b      	cmp	r3, r1
 8001066:	d329      	bcc.n	80010bc <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001068:	6821      	ldr	r1, [r4, #0]
 800106a:	078f      	lsls	r7, r1, #30
 800106c:	d431      	bmi.n	80010d2 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800106e:	07c8      	lsls	r0, r1, #31
 8001070:	d444      	bmi.n	80010fc <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001072:	4a41      	ldr	r2, [pc, #260]	; (8001178 <HAL_RCC_ClockConfig+0x12c>)
 8001074:	6813      	ldr	r3, [r2, #0]
 8001076:	f003 030f 	and.w	r3, r3, #15
 800107a:	429d      	cmp	r5, r3
 800107c:	d368      	bcc.n	8001150 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800107e:	6822      	ldr	r2, [r4, #0]
 8001080:	0751      	lsls	r1, r2, #29
 8001082:	d471      	bmi.n	8001168 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001084:	0713      	lsls	r3, r2, #28
 8001086:	d507      	bpl.n	8001098 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001088:	4a3c      	ldr	r2, [pc, #240]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 800108a:	6921      	ldr	r1, [r4, #16]
 800108c:	6893      	ldr	r3, [r2, #8]
 800108e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001092:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001096:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001098:	f7ff ffaa 	bl	8000ff0 <HAL_RCC_GetSysClockFreq>
 800109c:	4b37      	ldr	r3, [pc, #220]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 800109e:	4a38      	ldr	r2, [pc, #224]	; (8001180 <HAL_RCC_ClockConfig+0x134>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80010a6:	5cd3      	ldrb	r3, [r2, r3]
 80010a8:	40d8      	lsrs	r0, r3
 80010aa:	4b36      	ldr	r3, [pc, #216]	; (8001184 <HAL_RCC_ClockConfig+0x138>)
 80010ac:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_ClockConfig+0x13c>)
 80010b0:	6818      	ldr	r0, [r3, #0]
 80010b2:	f7ff fa35 	bl	8000520 <HAL_InitTick>
  return HAL_OK;
 80010b6:	2000      	movs	r0, #0
 80010b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010bc:	6813      	ldr	r3, [r2, #0]
 80010be:	f023 030f 	bic.w	r3, r3, #15
 80010c2:	430b      	orrs	r3, r1
 80010c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010c6:	6813      	ldr	r3, [r2, #0]
 80010c8:	f003 030f 	and.w	r3, r3, #15
 80010cc:	4299      	cmp	r1, r3
 80010ce:	d1c2      	bne.n	8001056 <HAL_RCC_ClockConfig+0xa>
 80010d0:	e7ca      	b.n	8001068 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d2:	f011 0f04 	tst.w	r1, #4
 80010d6:	4b29      	ldr	r3, [pc, #164]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 80010d8:	d003      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 80010e0:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e2:	070e      	lsls	r6, r1, #28
 80010e4:	d503      	bpl.n	80010ee <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 80010ec:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010ee:	689a      	ldr	r2, [r3, #8]
 80010f0:	68a0      	ldr	r0, [r4, #8]
 80010f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80010f6:	4302      	orrs	r2, r0
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	e7b8      	b.n	800106e <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fc:	6861      	ldr	r1, [r4, #4]
 80010fe:	4b1f      	ldr	r3, [pc, #124]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 8001100:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001104:	d11c      	bne.n	8001140 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001106:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110a:	d0a4      	beq.n	8001056 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800110c:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800110e:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4e1a      	ldr	r6, [pc, #104]	; (800117c <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001114:	f022 0203 	bic.w	r2, r2, #3
 8001118:	430a      	orrs	r2, r1
 800111a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 800111c:	f7ff fa3c 	bl	8000598 <HAL_GetTick>
 8001120:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001122:	68b3      	ldr	r3, [r6, #8]
 8001124:	6862      	ldr	r2, [r4, #4]
 8001126:	f003 030c 	and.w	r3, r3, #12
 800112a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800112e:	d0a0      	beq.n	8001072 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001130:	f7ff fa32 	bl	8000598 <HAL_GetTick>
 8001134:	1bc0      	subs	r0, r0, r7
 8001136:	4540      	cmp	r0, r8
 8001138:	d9f3      	bls.n	8001122 <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 800113a:	2003      	movs	r0, #3
}
 800113c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001140:	2902      	cmp	r1, #2
 8001142:	d102      	bne.n	800114a <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001144:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001148:	e7df      	b.n	800110a <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	f012 0f02 	tst.w	r2, #2
 800114e:	e7dc      	b.n	800110a <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001150:	6813      	ldr	r3, [r2, #0]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	432b      	orrs	r3, r5
 8001158:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800115a:	6813      	ldr	r3, [r2, #0]
 800115c:	f003 030f 	and.w	r3, r3, #15
 8001160:	429d      	cmp	r5, r3
 8001162:	f47f af78 	bne.w	8001056 <HAL_RCC_ClockConfig+0xa>
 8001166:	e78a      	b.n	800107e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <HAL_RCC_ClockConfig+0x130>)
 800116a:	68e0      	ldr	r0, [r4, #12]
 800116c:	688b      	ldr	r3, [r1, #8]
 800116e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001172:	4303      	orrs	r3, r0
 8001174:	608b      	str	r3, [r1, #8]
 8001176:	e785      	b.n	8001084 <HAL_RCC_ClockConfig+0x38>
 8001178:	40023c00 	.word	0x40023c00
 800117c:	40023800 	.word	0x40023800
 8001180:	080033d5 	.word	0x080033d5
 8001184:	2000000c 	.word	0x2000000c
 8001188:	20000004 	.word	0x20000004

0800118c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800118c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001190:	6802      	ldr	r2, [r0, #0]
{
 8001192:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001194:	f012 0601 	ands.w	r6, r2, #1
 8001198:	d00b      	beq.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800119a:	4bb8      	ldr	r3, [pc, #736]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800119c:	6899      	ldr	r1, [r3, #8]
 800119e:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 80011a2:	6099      	str	r1, [r3, #8]
 80011a4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 80011a6:	6899      	ldr	r1, [r3, #8]
 80011a8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80011aa:	fab6 f686 	clz	r6, r6
 80011ae:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80011b0:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80011b2:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 80011b6:	d012      	beq.n	80011de <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011b8:	49b0      	ldr	r1, [pc, #704]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011ba:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80011bc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80011c0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011c4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 80011c8:	bf08      	it	eq
 80011ca:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011cc:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011d0:	bf16      	itet	ne
 80011d2:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 80011d6:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80011d8:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80011da:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80011de:	02d1      	lsls	r1, r2, #11
 80011e0:	d510      	bpl.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011e2:	48a6      	ldr	r0, [pc, #664]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80011e4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80011e6:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011ea:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80011ee:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80011f2:	ea43 0301 	orr.w	r3, r3, r1
 80011f6:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80011fa:	f000 8185 	beq.w	8001508 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 80011fe:	2900      	cmp	r1, #0
 8001200:	bf08      	it	eq
 8001202:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001204:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001208:	bf18      	it	ne
 800120a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800120c:	0692      	lsls	r2, r2, #26
 800120e:	d531      	bpl.n	8001274 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	4b9a      	ldr	r3, [pc, #616]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001212:	4f9b      	ldr	r7, [pc, #620]	; (8001480 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001216:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800121a:	641a      	str	r2, [r3, #64]	; 0x40
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001222:	9301      	str	r3, [sp, #4]
 8001224:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800122e:	f7ff f9b3 	bl	8000598 <HAL_GetTick>
 8001232:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	05db      	lsls	r3, r3, #23
 8001238:	f140 8168 	bpl.w	800150c <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800123c:	4f8f      	ldr	r7, [pc, #572]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800123e:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001240:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001244:	f040 816d 	bne.w	8001522 <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001248:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800124a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800124e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001252:	4a8a      	ldr	r2, [pc, #552]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001254:	f040 818b 	bne.w	800156e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001258:	6891      	ldr	r1, [r2, #8]
 800125a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800125e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001262:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001266:	4301      	orrs	r1, r0
 8001268:	6091      	str	r1, [r2, #8]
 800126a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800126e:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001270:	430b      	orrs	r3, r1
 8001272:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	06da      	lsls	r2, r3, #27
 8001278:	d50c      	bpl.n	8001294 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800127a:	4a80      	ldr	r2, [pc, #512]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800127c:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001280:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001284:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001288:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 800128c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800128e:	4301      	orrs	r1, r0
 8001290:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001294:	045f      	lsls	r7, r3, #17
 8001296:	d508      	bpl.n	80012aa <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001298:	4978      	ldr	r1, [pc, #480]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800129a:	6e60      	ldr	r0, [r4, #100]	; 0x64
 800129c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012a0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80012a4:	4302      	orrs	r2, r0
 80012a6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80012aa:	0418      	lsls	r0, r3, #16
 80012ac:	d508      	bpl.n	80012c0 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80012ae:	4973      	ldr	r1, [pc, #460]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012b0:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 80012b2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012b6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80012ba:	4302      	orrs	r2, r0
 80012bc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80012c0:	03d9      	lsls	r1, r3, #15
 80012c2:	d508      	bpl.n	80012d6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80012c4:	496d      	ldr	r1, [pc, #436]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012c6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80012c8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012cc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80012d0:	4302      	orrs	r2, r0
 80012d2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80012d6:	039a      	lsls	r2, r3, #14
 80012d8:	d508      	bpl.n	80012ec <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80012da:	4968      	ldr	r1, [pc, #416]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012dc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 80012de:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012e2:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80012e6:	4302      	orrs	r2, r0
 80012e8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80012ec:	065f      	lsls	r7, r3, #25
 80012ee:	d508      	bpl.n	8001302 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80012f0:	4962      	ldr	r1, [pc, #392]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80012f2:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80012f4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80012f8:	f022 0203 	bic.w	r2, r2, #3
 80012fc:	4302      	orrs	r2, r0
 80012fe:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001302:	0618      	lsls	r0, r3, #24
 8001304:	d508      	bpl.n	8001318 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001306:	495d      	ldr	r1, [pc, #372]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001308:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800130a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800130e:	f022 020c 	bic.w	r2, r2, #12
 8001312:	4302      	orrs	r2, r0
 8001314:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001318:	05d9      	lsls	r1, r3, #23
 800131a:	d508      	bpl.n	800132e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800131c:	4957      	ldr	r1, [pc, #348]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800131e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001320:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001324:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001328:	4302      	orrs	r2, r0
 800132a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800132e:	059a      	lsls	r2, r3, #22
 8001330:	d508      	bpl.n	8001344 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001332:	4952      	ldr	r1, [pc, #328]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001334:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001336:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800133a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800133e:	4302      	orrs	r2, r0
 8001340:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001344:	055f      	lsls	r7, r3, #21
 8001346:	d508      	bpl.n	800135a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001348:	494c      	ldr	r1, [pc, #304]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800134a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800134c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001350:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001354:	4302      	orrs	r2, r0
 8001356:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800135a:	0518      	lsls	r0, r3, #20
 800135c:	d508      	bpl.n	8001370 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800135e:	4947      	ldr	r1, [pc, #284]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001362:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001366:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800136a:	4302      	orrs	r2, r0
 800136c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001370:	04d9      	lsls	r1, r3, #19
 8001372:	d508      	bpl.n	8001386 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001374:	4941      	ldr	r1, [pc, #260]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001376:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001378:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 800137c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001380:	4302      	orrs	r2, r0
 8001382:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001386:	049a      	lsls	r2, r3, #18
 8001388:	d508      	bpl.n	800139c <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800138a:	493c      	ldr	r1, [pc, #240]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800138c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800138e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001392:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001396:	4302      	orrs	r2, r0
 8001398:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800139c:	025f      	lsls	r7, r3, #9
 800139e:	d508      	bpl.n	80013b2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80013a0:	4936      	ldr	r1, [pc, #216]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013a2:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 80013a4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013a8:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 80013ac:	4302      	orrs	r2, r0
 80013ae:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80013b2:	0298      	lsls	r0, r3, #10
 80013b4:	d50c      	bpl.n	80013d0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013b6:	4831      	ldr	r0, [pc, #196]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80013ba:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 80013be:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013c2:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 80013c6:	bf08      	it	eq
 80013c8:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80013ca:	430a      	orrs	r2, r1
 80013cc:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 80013d0:	f013 0f08 	tst.w	r3, #8
 80013d4:	bf18      	it	ne
 80013d6:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80013d8:	0359      	lsls	r1, r3, #13
 80013da:	d508      	bpl.n	80013ee <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80013dc:	4927      	ldr	r1, [pc, #156]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013de:	6f60      	ldr	r0, [r4, #116]	; 0x74
 80013e0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80013e8:	4302      	orrs	r2, r0
 80013ea:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80013ee:	021a      	lsls	r2, r3, #8
 80013f0:	d509      	bpl.n	8001406 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80013f2:	4922      	ldr	r1, [pc, #136]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80013f4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80013f8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 80013fc:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001400:	4302      	orrs	r2, r0
 8001402:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001406:	2e01      	cmp	r6, #1
 8001408:	f000 80b5 	beq.w	8001576 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800140c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001410:	f000 80b1 	beq.w	8001576 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001414:	2d01      	cmp	r5, #1
 8001416:	d175      	bne.n	8001504 <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001418:	4d18      	ldr	r5, [pc, #96]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 800141a:	682b      	ldr	r3, [r5, #0]
 800141c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001420:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001422:	f7ff f8b9 	bl	8000598 <HAL_GetTick>
 8001426:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	009f      	lsls	r7, r3, #2
 800142c:	f100 8127 	bmi.w	800167e <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001430:	6821      	ldr	r1, [r4, #0]
 8001432:	030e      	lsls	r6, r1, #12
 8001434:	d501      	bpl.n	800143a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001436:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001438:	b11b      	cbz	r3, 8001442 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 800143a:	02cd      	lsls	r5, r1, #11
 800143c:	d522      	bpl.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800143e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001440:	bb03      	cbnz	r3, 8001484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001444:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001448:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800144c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001450:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001454:	4303      	orrs	r3, r0
 8001456:	6960      	ldr	r0, [r4, #20]
 8001458:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800145c:	69a0      	ldr	r0, [r4, #24]
 800145e:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001462:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001466:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800146a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800146c:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001470:	3801      	subs	r0, #1
 8001472:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001476:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800147a:	e003      	b.n	8001484 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 800147c:	40023800 	.word	0x40023800
 8001480:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001484:	0288      	lsls	r0, r1, #10
 8001486:	d515      	bpl.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
 8001488:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800148a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800148e:	d111      	bne.n	80014b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001490:	4a82      	ldr	r2, [pc, #520]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001492:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001496:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800149a:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 800149e:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80014a2:	4303      	orrs	r3, r0
 80014a4:	6960      	ldr	r0, [r4, #20]
 80014a6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80014aa:	6a20      	ldr	r0, [r4, #32]
 80014ac:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80014b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80014b4:	070a      	lsls	r2, r1, #28
 80014b6:	d519      	bpl.n	80014ec <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80014b8:	4978      	ldr	r1, [pc, #480]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80014be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80014c2:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 80014c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014ca:	4313      	orrs	r3, r2
 80014cc:	6962      	ldr	r2, [r4, #20]
 80014ce:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80014d2:	69e2      	ldr	r2, [r4, #28]
 80014d4:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80014d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80014dc:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 80014e0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80014e2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80014e6:	4313      	orrs	r3, r2
 80014e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80014ec:	4c6b      	ldr	r4, [pc, #428]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80014ee:	6823      	ldr	r3, [r4, #0]
 80014f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014f4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80014f6:	f7ff f84f 	bl	8000598 <HAL_GetTick>
 80014fa:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	f140 80c4 	bpl.w	800168c <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001504:	2000      	movs	r0, #0
 8001506:	e009      	b.n	800151c <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 8001508:	2601      	movs	r6, #1
 800150a:	e67b      	b.n	8001204 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150c:	f7ff f844 	bl	8000598 <HAL_GetTick>
 8001510:	eba0 0008 	sub.w	r0, r0, r8
 8001514:	2864      	cmp	r0, #100	; 0x64
 8001516:	f67f ae8d 	bls.w	8001234 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 800151a:	2003      	movs	r0, #3
}
 800151c:	b003      	add	sp, #12
 800151e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001522:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001524:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001528:	4293      	cmp	r3, r2
 800152a:	f43f ae8d 	beq.w	8001248 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800152e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001530:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001536:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800153a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800153c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800153e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001542:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001544:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001546:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001548:	07d8      	lsls	r0, r3, #31
 800154a:	f57f ae7d 	bpl.w	8001248 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 800154e:	f7ff f823 	bl	8000598 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001556:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001558:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800155a:	0799      	lsls	r1, r3, #30
 800155c:	f53f ae74 	bmi.w	8001248 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001560:	f7ff f81a 	bl	8000598 <HAL_GetTick>
 8001564:	eba0 0008 	sub.w	r0, r0, r8
 8001568:	4548      	cmp	r0, r9
 800156a:	d9f5      	bls.n	8001558 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800156c:	e7d5      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800156e:	6891      	ldr	r1, [r2, #8]
 8001570:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001574:	e678      	b.n	8001268 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 8001576:	4e49      	ldr	r6, [pc, #292]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001578:	6833      	ldr	r3, [r6, #0]
 800157a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800157e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001580:	f7ff f80a 	bl	8000598 <HAL_GetTick>
 8001584:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001586:	6833      	ldr	r3, [r6, #0]
 8001588:	011b      	lsls	r3, r3, #4
 800158a:	d472      	bmi.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800158c:	6822      	ldr	r2, [r4, #0]
 800158e:	07d7      	lsls	r7, r2, #31
 8001590:	d512      	bpl.n	80015b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 8001592:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001594:	b983      	cbnz	r3, 80015b8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001596:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800159a:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800159e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015a2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 80015a6:	430b      	orrs	r3, r1
 80015a8:	6861      	ldr	r1, [r4, #4]
 80015aa:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80015ae:	68a1      	ldr	r1, [r4, #8]
 80015b0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 80015b4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80015b8:	0316      	lsls	r6, r2, #12
 80015ba:	d503      	bpl.n	80015c4 <HAL_RCCEx_PeriphCLKConfig+0x438>
 80015bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80015c2:	d005      	beq.n	80015d0 <HAL_RCCEx_PeriphCLKConfig+0x444>
 80015c4:	02d0      	lsls	r0, r2, #11
 80015c6:	d51e      	bpl.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80015c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80015ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80015ce:	d11a      	bne.n	8001606 <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80015d0:	4932      	ldr	r1, [pc, #200]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80015d2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80015d6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80015da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015de:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80015e2:	4303      	orrs	r3, r0
 80015e4:	6860      	ldr	r0, [r4, #4]
 80015e6:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80015ea:	68e0      	ldr	r0, [r4, #12]
 80015ec:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80015f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80015f4:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80015f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015fa:	f020 001f 	bic.w	r0, r0, #31
 80015fe:	3b01      	subs	r3, #1
 8001600:	4303      	orrs	r3, r0
 8001602:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001606:	01d1      	lsls	r1, r2, #7
 8001608:	d511      	bpl.n	800162e <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800160a:	4924      	ldr	r1, [pc, #144]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800160c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001610:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8001614:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001618:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800161c:	4303      	orrs	r3, r0
 800161e:	6860      	ldr	r0, [r4, #4]
 8001620:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001624:	6920      	ldr	r0, [r4, #16]
 8001626:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800162a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800162e:	0192      	lsls	r2, r2, #6
 8001630:	d50d      	bpl.n	800164e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001632:	6923      	ldr	r3, [r4, #16]
 8001634:	6862      	ldr	r2, [r4, #4]
 8001636:	041b      	lsls	r3, r3, #16
 8001638:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800163c:	68e2      	ldr	r2, [r4, #12]
 800163e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001642:	68a2      	ldr	r2, [r4, #8]
 8001644:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001648:	4a14      	ldr	r2, [pc, #80]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800164a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800164e:	4e13      	ldr	r6, [pc, #76]	; (800169c <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8001650:	6833      	ldr	r3, [r6, #0]
 8001652:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001656:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001658:	f7fe ff9e 	bl	8000598 <HAL_GetTick>
 800165c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800165e:	6833      	ldr	r3, [r6, #0]
 8001660:	011b      	lsls	r3, r3, #4
 8001662:	f53f aed7 	bmi.w	8001414 <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001666:	f7fe ff97 	bl	8000598 <HAL_GetTick>
 800166a:	1bc0      	subs	r0, r0, r7
 800166c:	2864      	cmp	r0, #100	; 0x64
 800166e:	d9f6      	bls.n	800165e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8001670:	e753      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001672:	f7fe ff91 	bl	8000598 <HAL_GetTick>
 8001676:	1bc0      	subs	r0, r0, r7
 8001678:	2864      	cmp	r0, #100	; 0x64
 800167a:	d984      	bls.n	8001586 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 800167c:	e74d      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800167e:	f7fe ff8b 	bl	8000598 <HAL_GetTick>
 8001682:	1b80      	subs	r0, r0, r6
 8001684:	2864      	cmp	r0, #100	; 0x64
 8001686:	f67f aecf 	bls.w	8001428 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 800168a:	e746      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800168c:	f7fe ff84 	bl	8000598 <HAL_GetTick>
 8001690:	1b40      	subs	r0, r0, r5
 8001692:	2864      	cmp	r0, #100	; 0x64
 8001694:	f67f af32 	bls.w	80014fc <HAL_RCCEx_PeriphCLKConfig+0x370>
 8001698:	e73f      	b.n	800151a <HAL_RCCEx_PeriphCLKConfig+0x38e>
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800

080016a0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80016a0:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80016a2:	4604      	mov	r4, r0
 80016a4:	b190      	cbz	r0, 80016cc <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80016a6:	7943      	ldrb	r3, [r0, #5]
 80016a8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016ac:	b913      	cbnz	r3, 80016b4 <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80016ae:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80016b0:	f001 fd2a 	bl	8003108 <HAL_RNG_MspInit>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80016b4:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 80016b6:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80016b8:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_BUSY;
 80016ba:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 80016bc:	6813      	ldr	r3, [r2, #0]
 80016be:	f043 0304 	orr.w	r3, r3, #4
 80016c2:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 80016c4:	2301      	movs	r3, #1
 80016c6:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80016c8:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
 80016ca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80016cc:	2001      	movs	r0, #1
}
 80016ce:	bd10      	pop	{r4, pc}

080016d0 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80016d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 80016d2:	7903      	ldrb	r3, [r0, #4]
{
 80016d4:	4604      	mov	r4, r0
 80016d6:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d025      	beq.n	8001728 <HAL_RNG_GenerateRandomNumber+0x58>
 80016dc:	2001      	movs	r0, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 80016de:	7963      	ldrb	r3, [r4, #5]
 80016e0:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 80016e2:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 80016e4:	d11d      	bne.n	8001722 <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 80016e6:	2302      	movs	r3, #2
 80016e8:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016ea:	f7fe ff55 	bl	8000598 <HAL_GetTick>
 80016ee:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80016f0:	6822      	ldr	r2, [r4, #0]
 80016f2:	6855      	ldr	r5, [r2, #4]
 80016f4:	f015 0501 	ands.w	r5, r5, #1
 80016f8:	d008      	beq.n	800170c <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80016fa:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80016fc:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80016fe:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 8001700:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8001702:	2301      	movs	r3, #1
 8001704:	7163      	strb	r3, [r4, #5]
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8001706:	2300      	movs	r3, #0
 8001708:	7123      	strb	r3, [r4, #4]
 800170a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800170c:	f7fe ff44 	bl	8000598 <HAL_GetTick>
 8001710:	1bc0      	subs	r0, r0, r7
 8001712:	2802      	cmp	r0, #2
 8001714:	d9ec      	bls.n	80016f0 <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 8001716:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8001718:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 800171a:	7125      	strb	r5, [r4, #4]
        hrng->State = HAL_RNG_STATE_READY;
 800171c:	7160      	strb	r0, [r4, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800171e:	60a3      	str	r3, [r4, #8]
 8001720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8001722:	2304      	movs	r3, #4
 8001724:	60a3      	str	r3, [r4, #8]
 8001726:	e7ee      	b.n	8001706 <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 8001728:	2002      	movs	r0, #2

  return status;
}
 800172a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800172c <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 800172c:	b510      	push	{r4, lr}
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 800172e:	f100 010c 	add.w	r1, r0, #12
{
 8001732:	4604      	mov	r4, r0
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8001734:	f7ff ffcc 	bl	80016d0 <HAL_RNG_GenerateRandomNumber>
 8001738:	b908      	cbnz	r0, 800173e <HAL_RNG_GetRandomNumber+0x12>
  {
    return hrng->RandomNumber;
 800173a:	68e0      	ldr	r0, [r4, #12]
 800173c:	bd10      	pop	{r4, pc}
  }
  else
  {
    return 0U;
 800173e:	2000      	movs	r0, #0
  }
}
 8001740:	bd10      	pop	{r4, pc}

08001742 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8001742:	b538      	push	{r3, r4, r5, lr}
 8001744:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8001746:	4604      	mov	r4, r0
 8001748:	b1c8      	cbz	r0, 800177e <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800174a:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800174e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001752:	b91b      	cbnz	r3, 800175c <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8001754:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8001758:	f001 fd22 	bl	80031a0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800175c:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800175e:	1d21      	adds	r1, r4, #4
 8001760:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001762:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8001766:	f000 f835 	bl	80017d4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800176a:	6862      	ldr	r2, [r4, #4]
 800176c:	4629      	mov	r1, r5
 800176e:	6820      	ldr	r0, [r4, #0]
 8001770:	f000 f86f 	bl	8001852 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001774:	2301      	movs	r3, #1
  
  return HAL_OK;
 8001776:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8001778:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 800177c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800177e:	2001      	movs	r0, #1
}
 8001780:	bd38      	pop	{r3, r4, r5, pc}

08001782 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8001782:	b538      	push	{r3, r4, r5, lr}
 8001784:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8001786:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 800178a:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800178c:	b2c0      	uxtb	r0, r0
 800178e:	2802      	cmp	r0, #2
 8001790:	d00d      	beq.n	80017ae <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001792:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8001794:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8001796:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800179a:	f000 f8a2 	bl	80018e2 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800179e:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 80017a0:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80017a2:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80017a4:	bf0c      	ite	eq
 80017a6:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 80017a8:	2301      	movne	r3, #1
 80017aa:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80017ae:	bd38      	pop	{r3, r4, r5, pc}

080017b0 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80017b0:	b510      	push	{r4, lr}
 80017b2:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80017b4:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80017b8:	b2c0      	uxtb	r0, r0
 80017ba:	2802      	cmp	r0, #2
 80017bc:	d009      	beq.n	80017d2 <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80017be:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80017c0:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80017c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80017c6:	f000 f89f 	bl	8001908 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80017ca:	2301      	movs	r3, #1
  
  return HAL_OK;   
 80017cc:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 80017ce:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 80017d2:	bd10      	pop	{r4, pc}

080017d4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80017d4:	680b      	ldr	r3, [r1, #0]
 80017d6:	684a      	ldr	r2, [r1, #4]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80017de:	6803      	ldr	r3, [r0, #0]
{
 80017e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80017e4:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80017e8:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80017ec:	694d      	ldr	r5, [r1, #20]
 80017ee:	698c      	ldr	r4, [r1, #24]
 80017f0:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80017f4:	6a0f      	ldr	r7, [r1, #32]
 80017f6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80017f8:	d014      	beq.n	8001824 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80017fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80017fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001802:	431a      	orrs	r2, r3
 8001804:	ea42 0209 	orr.w	r2, r2, r9
 8001808:	ea42 0208 	orr.w	r2, r2, r8
 800180c:	ea42 030c 	orr.w	r3, r2, ip
 8001810:	432b      	orrs	r3, r5
 8001812:	4323      	orrs	r3, r4
 8001814:	ea43 030e 	orr.w	r3, r3, lr
 8001818:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800181a:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800181c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800181e:	2000      	movs	r0, #0
 8001820:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8001824:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8001826:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800182a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800182e:	ea43 030e 	orr.w	r3, r3, lr
 8001832:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8001836:	433b      	orrs	r3, r7
 8001838:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800183a:	431e      	orrs	r6, r3
 800183c:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8001840:	6006      	str	r6, [r0, #0]
 8001842:	ea42 0208 	orr.w	r2, r2, r8
 8001846:	ea42 030c 	orr.w	r3, r2, ip
 800184a:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800184c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800184e:	6043      	str	r3, [r0, #4]
 8001850:	e7e5      	b.n	800181e <FMC_SDRAM_Init+0x4a>

08001852 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8001852:	2a01      	cmp	r2, #1
 8001854:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	e891 4008 	ldmia.w	r1, {r3, lr}
 800185e:	688f      	ldr	r7, [r1, #8]
 8001860:	690d      	ldr	r5, [r1, #16]
 8001862:	694e      	ldr	r6, [r1, #20]
 8001864:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8001866:	d01b      	beq.n	80018a0 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8001868:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800186a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800186e:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8001870:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8001874:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8001878:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 800187a:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 800187c:	3901      	subs	r1, #1
 800187e:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8001882:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 8001884:	1e7b      	subs	r3, r7, #1
 8001886:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800188a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 800188e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8001892:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 8001896:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800189a:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800189c:	2000      	movs	r0, #0
 800189e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80018a0:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80018a2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80018a6:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80018a8:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80018aa:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80018ae:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80018b2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 80018b6:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80018b8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 80018bc:	3901      	subs	r1, #1
 80018be:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80018c2:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 80018c6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80018c8:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80018ca:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 80018ce:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80018d2:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80018d4:	6086      	str	r6, [r0, #8]
 80018d6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80018da:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80018de:	60c3      	str	r3, [r0, #12]
 80018e0:	e7dc      	b.n	800189c <FMC_SDRAM_Timing_Init+0x4a>

080018e2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80018e2:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 80018e6:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80018e8:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 80018ea:	68ca      	ldr	r2, [r1, #12]
{
 80018ec:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 80018ee:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80018f0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80018f4:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 80018f6:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 80018f8:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80018fa:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80018fe:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8001900:	9b01      	ldr	r3, [sp, #4]
 8001902:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8001904:	b002      	add	sp, #8
 8001906:	bd10      	pop	{r4, pc}

08001908 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8001908:	6943      	ldr	r3, [r0, #20]
 800190a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800190e:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8001910:	2000      	movs	r0, #0
 8001912:	4770      	bx	lr

08001914 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8001914:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8001916:	3b01      	subs	r3, #1
 8001918:	d101      	bne.n	800191e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800191a:	2003      	movs	r0, #3
 800191c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800191e:	6902      	ldr	r2, [r0, #16]
 8001920:	2a00      	cmp	r2, #0
 8001922:	daf8      	bge.n	8001916 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8001924:	6903      	ldr	r3, [r0, #16]
 8001926:	4a06      	ldr	r2, [pc, #24]	; (8001940 <USB_CoreReset+0x2c>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800192e:	3a01      	subs	r2, #1
 8001930:	d0f3      	beq.n	800191a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8001932:	6903      	ldr	r3, [r0, #16]
 8001934:	f013 0301 	ands.w	r3, r3, #1
 8001938:	d1f9      	bne.n	800192e <USB_CoreReset+0x1a>

  return HAL_OK;
 800193a:	4618      	mov	r0, r3
}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	00030d41 	.word	0x00030d41

08001944 <USB_CoreInit>:
{
 8001944:	b084      	sub	sp, #16
 8001946:	b538      	push	{r3, r4, r5, lr}
 8001948:	ad05      	add	r5, sp, #20
 800194a:	4604      	mov	r4, r0
 800194c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8001950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001952:	2b01      	cmp	r3, #1
 8001954:	d126      	bne.n	80019a4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8001956:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800195e:	68c3      	ldr	r3, [r0, #12]
 8001960:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8001964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001968:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800196a:	68c3      	ldr	r3, [r0, #12]
 800196c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8001970:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8001972:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001974:	2b01      	cmp	r3, #1
 8001976:	d103      	bne.n	8001980 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8001978:	68c3      	ldr	r3, [r0, #12]
 800197a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800197e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8001980:	4620      	mov	r0, r4
 8001982:	f7ff ffc7 	bl	8001914 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 8001986:	9b08      	ldr	r3, [sp, #32]
 8001988:	2b01      	cmp	r3, #1
 800198a:	d107      	bne.n	800199c <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800198c:	68a3      	ldr	r3, [r4, #8]
 800198e:	f043 0306 	orr.w	r3, r3, #6
 8001992:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8001994:	68a3      	ldr	r3, [r4, #8]
 8001996:	f043 0320 	orr.w	r3, r3, #32
 800199a:	60a3      	str	r3, [r4, #8]
}
 800199c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80019a0:	b004      	add	sp, #16
 80019a2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80019a4:	68c3      	ldr	r3, [r0, #12]
 80019a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019aa:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80019ac:	f7ff ffb2 	bl	8001914 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80019b0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	63a3      	str	r3, [r4, #56]	; 0x38
 80019b8:	e7e5      	b.n	8001986 <USB_CoreInit+0x42>

080019ba <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80019ba:	6883      	ldr	r3, [r0, #8]
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6083      	str	r3, [r0, #8]
}
 80019c2:	2000      	movs	r0, #0
 80019c4:	4770      	bx	lr

080019c6 <USB_SetCurrentMode>:
{
 80019c6:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80019c8:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80019ca:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80019cc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80019d0:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80019d2:	d108      	bne.n	80019e6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80019d4:	68c3      	ldr	r3, [r0, #12]
 80019d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80019da:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 80019dc:	2032      	movs	r0, #50	; 0x32
 80019de:	f7fe fde1 	bl	80005a4 <HAL_Delay>
  return HAL_OK;
 80019e2:	2000      	movs	r0, #0
 80019e4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 80019e6:	b919      	cbnz	r1, 80019f0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80019e8:	68c3      	ldr	r3, [r0, #12]
 80019ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80019ee:	e7f4      	b.n	80019da <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 80019f0:	2001      	movs	r0, #1
}
 80019f2:	bd08      	pop	{r3, pc}

080019f4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80019f4:	0189      	lsls	r1, r1, #6
 80019f6:	4a07      	ldr	r2, [pc, #28]	; (8001a14 <USB_FlushTxFifo+0x20>)
 80019f8:	f041 0120 	orr.w	r1, r1, #32
 80019fc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 80019fe:	3a01      	subs	r2, #1
 8001a00:	d005      	beq.n	8001a0e <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8001a02:	6903      	ldr	r3, [r0, #16]
 8001a04:	f013 0320 	ands.w	r3, r3, #32
 8001a08:	d1f9      	bne.n	80019fe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a0e:	2003      	movs	r0, #3
}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	00030d41 	.word	0x00030d41

08001a18 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8001a18:	2310      	movs	r3, #16
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <USB_FlushRxFifo+0x1c>)
 8001a1c:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8001a1e:	3a01      	subs	r2, #1
 8001a20:	d005      	beq.n	8001a2e <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8001a22:	6903      	ldr	r3, [r0, #16]
 8001a24:	f013 0310 	ands.w	r3, r3, #16
 8001a28:	d1f9      	bne.n	8001a1e <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4770      	bx	lr
      return HAL_TIMEOUT;
 8001a2e:	2003      	movs	r0, #3
}
 8001a30:	4770      	bx	lr
 8001a32:	bf00      	nop
 8001a34:	00030d41 	.word	0x00030d41

08001a38 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8001a38:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8001a3e:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8001a42:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8001a44:	9b01      	ldr	r3, [sp, #4]
 8001a46:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8001a4a:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8001a4c:	9b01      	ldr	r3, [sp, #4]
 8001a4e:	04da      	lsls	r2, r3, #19
 8001a50:	d406      	bmi.n	8001a60 <USB_DriveVbus+0x28>
 8001a52:	2901      	cmp	r1, #1
 8001a54:	d104      	bne.n	8001a60 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a5c:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8001a60:	9b01      	ldr	r3, [sp, #4]
 8001a62:	04db      	lsls	r3, r3, #19
 8001a64:	d505      	bpl.n	8001a72 <USB_DriveVbus+0x3a>
 8001a66:	b921      	cbnz	r1, 8001a72 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8001a68:	9b01      	ldr	r3, [sp, #4]
 8001a6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a6e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8001a72:	2000      	movs	r0, #0
 8001a74:	b002      	add	sp, #8
 8001a76:	4770      	bx	lr

08001a78 <USB_HostInit>:
{
 8001a78:	b084      	sub	sp, #16
 8001a7a:	b538      	push	{r3, r4, r5, lr}
 8001a7c:	4604      	mov	r4, r0
 8001a7e:	a805      	add	r0, sp, #20
 8001a80:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 8001a84:	2300      	movs	r3, #0
 8001a86:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8001a8a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a8c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a90:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001a92:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a94:	05da      	lsls	r2, r3, #23
 8001a96:	d53f      	bpl.n	8001b18 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
 8001a98:	9b07      	ldr	r3, [sp, #28]
 8001a9a:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001a9c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8001aa0:	d13c      	bne.n	8001b1c <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8001aa2:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001aa6:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8001aaa:	2110      	movs	r1, #16
 8001aac:	4620      	mov	r0, r4
 8001aae:	f7ff ffa1 	bl	80019f4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	f7ff ffb0 	bl	8001a18 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9906      	ldr	r1, [sp, #24]
 8001abc:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 8001ac4:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 8001ac6:	428b      	cmp	r3, r1
 8001ac8:	d12b      	bne.n	8001b22 <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 8001aca:	2101      	movs	r1, #1
 8001acc:	4620      	mov	r0, r4
 8001ace:	f7ff ffb3 	bl	8001a38 <USB_DriveVbus>
  HAL_Delay(200U);
 8001ad2:	20c8      	movs	r0, #200	; 0xc8
 8001ad4:	f7fe fd66 	bl	80005a4 <HAL_Delay>
  USBx->GINTMSK = 0U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8001adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ae0:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 8001ae2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ae4:	05db      	lsls	r3, r3, #23
 8001ae6:	d521      	bpl.n	8001b2c <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 8001ae8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001aec:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8001aee:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 8001af2:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8001af4:	4b11      	ldr	r3, [pc, #68]	; (8001b3c <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001af6:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 8001afa:	9b08      	ldr	r3, [sp, #32]
 8001afc:	b91b      	cbnz	r3, 8001b06 <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8001afe:	69a3      	ldr	r3, [r4, #24]
 8001b00:	f043 0310 	orr.w	r3, r3, #16
 8001b04:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8001b06:	69a2      	ldr	r2, [r4, #24]
}
 8001b08:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	; (8001b40 <USB_HostInit+0xc8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	61a3      	str	r3, [r4, #24]
}
 8001b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001b14:	b004      	add	sp, #16
 8001b16:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8001b18:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8001b1c:	f023 0304 	bic.w	r3, r3, #4
 8001b20:	e7c1      	b.n	8001aa6 <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8001b22:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8001b24:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8001b26:	60d5      	str	r5, [r2, #12]
 8001b28:	3220      	adds	r2, #32
 8001b2a:	e7cc      	b.n	8001ac6 <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8001b30:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8001b34:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8001b36:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <USB_HostInit+0xcc>)
 8001b38:	e7dd      	b.n	8001af6 <USB_HostInit+0x7e>
 8001b3a:	bf00      	nop
 8001b3c:	00e00300 	.word	0x00e00300
 8001b40:	a3200008 	.word	0xa3200008
 8001b44:	004000e0 	.word	0x004000e0

08001b48 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <FATFS_LinkDriverEx+0x40>)
{
 8001b4a:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8001b4c:	7a5d      	ldrb	r5, [r3, #9]
 8001b4e:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 8001b52:	b9b5      	cbnz	r5, 8001b82 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8001b54:	7a5d      	ldrb	r5, [r3, #9]
 8001b56:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8001b58:	7a5d      	ldrb	r5, [r3, #9]
 8001b5a:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8001b5e:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 8001b60:	7a58      	ldrb	r0, [r3, #9]
 8001b62:	4418      	add	r0, r3
 8001b64:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8001b66:	7a5a      	ldrb	r2, [r3, #9]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8001b6c:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 8001b6e:	b2c0      	uxtb	r0, r0
 8001b70:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 8001b72:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8001b74:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 8001b76:	4620      	mov	r0, r4
    path[1] = ':';
 8001b78:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 8001b7a:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 8001b7c:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 8001b7e:	708b      	strb	r3, [r1, #2]
 8001b80:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8001b82:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 8001b84:	bd30      	pop	{r4, r5, pc}
 8001b86:	bf00      	nop
 8001b88:	20000044 	.word	0x20000044

08001b8c <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f7ff bfdb 	b.w	8001b48 <FATFS_LinkDriverEx>

08001b92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b92:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001b94:	f000 fd1a 	bl	80025cc <vTaskStartScheduler>
  
  return osOK;
}
 8001b98:	2000      	movs	r0, #0
 8001b9a:	bd08      	pop	{r3, pc}

08001b9c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b9c:	b570      	push	{r4, r5, r6, lr}
 8001b9e:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001ba0:	6946      	ldr	r6, [r0, #20]
{
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	6840      	ldr	r0, [r0, #4]
 8001ba8:	6829      	ldr	r1, [r5, #0]
 8001baa:	692a      	ldr	r2, [r5, #16]
 8001bac:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001bb0:	b176      	cbz	r6, 8001bd0 <osThreadCreate+0x34>
 8001bb2:	69ad      	ldr	r5, [r5, #24]
 8001bb4:	b165      	cbz	r5, 8001bd0 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001bb6:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bb8:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 8001bba:	bf14      	ite	ne
 8001bbc:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bbe:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc0:	e88d 0050 	stmia.w	sp, {r4, r6}
 8001bc4:	f000 fc33 	bl	800242e <xTaskCreateStatic>
 8001bc8:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001bca:	9805      	ldr	r0, [sp, #20]
}
 8001bcc:	b006      	add	sp, #24
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001bd0:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bd2:	ad05      	add	r5, sp, #20
 8001bd4:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 8001bd6:	bf14      	ite	ne
 8001bd8:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bda:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bdc:	e88d 0030 	stmia.w	sp, {r4, r5}
 8001be0:	f000 fc5a 	bl	8002498 <xTaskCreate>
 8001be4:	2801      	cmp	r0, #1
 8001be6:	d0f0      	beq.n	8001bca <osThreadCreate+0x2e>
      return NULL;
 8001be8:	2000      	movs	r0, #0
 8001bea:	e7ef      	b.n	8001bcc <osThreadCreate+0x30>

08001bec <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001bec:	2800      	cmp	r0, #0
 8001bee:	bf08      	it	eq
 8001bf0:	2001      	moveq	r0, #1
{
 8001bf2:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001bf4:	f000 fe38 	bl	8002868 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001bf8:	2000      	movs	r0, #0
 8001bfa:	bd08      	pop	{r3, pc}

08001bfc <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bfc:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c04:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c06:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c08:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c0a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c0c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c0e:	6003      	str	r3, [r0, #0]
 8001c10:	4770      	bx	lr

08001c12 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	6103      	str	r3, [r0, #16]
 8001c16:	4770      	bx	lr

08001c18 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c18:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c1a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001c1c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c1e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c20:	689a      	ldr	r2, [r3, #8]
 8001c22:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c24:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001c26:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8001c28:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	6003      	str	r3, [r0, #0]
 8001c2e:	4770      	bx	lr

08001c30 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c30:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c32:	1c53      	adds	r3, r2, #1
{
 8001c34:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8001c36:	d10a      	bne.n	8001c4e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c38:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c3a:	685a      	ldr	r2, [r3, #4]
 8001c3c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c3e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c40:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c42:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8001c44:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8001c46:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001c48:	3301      	adds	r3, #1
 8001c4a:	6003      	str	r3, [r0, #0]
 8001c4c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c4e:	f100 0308 	add.w	r3, r0, #8
 8001c52:	685c      	ldr	r4, [r3, #4]
 8001c54:	6825      	ldr	r5, [r4, #0]
 8001c56:	42aa      	cmp	r2, r5
 8001c58:	d3ef      	bcc.n	8001c3a <vListInsert+0xa>
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	e7f9      	b.n	8001c52 <vListInsert+0x22>

08001c5e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c5e:	6841      	ldr	r1, [r0, #4]
 8001c60:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c62:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c64:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c66:	6882      	ldr	r2, [r0, #8]
 8001c68:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c6e:	bf08      	it	eq
 8001c70:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c72:	2200      	movs	r2, #0
 8001c74:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	3a01      	subs	r2, #1
 8001c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c7c:	6818      	ldr	r0, [r3, #0]
}
 8001c7e:	4770      	bx	lr

08001c80 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8001c80:	2300      	movs	r3, #0
{
 8001c82:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8001c84:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8001c86:	4b0f      	ldr	r3, [pc, #60]	; (8001cc4 <prvTaskExitError+0x44>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	d00a      	beq.n	8001ca4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	b672      	cpsid	i
 8001c94:	f383 8811 	msr	BASEPRI, r3
 8001c98:	f3bf 8f6f 	isb	sy
 8001c9c:	f3bf 8f4f 	dsb	sy
 8001ca0:	b662      	cpsie	i
 8001ca2:	e7fe      	b.n	8001ca2 <prvTaskExitError+0x22>
 8001ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ca8:	b672      	cpsid	i
 8001caa:	f383 8811 	msr	BASEPRI, r3
 8001cae:	f3bf 8f6f 	isb	sy
 8001cb2:	f3bf 8f4f 	dsb	sy
 8001cb6:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001cb8:	9b01      	ldr	r3, [sp, #4]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0fc      	beq.n	8001cb8 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8001cbe:	b002      	add	sp, #8
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000008 	.word	0x20000008

08001cc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001cc8:	4808      	ldr	r0, [pc, #32]	; (8001cec <prvPortStartFirstTask+0x24>)
 8001cca:	6800      	ldr	r0, [r0, #0]
 8001ccc:	6800      	ldr	r0, [r0, #0]
 8001cce:	f380 8808 	msr	MSP, r0
 8001cd2:	f04f 0000 	mov.w	r0, #0
 8001cd6:	f380 8814 	msr	CONTROL, r0
 8001cda:	b662      	cpsie	i
 8001cdc:	b661      	cpsie	f
 8001cde:	f3bf 8f4f 	dsb	sy
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	df00      	svc	0
 8001ce8:	bf00      	nop
 8001cea:	0000      	.short	0x0000
 8001cec:	e000ed08 	.word	0xe000ed08

08001cf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8001cf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001d00 <vPortEnableVFP+0x10>
 8001cf4:	6801      	ldr	r1, [r0, #0]
 8001cf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001cfa:	6001      	str	r1, [r0, #0]
 8001cfc:	4770      	bx	lr
 8001cfe:	0000      	.short	0x0000
 8001d00:	e000ed88 	.word	0xe000ed88

08001d04 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d04:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d08:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001d0c:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8001d10:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001d12:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001d16:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001d18:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001d1a:	f06f 0302 	mvn.w	r3, #2
 8001d1e:	6203      	str	r3, [r0, #32]
}
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	08001c81 	.word	0x08001c81
	...

08001d30 <SVC_Handler>:
	__asm volatile (
 8001d30:	4b07      	ldr	r3, [pc, #28]	; (8001d50 <pxCurrentTCBConst2>)
 8001d32:	6819      	ldr	r1, [r3, #0]
 8001d34:	6808      	ldr	r0, [r1, #0]
 8001d36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d3a:	f380 8809 	msr	PSP, r0
 8001d3e:	f3bf 8f6f 	isb	sy
 8001d42:	f04f 0000 	mov.w	r0, #0
 8001d46:	f380 8811 	msr	BASEPRI, r0
 8001d4a:	4770      	bx	lr
 8001d4c:	f3af 8000 	nop.w

08001d50 <pxCurrentTCBConst2>:
 8001d50:	20003c70 	.word	0x20003c70

08001d54 <vPortEnterCritical>:
 8001d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d58:	b672      	cpsid	i
 8001d5a:	f383 8811 	msr	BASEPRI, r3
 8001d5e:	f3bf 8f6f 	isb	sy
 8001d62:	f3bf 8f4f 	dsb	sy
 8001d66:	b662      	cpsie	i
	uxCriticalNesting++;
 8001d68:	4a0b      	ldr	r2, [pc, #44]	; (8001d98 <vPortEnterCritical+0x44>)
 8001d6a:	6813      	ldr	r3, [r2, #0]
 8001d6c:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 8001d6e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8001d70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8001d72:	d10f      	bne.n	8001d94 <vPortEnterCritical+0x40>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001d74:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <vPortEnterCritical+0x48>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f013 0fff 	tst.w	r3, #255	; 0xff
 8001d7c:	d00a      	beq.n	8001d94 <vPortEnterCritical+0x40>
 8001d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d82:	b672      	cpsid	i
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	b662      	cpsie	i
 8001d92:	e7fe      	b.n	8001d92 <vPortEnterCritical+0x3e>
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	20000008 	.word	0x20000008
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 8001da0:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <vPortExitCritical+0x28>)
 8001da2:	6813      	ldr	r3, [r2, #0]
 8001da4:	b953      	cbnz	r3, 8001dbc <vPortExitCritical+0x1c>
 8001da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001daa:	b672      	cpsid	i
 8001dac:	f383 8811 	msr	BASEPRI, r3
 8001db0:	f3bf 8f6f 	isb	sy
 8001db4:	f3bf 8f4f 	dsb	sy
 8001db8:	b662      	cpsie	i
 8001dba:	e7fe      	b.n	8001dba <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001dc0:	b90b      	cbnz	r3, 8001dc6 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001dc2:	f383 8811 	msr	BASEPRI, r3
 8001dc6:	4770      	bx	lr
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	00000000 	.word	0x00000000

08001dd0 <PendSV_Handler>:
	__asm volatile
 8001dd0:	f3ef 8009 	mrs	r0, PSP
 8001dd4:	f3bf 8f6f 	isb	sy
 8001dd8:	4b15      	ldr	r3, [pc, #84]	; (8001e30 <pxCurrentTCBConst>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f01e 0f10 	tst.w	lr, #16
 8001de0:	bf08      	it	eq
 8001de2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001de6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001dea:	6010      	str	r0, [r2, #0]
 8001dec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001df0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001df4:	b672      	cpsid	i
 8001df6:	f380 8811 	msr	BASEPRI, r0
 8001dfa:	f3bf 8f4f 	dsb	sy
 8001dfe:	f3bf 8f6f 	isb	sy
 8001e02:	b662      	cpsie	i
 8001e04:	f000 fd56 	bl	80028b4 <vTaskSwitchContext>
 8001e08:	f04f 0000 	mov.w	r0, #0
 8001e0c:	f380 8811 	msr	BASEPRI, r0
 8001e10:	bc09      	pop	{r0, r3}
 8001e12:	6819      	ldr	r1, [r3, #0]
 8001e14:	6808      	ldr	r0, [r1, #0]
 8001e16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e1a:	f01e 0f10 	tst.w	lr, #16
 8001e1e:	bf08      	it	eq
 8001e20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001e24:	f380 8809 	msr	PSP, r0
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop

08001e30 <pxCurrentTCBConst>:
 8001e30:	20003c70 	.word	0x20003c70

08001e34 <xPortSysTickHandler>:
{
 8001e34:	b508      	push	{r3, lr}
	__asm volatile
 8001e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e3a:	b672      	cpsid	i
 8001e3c:	f383 8811 	msr	BASEPRI, r3
 8001e40:	f3bf 8f6f 	isb	sy
 8001e44:	f3bf 8f4f 	dsb	sy
 8001e48:	b662      	cpsie	i
		if( xTaskIncrementTick() != pdFALSE )
 8001e4a:	f000 fbff 	bl	800264c <xTaskIncrementTick>
 8001e4e:	b118      	cbz	r0, 8001e58 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e54:	4b02      	ldr	r3, [pc, #8]	; (8001e60 <xPortSysTickHandler+0x2c>)
 8001e56:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001e58:	2300      	movs	r3, #0
 8001e5a:	f383 8811 	msr	BASEPRI, r3
 8001e5e:	bd08      	pop	{r3, pc}
 8001e60:	e000ed04 	.word	0xe000ed04

08001e64 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	4a08      	ldr	r2, [pc, #32]	; (8001e88 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e68:	4908      	ldr	r1, [pc, #32]	; (8001e8c <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001e6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001e6c:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001e6e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <vPortSetupTimerInterrupt+0x2c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7a:	4906      	ldr	r1, [pc, #24]	; (8001e94 <vPortSetupTimerInterrupt+0x30>)
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001e80:	2307      	movs	r3, #7
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4770      	bx	lr
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010
 8001e8c:	e000e018 	.word	0xe000e018
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	e000e014 	.word	0xe000e014

08001e98 <xPortStartScheduler>:
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e98:	4b2c      	ldr	r3, [pc, #176]	; (8001f4c <xPortStartScheduler+0xb4>)
{
 8001e9a:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001e9c:	781a      	ldrb	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001e9e:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001ea4:	22ff      	movs	r2, #255	; 0xff
 8001ea6:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001ea8:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001eaa:	4a29      	ldr	r2, [pc, #164]	; (8001f50 <xPortStartScheduler+0xb8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001eb2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001eb6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001eba:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001ebc:	2207      	movs	r2, #7
 8001ebe:	4b25      	ldr	r3, [pc, #148]	; (8001f54 <xPortStartScheduler+0xbc>)
 8001ec0:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001ec2:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001ec6:	1e54      	subs	r4, r2, #1
 8001ec8:	0600      	lsls	r0, r0, #24
 8001eca:	d40f      	bmi.n	8001eec <xPortStartScheduler+0x54>
 8001ecc:	b101      	cbz	r1, 8001ed0 <xPortStartScheduler+0x38>
 8001ece:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	2a03      	cmp	r2, #3
 8001ed4:	d013      	beq.n	8001efe <xPortStartScheduler+0x66>
	__asm volatile
 8001ed6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001eda:	b672      	cpsid	i
 8001edc:	f383 8811 	msr	BASEPRI, r3
 8001ee0:	f3bf 8f6f 	isb	sy
 8001ee4:	f3bf 8f4f 	dsb	sy
 8001ee8:	b662      	cpsie	i
 8001eea:	e7fe      	b.n	8001eea <xPortStartScheduler+0x52>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001eec:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	0052      	lsls	r2, r2, #1
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	f88d 2003 	strb.w	r2, [sp, #3]
 8001efa:	4622      	mov	r2, r4
 8001efc:	e7e1      	b.n	8001ec2 <xPortStartScheduler+0x2a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001efe:	0212      	lsls	r2, r2, #8
	uxCriticalNesting = 0;
 8001f00:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001f02:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001f06:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001f08:	9b01      	ldr	r3, [sp, #4]
 8001f0a:	4a10      	ldr	r2, [pc, #64]	; (8001f4c <xPortStartScheduler+0xb4>)
 8001f0c:	b2db      	uxtb	r3, r3
 8001f0e:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001f10:	4b11      	ldr	r3, [pc, #68]	; (8001f58 <xPortStartScheduler+0xc0>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001f18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001f20:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001f22:	f7ff ff9f 	bl	8001e64 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001f26:	4b0d      	ldr	r3, [pc, #52]	; (8001f5c <xPortStartScheduler+0xc4>)
 8001f28:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001f2a:	f7ff fee1 	bl	8001cf0 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001f2e:	4a0c      	ldr	r2, [pc, #48]	; (8001f60 <xPortStartScheduler+0xc8>)
 8001f30:	6813      	ldr	r3, [r2, #0]
 8001f32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001f36:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001f38:	f7ff fec6 	bl	8001cc8 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001f3c:	f000 fcba 	bl	80028b4 <vTaskSwitchContext>
	prvTaskExitError();
 8001f40:	f7ff fe9e 	bl	8001c80 <prvTaskExitError>
}
 8001f44:	4620      	mov	r0, r4
 8001f46:	b002      	add	sp, #8
 8001f48:	bd10      	pop	{r4, pc}
 8001f4a:	bf00      	nop
 8001f4c:	e000e400 	.word	0xe000e400
 8001f50:	20000050 	.word	0x20000050
 8001f54:	20000054 	.word	0x20000054
 8001f58:	e000ed20 	.word	0xe000ed20
 8001f5c:	20000008 	.word	0x20000008
 8001f60:	e000ef34 	.word	0xe000ef34

08001f64 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <prvInsertBlockIntoFreeList+0x40>)
{
 8001f66:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	4282      	cmp	r2, r0
 8001f6c:	d318      	bcc.n	8001fa0 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001f6e:	685c      	ldr	r4, [r3, #4]
 8001f70:	1919      	adds	r1, r3, r4
 8001f72:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001f74:	bf01      	itttt	eq
 8001f76:	6841      	ldreq	r1, [r0, #4]
 8001f78:	4618      	moveq	r0, r3
 8001f7a:	1909      	addeq	r1, r1, r4
 8001f7c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001f7e:	6844      	ldr	r4, [r0, #4]
 8001f80:	1901      	adds	r1, r0, r4
 8001f82:	428a      	cmp	r2, r1
 8001f84:	d107      	bne.n	8001f96 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001f86:	4908      	ldr	r1, [pc, #32]	; (8001fa8 <prvInsertBlockIntoFreeList+0x44>)
 8001f88:	6809      	ldr	r1, [r1, #0]
 8001f8a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f8c:	bf1f      	itttt	ne
 8001f8e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001f90:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001f92:	1909      	addne	r1, r1, r4
 8001f94:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001f96:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001f98:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001f9a:	bf18      	it	ne
 8001f9c:	6018      	strne	r0, [r3, #0]
 8001f9e:	bd10      	pop	{r4, pc}
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	e7e1      	b.n	8001f68 <prvInsertBlockIntoFreeList+0x4>
 8001fa4:	20003c68 	.word	0x20003c68
 8001fa8:	20000058 	.word	0x20000058

08001fac <pvPortMalloc>:
{
 8001fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fb0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001fb2:	f000 fb43 	bl	800263c <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001fb6:	4940      	ldr	r1, [pc, #256]	; (80020b8 <pvPortMalloc+0x10c>)
 8001fb8:	4d40      	ldr	r5, [pc, #256]	; (80020bc <pvPortMalloc+0x110>)
 8001fba:	680b      	ldr	r3, [r1, #0]
 8001fbc:	bb0b      	cbnz	r3, 8002002 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001fbe:	4a40      	ldr	r2, [pc, #256]	; (80020c0 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001fc0:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001fc2:	4e40      	ldr	r6, [pc, #256]	; (80020c4 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001fc4:	bf1b      	ittet	ne
 8001fc6:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001fc8:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001fcc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fd0:	f020 0007 	bicne.w	r0, r0, #7
 8001fd4:	bf1c      	itt	ne
 8001fd6:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001fd8:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 8001fda:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001fdc:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001fde:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001fe0:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8001fe2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001fe4:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 8001fe8:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 8001fea:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001fec:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8001fee:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ff0:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ff2:	4b35      	ldr	r3, [pc, #212]	; (80020c8 <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001ff4:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ff6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ff8:	4b34      	ldr	r3, [pc, #208]	; (80020cc <pvPortMalloc+0x120>)
 8001ffa:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002000:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002002:	682f      	ldr	r7, [r5, #0]
 8002004:	4227      	tst	r7, r4
 8002006:	d116      	bne.n	8002036 <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8002008:	2c00      	cmp	r4, #0
 800200a:	d042      	beq.n	8002092 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800200c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002010:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002012:	bf1c      	itt	ne
 8002014:	f023 0307 	bicne.w	r3, r3, #7
 8002018:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800201a:	b163      	cbz	r3, 8002036 <pvPortMalloc+0x8a>
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <pvPortMalloc+0x120>)
 800201e:	6816      	ldr	r6, [r2, #0]
 8002020:	4690      	mov	r8, r2
 8002022:	42b3      	cmp	r3, r6
 8002024:	d807      	bhi.n	8002036 <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8002026:	4a27      	ldr	r2, [pc, #156]	; (80020c4 <pvPortMalloc+0x118>)
 8002028:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800202a:	6868      	ldr	r0, [r5, #4]
 800202c:	4283      	cmp	r3, r0
 800202e:	d804      	bhi.n	800203a <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8002030:	6809      	ldr	r1, [r1, #0]
 8002032:	428d      	cmp	r5, r1
 8002034:	d107      	bne.n	8002046 <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8002036:	2400      	movs	r4, #0
 8002038:	e02b      	b.n	8002092 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800203a:	682c      	ldr	r4, [r5, #0]
 800203c:	2c00      	cmp	r4, #0
 800203e:	d0f7      	beq.n	8002030 <pvPortMalloc+0x84>
 8002040:	462a      	mov	r2, r5
 8002042:	4625      	mov	r5, r4
 8002044:	e7f1      	b.n	800202a <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002046:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002048:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800204a:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800204c:	1ac2      	subs	r2, r0, r3
 800204e:	2a10      	cmp	r2, #16
 8002050:	d911      	bls.n	8002076 <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002052:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002054:	0741      	lsls	r1, r0, #29
 8002056:	d00a      	beq.n	800206e <pvPortMalloc+0xc2>
 8002058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800205c:	b672      	cpsid	i
 800205e:	f383 8811 	msr	BASEPRI, r3
 8002062:	f3bf 8f6f 	isb	sy
 8002066:	f3bf 8f4f 	dsb	sy
 800206a:	b662      	cpsie	i
 800206c:	e7fe      	b.n	800206c <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800206e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002070:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002072:	f7ff ff77 	bl	8001f64 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002076:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002078:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800207a:	4913      	ldr	r1, [pc, #76]	; (80020c8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800207c:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800207e:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002080:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 8002082:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002084:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002088:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800208a:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800208c:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800208e:	bf38      	it	cc
 8002090:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 8002092:	f000 fb6f 	bl	8002774 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002096:	0763      	lsls	r3, r4, #29
 8002098:	d00a      	beq.n	80020b0 <pvPortMalloc+0x104>
 800209a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800209e:	b672      	cpsid	i
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	b662      	cpsie	i
 80020ae:	e7fe      	b.n	80020ae <pvPortMalloc+0x102>
}
 80020b0:	4620      	mov	r0, r4
 80020b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80020b6:	bf00      	nop
 80020b8:	20000058 	.word	0x20000058
 80020bc:	20003c5c 	.word	0x20003c5c
 80020c0:	2000005c 	.word	0x2000005c
 80020c4:	20003c68 	.word	0x20003c68
 80020c8:	20003c64 	.word	0x20003c64
 80020cc:	20003c60 	.word	0x20003c60

080020d0 <vPortFree>:
{
 80020d0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80020d2:	4604      	mov	r4, r0
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d032      	beq.n	800213e <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80020d8:	4a19      	ldr	r2, [pc, #100]	; (8002140 <vPortFree+0x70>)
 80020da:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4213      	tst	r3, r2
 80020e2:	d10a      	bne.n	80020fa <vPortFree+0x2a>
 80020e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020e8:	b672      	cpsid	i
 80020ea:	f383 8811 	msr	BASEPRI, r3
 80020ee:	f3bf 8f6f 	isb	sy
 80020f2:	f3bf 8f4f 	dsb	sy
 80020f6:	b662      	cpsie	i
 80020f8:	e7fe      	b.n	80020f8 <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80020fa:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80020fe:	b151      	cbz	r1, 8002116 <vPortFree+0x46>
 8002100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002104:	b672      	cpsid	i
 8002106:	f383 8811 	msr	BASEPRI, r3
 800210a:	f3bf 8f6f 	isb	sy
 800210e:	f3bf 8f4f 	dsb	sy
 8002112:	b662      	cpsie	i
 8002114:	e7fe      	b.n	8002114 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002116:	ea23 0302 	bic.w	r3, r3, r2
 800211a:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800211e:	f000 fa8d 	bl	800263c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <vPortFree+0x74>)
 8002124:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002128:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800212c:	6811      	ldr	r1, [r2, #0]
 800212e:	440b      	add	r3, r1
 8002130:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002132:	f7ff ff17 	bl	8001f64 <prvInsertBlockIntoFreeList>
}
 8002136:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800213a:	f000 bb1b 	b.w	8002774 <xTaskResumeAll>
 800213e:	bd10      	pop	{r4, pc}
 8002140:	20003c5c 	.word	0x20003c5c
 8002144:	20003c60 	.word	0x20003c60

08002148 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800214c:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800214e:	f7ff fe01 	bl	8001d54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002152:	4b2d      	ldr	r3, [pc, #180]	; (8002208 <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8002154:	4c2d      	ldr	r4, [pc, #180]	; (800220c <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	4f2d      	ldr	r7, [pc, #180]	; (8002210 <prvAddNewTaskToReadyList+0xc8>)
 800215a:	3201      	adds	r2, #1
 800215c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800215e:	6825      	ldr	r5, [r4, #0]
 8002160:	2d00      	cmp	r5, #0
 8002162:	d145      	bne.n	80021f0 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002164:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d11c      	bne.n	80021a6 <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800216c:	1978      	adds	r0, r7, r5
 800216e:	3514      	adds	r5, #20
 8002170:	f7ff fd44 	bl	8001bfc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002174:	2d8c      	cmp	r5, #140	; 0x8c
 8002176:	d1f9      	bne.n	800216c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002178:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800223c <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 800217c:	4d25      	ldr	r5, [pc, #148]	; (8002214 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 800217e:	4640      	mov	r0, r8
 8002180:	f7ff fd3c 	bl	8001bfc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002184:	4628      	mov	r0, r5
 8002186:	f7ff fd39 	bl	8001bfc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800218a:	4823      	ldr	r0, [pc, #140]	; (8002218 <prvAddNewTaskToReadyList+0xd0>)
 800218c:	f7ff fd36 	bl	8001bfc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002190:	4822      	ldr	r0, [pc, #136]	; (800221c <prvAddNewTaskToReadyList+0xd4>)
 8002192:	f7ff fd33 	bl	8001bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002196:	4822      	ldr	r0, [pc, #136]	; (8002220 <prvAddNewTaskToReadyList+0xd8>)
 8002198:	f7ff fd30 	bl	8001bfc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800219c:	4b21      	ldr	r3, [pc, #132]	; (8002224 <prvAddNewTaskToReadyList+0xdc>)
 800219e:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80021a2:	4b21      	ldr	r3, [pc, #132]	; (8002228 <prvAddNewTaskToReadyList+0xe0>)
 80021a4:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80021a6:	4a21      	ldr	r2, [pc, #132]	; (800222c <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 80021a8:	4921      	ldr	r1, [pc, #132]	; (8002230 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 80021aa:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80021ac:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 80021ae:	3301      	adds	r3, #1
 80021b0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80021b2:	2301      	movs	r3, #1
 80021b4:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 80021b6:	4093      	lsls	r3, r2
 80021b8:	4303      	orrs	r3, r0
 80021ba:	2014      	movs	r0, #20
 80021bc:	600b      	str	r3, [r1, #0]
 80021be:	1d31      	adds	r1, r6, #4
 80021c0:	fb00 7002 	mla	r0, r0, r2, r7
 80021c4:	f7ff fd28 	bl	8001c18 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80021c8:	f7ff fdea 	bl	8001da0 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80021cc:	4b19      	ldr	r3, [pc, #100]	; (8002234 <prvAddNewTaskToReadyList+0xec>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	b163      	cbz	r3, 80021ec <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80021d2:	6823      	ldr	r3, [r4, #0]
 80021d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021d6:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80021d8:	429a      	cmp	r2, r3
 80021da:	d207      	bcs.n	80021ec <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 80021dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <prvAddNewTaskToReadyList+0xf0>)
 80021e2:	601a      	str	r2, [r3, #0]
 80021e4:	f3bf 8f4f 	dsb	sy
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <prvAddNewTaskToReadyList+0xec>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d1d6      	bne.n	80021a6 <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80021f8:	6823      	ldr	r3, [r4, #0]
 80021fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021fc:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 80021fe:	429a      	cmp	r2, r3
 8002200:	d8d1      	bhi.n	80021a6 <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8002202:	6026      	str	r6, [r4, #0]
 8002204:	e7cf      	b.n	80021a6 <prvAddNewTaskToReadyList+0x5e>
 8002206:	bf00      	nop
 8002208:	20003d08 	.word	0x20003d08
 800220c:	20003c70 	.word	0x20003c70
 8002210:	20003c7c 	.word	0x20003c7c
 8002214:	20003d34 	.word	0x20003d34
 8002218:	20003d50 	.word	0x20003d50
 800221c:	20003d7c 	.word	0x20003d7c
 8002220:	20003d68 	.word	0x20003d68
 8002224:	20003c74 	.word	0x20003c74
 8002228:	20003c78 	.word	0x20003c78
 800222c:	20003d18 	.word	0x20003d18
 8002230:	20003d1c 	.word	0x20003d1c
 8002234:	20003d64 	.word	0x20003d64
 8002238:	e000ed04 	.word	0xe000ed04
 800223c:	20003d20 	.word	0x20003d20

08002240 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002240:	4a06      	ldr	r2, [pc, #24]	; (800225c <prvResetNextTaskUnblockTime+0x1c>)
 8002242:	6813      	ldr	r3, [r2, #0]
 8002244:	6819      	ldr	r1, [r3, #0]
 8002246:	4b06      	ldr	r3, [pc, #24]	; (8002260 <prvResetNextTaskUnblockTime+0x20>)
 8002248:	b919      	cbnz	r1, 8002252 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800224a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002252:	6812      	ldr	r2, [r2, #0]
 8002254:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002256:	68d2      	ldr	r2, [r2, #12]
 8002258:	6852      	ldr	r2, [r2, #4]
 800225a:	e7f8      	b.n	800224e <prvResetNextTaskUnblockTime+0xe>
 800225c:	20003c74 	.word	0x20003c74
 8002260:	20003d48 	.word	0x20003d48

08002264 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002268:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800226a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800226e:	4680      	mov	r8, r0
 8002270:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002272:	3a01      	subs	r2, #1
 8002274:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002276:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002278:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800227c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8002280:	b391      	cbz	r1, 80022e8 <prvInitialiseNewTask.isra.2+0x84>
 8002282:	1e4b      	subs	r3, r1, #1
 8002284:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002288:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800228a:	7858      	ldrb	r0, [r3, #1]
 800228c:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8002290:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002294:	b108      	cbz	r0, 800229a <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002296:	428b      	cmp	r3, r1
 8002298:	d1f7      	bne.n	800228a <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800229a:	2300      	movs	r3, #0
 800229c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022a0:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80022a2:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022a6:	1d20      	adds	r0, r4, #4
 80022a8:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80022aa:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80022ae:	bf28      	it	cs
 80022b0:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80022b2:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80022b4:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b6:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80022ba:	f7ff fcaa 	bl	8001c12 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022be:	f104 0018 	add.w	r0, r4, #24
 80022c2:	f7ff fca6 	bl	8001c12 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80022c6:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022ca:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022cc:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022ce:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022d0:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022d2:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022d4:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80022d6:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022da:	f7ff fd13 	bl	8001d04 <pxPortInitialiseStack>
 80022de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80022e0:	b107      	cbz	r7, 80022e4 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022e2:	603c      	str	r4, [r7, #0]
 80022e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80022e8:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 80022ec:	e7d8      	b.n	80022a0 <prvInitialiseNewTask.isra.2+0x3c>

080022ee <prvDeleteTCB>:
	{
 80022ee:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022f0:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 80022f4:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80022f6:	b93b      	cbnz	r3, 8002308 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80022f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80022fa:	f7ff fee9 	bl	80020d0 <vPortFree>
				vPortFree( pxTCB );
 80022fe:	4620      	mov	r0, r4
	}
 8002300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002304:	f7ff bee4 	b.w	80020d0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002308:	2b01      	cmp	r3, #1
 800230a:	d0f9      	beq.n	8002300 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800230c:	2b02      	cmp	r3, #2
 800230e:	d00a      	beq.n	8002326 <prvDeleteTCB+0x38>
 8002310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002314:	b672      	cpsid	i
 8002316:	f383 8811 	msr	BASEPRI, r3
 800231a:	f3bf 8f6f 	isb	sy
 800231e:	f3bf 8f4f 	dsb	sy
 8002322:	b662      	cpsie	i
 8002324:	e7fe      	b.n	8002324 <prvDeleteTCB+0x36>
 8002326:	bd10      	pop	{r4, pc}

08002328 <prvIdleTask>:
{
 8002328:	b580      	push	{r7, lr}
				taskYIELD();
 800232a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002388 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800232e:	4f12      	ldr	r7, [pc, #72]	; (8002378 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002330:	4c12      	ldr	r4, [pc, #72]	; (800237c <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002332:	4d13      	ldr	r5, [pc, #76]	; (8002380 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002334:	6823      	ldr	r3, [r4, #0]
 8002336:	b963      	cbnz	r3, 8002352 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002338:	4b12      	ldr	r3, [pc, #72]	; (8002384 <prvIdleTask+0x5c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b01      	cmp	r3, #1
 800233e:	d9f8      	bls.n	8002332 <prvIdleTask+0xa>
				taskYIELD();
 8002340:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002344:	f8c8 3000 	str.w	r3, [r8]
 8002348:	f3bf 8f4f 	dsb	sy
 800234c:	f3bf 8f6f 	isb	sy
 8002350:	e7ee      	b.n	8002330 <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 8002352:	f7ff fcff 	bl	8001d54 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800235a:	1d30      	adds	r0, r6, #4
 800235c:	f7ff fc7f 	bl	8001c5e <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002360:	682b      	ldr	r3, [r5, #0]
 8002362:	3b01      	subs	r3, #1
 8002364:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	3b01      	subs	r3, #1
 800236a:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800236c:	f7ff fd18 	bl	8001da0 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002370:	4630      	mov	r0, r6
 8002372:	f7ff ffbc 	bl	80022ee <prvDeleteTCB>
 8002376:	e7dd      	b.n	8002334 <prvIdleTask+0xc>
 8002378:	20003d7c 	.word	0x20003d7c
 800237c:	20003d0c 	.word	0x20003d0c
 8002380:	20003d08 	.word	0x20003d08
 8002384:	20003c7c 	.word	0x20003c7c
 8002388:	e000ed04 	.word	0xe000ed04

0800238c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800238c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800238e:	4b1b      	ldr	r3, [pc, #108]	; (80023fc <prvAddCurrentTaskToDelayedList+0x70>)
{
 8002390:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002392:	4e1b      	ldr	r6, [pc, #108]	; (8002400 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8002394:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8002396:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002398:	6830      	ldr	r0, [r6, #0]
 800239a:	3004      	adds	r0, #4
 800239c:	f7ff fc5f 	bl	8001c5e <uxListRemove>
 80023a0:	4633      	mov	r3, r6
 80023a2:	b940      	cbnz	r0, 80023b6 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80023a4:	6831      	ldr	r1, [r6, #0]
 80023a6:	2001      	movs	r0, #1
 80023a8:	4e16      	ldr	r6, [pc, #88]	; (8002404 <prvAddCurrentTaskToDelayedList+0x78>)
 80023aa:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80023ac:	6832      	ldr	r2, [r6, #0]
 80023ae:	4088      	lsls	r0, r1
 80023b0:	ea22 0200 	bic.w	r2, r2, r0
 80023b4:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80023b6:	1c62      	adds	r2, r4, #1
 80023b8:	d107      	bne.n	80023ca <prvAddCurrentTaskToDelayedList+0x3e>
 80023ba:	b137      	cbz	r7, 80023ca <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023bc:	6819      	ldr	r1, [r3, #0]
 80023be:	4812      	ldr	r0, [pc, #72]	; (8002408 <prvAddCurrentTaskToDelayedList+0x7c>)
 80023c0:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80023c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023c6:	f7ff bc27 	b.w	8001c18 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80023ca:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023cc:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80023ce:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80023d0:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80023d2:	d907      	bls.n	80023e4 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <prvAddCurrentTaskToDelayedList+0x80>)
 80023d6:	6810      	ldr	r0, [r2, #0]
 80023d8:	6819      	ldr	r1, [r3, #0]
}
 80023da:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023de:	3104      	adds	r1, #4
 80023e0:	f7ff bc26 	b.w	8001c30 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023e4:	4a0a      	ldr	r2, [pc, #40]	; (8002410 <prvAddCurrentTaskToDelayedList+0x84>)
 80023e6:	6810      	ldr	r0, [r2, #0]
 80023e8:	6819      	ldr	r1, [r3, #0]
 80023ea:	3104      	adds	r1, #4
 80023ec:	f7ff fc20 	bl	8001c30 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <prvAddCurrentTaskToDelayedList+0x88>)
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	4294      	cmp	r4, r2
 80023f6:	d200      	bcs.n	80023fa <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 80023f8:	601c      	str	r4, [r3, #0]
 80023fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023fc:	20003d90 	.word	0x20003d90
 8002400:	20003c70 	.word	0x20003c70
 8002404:	20003d1c 	.word	0x20003d1c
 8002408:	20003d68 	.word	0x20003d68
 800240c:	20003c78 	.word	0x20003c78
 8002410:	20003c74 	.word	0x20003c74
 8002414:	20003d48 	.word	0x20003d48

08002418 <prvTaskIsTaskSuspended.part.0>:
 8002418:	f04f 0350 	mov.w	r3, #80	; 0x50
 800241c:	b672      	cpsid	i
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	b662      	cpsie	i
 800242c:	e7fe      	b.n	800242c <prvTaskIsTaskSuspended.part.0+0x14>

0800242e <xTaskCreateStatic>:
	{
 800242e:	b570      	push	{r4, r5, r6, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002434:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002436:	b90d      	cbnz	r5, 800243c <xTaskCreateStatic+0xe>
 8002438:	f7ff ffee 	bl	8002418 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 800243c:	b954      	cbnz	r4, 8002454 <xTaskCreateStatic+0x26>
 800243e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002442:	b672      	cpsid	i
 8002444:	f383 8811 	msr	BASEPRI, r3
 8002448:	f3bf 8f6f 	isb	sy
 800244c:	f3bf 8f4f 	dsb	sy
 8002450:	b662      	cpsie	i
 8002452:	e7fe      	b.n	8002452 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002454:	2654      	movs	r6, #84	; 0x54
 8002456:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002458:	9e05      	ldr	r6, [sp, #20]
 800245a:	2e54      	cmp	r6, #84	; 0x54
 800245c:	d00a      	beq.n	8002474 <xTaskCreateStatic+0x46>
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	b672      	cpsid	i
 8002464:	f383 8811 	msr	BASEPRI, r3
 8002468:	f3bf 8f6f 	isb	sy
 800246c:	f3bf 8f4f 	dsb	sy
 8002470:	b662      	cpsie	i
 8002472:	e7fe      	b.n	8002472 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002474:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002476:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002478:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800247a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800247e:	ad04      	add	r5, sp, #16
 8002480:	9402      	str	r4, [sp, #8]
 8002482:	9501      	str	r5, [sp, #4]
 8002484:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8002486:	9500      	str	r5, [sp, #0]
 8002488:	f7ff feec 	bl	8002264 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800248c:	4620      	mov	r0, r4
 800248e:	f7ff fe5b 	bl	8002148 <prvAddNewTaskToReadyList>
	}
 8002492:	9804      	ldr	r0, [sp, #16]
 8002494:	b006      	add	sp, #24
 8002496:	bd70      	pop	{r4, r5, r6, pc}

08002498 <xTaskCreate>:
	{
 8002498:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800249c:	4607      	mov	r7, r0
 800249e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024a0:	0090      	lsls	r0, r2, #2
	{
 80024a2:	4688      	mov	r8, r1
 80024a4:	4616      	mov	r6, r2
 80024a6:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80024a8:	f7ff fd80 	bl	8001fac <pvPortMalloc>
			if( pxStack != NULL )
 80024ac:	4605      	mov	r5, r0
 80024ae:	b1e8      	cbz	r0, 80024ec <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80024b0:	2054      	movs	r0, #84	; 0x54
 80024b2:	f7ff fd7b 	bl	8001fac <pvPortMalloc>
				if( pxNewTCB != NULL )
 80024b6:	4604      	mov	r4, r0
 80024b8:	b1a8      	cbz	r0, 80024e6 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80024ba:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 80024bc:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024be:	4632      	mov	r2, r6
 80024c0:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80024c2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80024c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80024c8:	9002      	str	r0, [sp, #8]
 80024ca:	4638      	mov	r0, r7
 80024cc:	9301      	str	r3, [sp, #4]
 80024ce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80024d0:	9300      	str	r3, [sp, #0]
 80024d2:	464b      	mov	r3, r9
 80024d4:	f7ff fec6 	bl	8002264 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80024d8:	4620      	mov	r0, r4
 80024da:	f7ff fe35 	bl	8002148 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80024de:	2001      	movs	r0, #1
	}
 80024e0:	b005      	add	sp, #20
 80024e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80024e6:	4628      	mov	r0, r5
 80024e8:	f7ff fdf2 	bl	80020d0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80024f0:	e7f6      	b.n	80024e0 <xTaskCreate+0x48>
	...

080024f4 <vTaskDelete>:
	{
 80024f4:	b570      	push	{r4, r5, r6, lr}
 80024f6:	4604      	mov	r4, r0
 80024f8:	4d2a      	ldr	r5, [pc, #168]	; (80025a4 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80024fa:	f7ff fc2b 	bl	8001d54 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80024fe:	b904      	cbnz	r4, 8002502 <vTaskDelete+0xe>
 8002500:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002502:	1d26      	adds	r6, r4, #4
 8002504:	4630      	mov	r0, r6
 8002506:	f7ff fbaa 	bl	8001c5e <uxListRemove>
 800250a:	b960      	cbnz	r0, 8002526 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800250c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800250e:	2114      	movs	r1, #20
 8002510:	4b25      	ldr	r3, [pc, #148]	; (80025a8 <vTaskDelete+0xb4>)
 8002512:	4341      	muls	r1, r0
 8002514:	585b      	ldr	r3, [r3, r1]
 8002516:	b933      	cbnz	r3, 8002526 <vTaskDelete+0x32>
 8002518:	4924      	ldr	r1, [pc, #144]	; (80025ac <vTaskDelete+0xb8>)
 800251a:	2201      	movs	r2, #1
 800251c:	680b      	ldr	r3, [r1, #0]
 800251e:	4082      	lsls	r2, r0
 8002520:	ea23 0302 	bic.w	r3, r3, r2
 8002524:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002526:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002528:	b11b      	cbz	r3, 8002532 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800252a:	f104 0018 	add.w	r0, r4, #24
 800252e:	f7ff fb96 	bl	8001c5e <uxListRemove>
			uxTaskNumber++;
 8002532:	4a1f      	ldr	r2, [pc, #124]	; (80025b0 <vTaskDelete+0xbc>)
 8002534:	6813      	ldr	r3, [r2, #0]
 8002536:	3301      	adds	r3, #1
 8002538:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 800253a:	682b      	ldr	r3, [r5, #0]
 800253c:	429c      	cmp	r4, r3
 800253e:	d11d      	bne.n	800257c <vTaskDelete+0x88>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002540:	4631      	mov	r1, r6
 8002542:	481c      	ldr	r0, [pc, #112]	; (80025b4 <vTaskDelete+0xc0>)
 8002544:	f7ff fb68 	bl	8001c18 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 8002548:	4a1b      	ldr	r2, [pc, #108]	; (80025b8 <vTaskDelete+0xc4>)
 800254a:	6813      	ldr	r3, [r2, #0]
 800254c:	3301      	adds	r3, #1
 800254e:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8002550:	f7ff fc26 	bl	8001da0 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8002554:	4b19      	ldr	r3, [pc, #100]	; (80025bc <vTaskDelete+0xc8>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	b313      	cbz	r3, 80025a0 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 800255a:	682b      	ldr	r3, [r5, #0]
 800255c:	429c      	cmp	r4, r3
 800255e:	d11f      	bne.n	80025a0 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8002560:	4b17      	ldr	r3, [pc, #92]	; (80025c0 <vTaskDelete+0xcc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	b1a3      	cbz	r3, 8002590 <vTaskDelete+0x9c>
 8002566:	f04f 0350 	mov.w	r3, #80	; 0x50
 800256a:	b672      	cpsid	i
 800256c:	f383 8811 	msr	BASEPRI, r3
 8002570:	f3bf 8f6f 	isb	sy
 8002574:	f3bf 8f4f 	dsb	sy
 8002578:	b662      	cpsie	i
 800257a:	e7fe      	b.n	800257a <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <vTaskDelete+0xd0>)
				prvDeleteTCB( pxTCB );
 800257e:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8002580:	6813      	ldr	r3, [r2, #0]
 8002582:	3b01      	subs	r3, #1
 8002584:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8002586:	f7ff feb2 	bl	80022ee <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800258a:	f7ff fe59 	bl	8002240 <prvResetNextTaskUnblockTime>
 800258e:	e7df      	b.n	8002550 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8002590:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <vTaskDelete+0xd4>)
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	f3bf 8f4f 	dsb	sy
 800259c:	f3bf 8f6f 	isb	sy
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
 80025a2:	bf00      	nop
 80025a4:	20003c70 	.word	0x20003c70
 80025a8:	20003c7c 	.word	0x20003c7c
 80025ac:	20003d1c 	.word	0x20003d1c
 80025b0:	20003d18 	.word	0x20003d18
 80025b4:	20003d7c 	.word	0x20003d7c
 80025b8:	20003d0c 	.word	0x20003d0c
 80025bc:	20003d64 	.word	0x20003d64
 80025c0:	20003d14 	.word	0x20003d14
 80025c4:	20003d08 	.word	0x20003d08
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <vTaskStartScheduler>:
{
 80025cc:	b510      	push	{r4, lr}
 80025ce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025d0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025d2:	aa07      	add	r2, sp, #28
 80025d4:	a906      	add	r1, sp, #24
 80025d6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80025d8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80025da:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80025dc:	f000 fa1c 	bl	8002a18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80025e0:	9b05      	ldr	r3, [sp, #20]
 80025e2:	9400      	str	r4, [sp, #0]
 80025e4:	9302      	str	r3, [sp, #8]
 80025e6:	9b06      	ldr	r3, [sp, #24]
 80025e8:	9a07      	ldr	r2, [sp, #28]
 80025ea:	9301      	str	r3, [sp, #4]
 80025ec:	4623      	mov	r3, r4
 80025ee:	490e      	ldr	r1, [pc, #56]	; (8002628 <vTaskStartScheduler+0x5c>)
 80025f0:	480e      	ldr	r0, [pc, #56]	; (800262c <vTaskStartScheduler+0x60>)
 80025f2:	f7ff ff1c 	bl	800242e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80025f6:	b1a0      	cbz	r0, 8002622 <vTaskStartScheduler+0x56>
 80025f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fc:	b672      	cpsid	i
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	b662      	cpsie	i
		xNextTaskUnblockTime = portMAX_DELAY;
 800260c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002610:	4b07      	ldr	r3, [pc, #28]	; (8002630 <vTaskStartScheduler+0x64>)
 8002612:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002614:	2201      	movs	r2, #1
 8002616:	4b07      	ldr	r3, [pc, #28]	; (8002634 <vTaskStartScheduler+0x68>)
 8002618:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800261a:	4b07      	ldr	r3, [pc, #28]	; (8002638 <vTaskStartScheduler+0x6c>)
 800261c:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800261e:	f7ff fc3b 	bl	8001e98 <xPortStartScheduler>
}
 8002622:	b008      	add	sp, #32
 8002624:	bd10      	pop	{r4, pc}
 8002626:	bf00      	nop
 8002628:	080033c4 	.word	0x080033c4
 800262c:	08002329 	.word	0x08002329
 8002630:	20003d48 	.word	0x20003d48
 8002634:	20003d64 	.word	0x20003d64
 8002638:	20003d90 	.word	0x20003d90

0800263c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800263c:	4a02      	ldr	r2, [pc, #8]	; (8002648 <vTaskSuspendAll+0xc>)
 800263e:	6813      	ldr	r3, [r2, #0]
 8002640:	3301      	adds	r3, #1
 8002642:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20003d14 	.word	0x20003d14

0800264c <xTaskIncrementTick>:
{
 800264c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002650:	4b3d      	ldr	r3, [pc, #244]	; (8002748 <xTaskIncrementTick+0xfc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d16f      	bne.n	8002738 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002658:	4b3c      	ldr	r3, [pc, #240]	; (800274c <xTaskIncrementTick+0x100>)
 800265a:	681c      	ldr	r4, [r3, #0]
 800265c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800265e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002660:	b9cc      	cbnz	r4, 8002696 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <xTaskIncrementTick+0x104>)
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	b152      	cbz	r2, 8002680 <xTaskIncrementTick+0x34>
 800266a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800266e:	b672      	cpsid	i
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	b662      	cpsie	i
 800267e:	e7fe      	b.n	800267e <xTaskIncrementTick+0x32>
 8002680:	4a34      	ldr	r2, [pc, #208]	; (8002754 <xTaskIncrementTick+0x108>)
 8002682:	6819      	ldr	r1, [r3, #0]
 8002684:	6810      	ldr	r0, [r2, #0]
 8002686:	6018      	str	r0, [r3, #0]
 8002688:	6011      	str	r1, [r2, #0]
 800268a:	4a33      	ldr	r2, [pc, #204]	; (8002758 <xTaskIncrementTick+0x10c>)
 800268c:	6813      	ldr	r3, [r2, #0]
 800268e:	3301      	adds	r3, #1
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	f7ff fdd5 	bl	8002240 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002696:	4d31      	ldr	r5, [pc, #196]	; (800275c <xTaskIncrementTick+0x110>)
 8002698:	f04f 0b00 	mov.w	fp, #0
 800269c:	4f30      	ldr	r7, [pc, #192]	; (8002760 <xTaskIncrementTick+0x114>)
 800269e:	682b      	ldr	r3, [r5, #0]
 80026a0:	429c      	cmp	r4, r3
 80026a2:	d30a      	bcc.n	80026ba <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8002750 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80026a8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8002770 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026ac:	f8da 2000 	ldr.w	r2, [sl]
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	b9a2      	cbnz	r2, 80026de <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b8:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80026ba:	683a      	ldr	r2, [r7, #0]
 80026bc:	4b29      	ldr	r3, [pc, #164]	; (8002764 <xTaskIncrementTick+0x118>)
 80026be:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80026c0:	2214      	movs	r2, #20
 80026c2:	434a      	muls	r2, r1
 80026c4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80026c6:	2a02      	cmp	r2, #2
 80026c8:	bf28      	it	cs
 80026ca:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80026ce:	4a26      	ldr	r2, [pc, #152]	; (8002768 <xTaskIncrementTick+0x11c>)
 80026d0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80026d2:	2a00      	cmp	r2, #0
}
 80026d4:	bf0c      	ite	eq
 80026d6:	4658      	moveq	r0, fp
 80026d8:	2001      	movne	r0, #1
 80026da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026de:	f8da 2000 	ldr.w	r2, [sl]
 80026e2:	68d2      	ldr	r2, [r2, #12]
 80026e4:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026e6:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80026e8:	428c      	cmp	r4, r1
 80026ea:	d201      	bcs.n	80026f0 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 80026ec:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80026ee:	e7e4      	b.n	80026ba <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026f0:	f106 0804 	add.w	r8, r6, #4
 80026f4:	4640      	mov	r0, r8
 80026f6:	f7ff fab2 	bl	8001c5e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80026fa:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80026fc:	b119      	cbz	r1, 8002706 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80026fe:	f106 0018 	add.w	r0, r6, #24
 8002702:	f7ff faac 	bl	8001c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002706:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002708:	2201      	movs	r2, #1
 800270a:	f8d9 3000 	ldr.w	r3, [r9]
 800270e:	f04f 0e14 	mov.w	lr, #20
 8002712:	fa02 f100 	lsl.w	r1, r2, r0
 8002716:	4319      	orrs	r1, r3
 8002718:	4b12      	ldr	r3, [pc, #72]	; (8002764 <xTaskIncrementTick+0x118>)
 800271a:	f8c9 1000 	str.w	r1, [r9]
 800271e:	4641      	mov	r1, r8
 8002720:	fb0e 3000 	mla	r0, lr, r0, r3
 8002724:	f7ff fa78 	bl	8001c18 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002728:	6838      	ldr	r0, [r7, #0]
 800272a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800272c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800272e:	4291      	cmp	r1, r2
 8002730:	bf28      	it	cs
 8002732:	f04f 0b01 	movcs.w	fp, #1
 8002736:	e7b9      	b.n	80026ac <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8002738:	4a0c      	ldr	r2, [pc, #48]	; (800276c <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800273a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800273e:	6813      	ldr	r3, [r2, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	6013      	str	r3, [r2, #0]
 8002744:	e7c3      	b.n	80026ce <xTaskIncrementTick+0x82>
 8002746:	bf00      	nop
 8002748:	20003d14 	.word	0x20003d14
 800274c:	20003d90 	.word	0x20003d90
 8002750:	20003c74 	.word	0x20003c74
 8002754:	20003c78 	.word	0x20003c78
 8002758:	20003d4c 	.word	0x20003d4c
 800275c:	20003d48 	.word	0x20003d48
 8002760:	20003c70 	.word	0x20003c70
 8002764:	20003c7c 	.word	0x20003c7c
 8002768:	20003d94 	.word	0x20003d94
 800276c:	20003d10 	.word	0x20003d10
 8002770:	20003d1c 	.word	0x20003d1c

08002774 <xTaskResumeAll>:
{
 8002774:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002778:	4c32      	ldr	r4, [pc, #200]	; (8002844 <xTaskResumeAll+0xd0>)
 800277a:	6823      	ldr	r3, [r4, #0]
 800277c:	b953      	cbnz	r3, 8002794 <xTaskResumeAll+0x20>
 800277e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002782:	b672      	cpsid	i
 8002784:	f383 8811 	msr	BASEPRI, r3
 8002788:	f3bf 8f6f 	isb	sy
 800278c:	f3bf 8f4f 	dsb	sy
 8002790:	b662      	cpsie	i
 8002792:	e7fe      	b.n	8002792 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 8002794:	f7ff fade 	bl	8001d54 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002798:	6823      	ldr	r3, [r4, #0]
 800279a:	3b01      	subs	r3, #1
 800279c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800279e:	6824      	ldr	r4, [r4, #0]
 80027a0:	b12c      	cbz	r4, 80027ae <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80027a2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80027a4:	f7ff fafc 	bl	8001da0 <vPortExitCritical>
}
 80027a8:	4620      	mov	r0, r4
 80027aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80027ae:	4b26      	ldr	r3, [pc, #152]	; (8002848 <xTaskResumeAll+0xd4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f5      	beq.n	80027a2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027b6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8002860 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80027ba:	4f24      	ldr	r7, [pc, #144]	; (800284c <xTaskResumeAll+0xd8>)
 80027bc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8002864 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80027c0:	f8d9 3000 	ldr.w	r3, [r9]
 80027c4:	b9e3      	cbnz	r3, 8002800 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 80027c6:	b10c      	cbz	r4, 80027cc <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 80027c8:	f7ff fd3a 	bl	8002240 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80027cc:	4d20      	ldr	r5, [pc, #128]	; (8002850 <xTaskResumeAll+0xdc>)
 80027ce:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80027d0:	b144      	cbz	r4, 80027e4 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 80027d2:	4e20      	ldr	r6, [pc, #128]	; (8002854 <xTaskResumeAll+0xe0>)
 80027d4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80027d6:	f7ff ff39 	bl	800264c <xTaskIncrementTick>
 80027da:	b100      	cbz	r0, 80027de <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 80027dc:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80027de:	3c01      	subs	r4, #1
 80027e0:	d1f9      	bne.n	80027d6 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 80027e2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80027e4:	4b1b      	ldr	r3, [pc, #108]	; (8002854 <xTaskResumeAll+0xe0>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d0da      	beq.n	80027a2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 80027ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027f0:	4b19      	ldr	r3, [pc, #100]	; (8002858 <xTaskResumeAll+0xe4>)
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80027fc:	2401      	movs	r4, #1
 80027fe:	e7d1      	b.n	80027a4 <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002800:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8002804:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002806:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002808:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800280a:	f104 0018 	add.w	r0, r4, #24
 800280e:	f7ff fa26 	bl	8001c5e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002812:	4630      	mov	r0, r6
 8002814:	f7ff fa23 	bl	8001c5e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002818:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800281a:	6839      	ldr	r1, [r7, #0]
 800281c:	2014      	movs	r0, #20
 800281e:	fa05 f302 	lsl.w	r3, r5, r2
 8002822:	fb00 8002 	mla	r0, r0, r2, r8
 8002826:	430b      	orrs	r3, r1
 8002828:	4631      	mov	r1, r6
 800282a:	603b      	str	r3, [r7, #0]
 800282c:	f7ff f9f4 	bl	8001c18 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002830:	4b0a      	ldr	r3, [pc, #40]	; (800285c <xTaskResumeAll+0xe8>)
 8002832:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002838:	429a      	cmp	r2, r3
 800283a:	d3c1      	bcc.n	80027c0 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <xTaskResumeAll+0xe0>)
 800283e:	601d      	str	r5, [r3, #0]
 8002840:	e7be      	b.n	80027c0 <xTaskResumeAll+0x4c>
 8002842:	bf00      	nop
 8002844:	20003d14 	.word	0x20003d14
 8002848:	20003d08 	.word	0x20003d08
 800284c:	20003d1c 	.word	0x20003d1c
 8002850:	20003d10 	.word	0x20003d10
 8002854:	20003d94 	.word	0x20003d94
 8002858:	e000ed04 	.word	0xe000ed04
 800285c:	20003c70 	.word	0x20003c70
 8002860:	20003d50 	.word	0x20003d50
 8002864:	20003c7c 	.word	0x20003c7c

08002868 <vTaskDelay>:
	{
 8002868:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800286a:	b940      	cbnz	r0, 800287e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800286c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <vTaskDelay+0x44>)
 8002872:	601a      	str	r2, [r3, #0]
 8002874:	f3bf 8f4f 	dsb	sy
 8002878:	f3bf 8f6f 	isb	sy
 800287c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <vTaskDelay+0x48>)
 8002880:	6819      	ldr	r1, [r3, #0]
 8002882:	b151      	cbz	r1, 800289a <vTaskDelay+0x32>
 8002884:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002888:	b672      	cpsid	i
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	b662      	cpsie	i
 8002898:	e7fe      	b.n	8002898 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800289a:	f7ff fecf 	bl	800263c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800289e:	f7ff fd75 	bl	800238c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80028a2:	f7ff ff67 	bl	8002774 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80028a6:	2800      	cmp	r0, #0
 80028a8:	d0e0      	beq.n	800286c <vTaskDelay+0x4>
 80028aa:	bd08      	pop	{r3, pc}
 80028ac:	e000ed04 	.word	0xe000ed04
 80028b0:	20003d14 	.word	0x20003d14

080028b4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028b4:	4b18      	ldr	r3, [pc, #96]	; (8002918 <vTaskSwitchContext+0x64>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	4b18      	ldr	r3, [pc, #96]	; (800291c <vTaskSwitchContext+0x68>)
{
 80028ba:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80028bc:	b112      	cbz	r2, 80028c4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80028be:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80028c4:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028c6:	4b16      	ldr	r3, [pc, #88]	; (8002920 <vTaskSwitchContext+0x6c>)
 80028c8:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80028ca:	fab3 f383 	clz	r3, r3
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	2214      	movs	r2, #20
 80028d2:	4914      	ldr	r1, [pc, #80]	; (8002924 <vTaskSwitchContext+0x70>)
 80028d4:	f1c3 031f 	rsb	r3, r3, #31
 80028d8:	435a      	muls	r2, r3
 80028da:	588c      	ldr	r4, [r1, r2]
 80028dc:	1888      	adds	r0, r1, r2
 80028de:	b954      	cbnz	r4, 80028f6 <vTaskSwitchContext+0x42>
	__asm volatile
 80028e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e4:	b672      	cpsid	i
 80028e6:	f383 8811 	msr	BASEPRI, r3
 80028ea:	f3bf 8f6f 	isb	sy
 80028ee:	f3bf 8f4f 	dsb	sy
 80028f2:	b662      	cpsie	i
 80028f4:	e7fe      	b.n	80028f4 <vTaskSwitchContext+0x40>
 80028f6:	6844      	ldr	r4, [r0, #4]
 80028f8:	3208      	adds	r2, #8
 80028fa:	6864      	ldr	r4, [r4, #4]
 80028fc:	440a      	add	r2, r1
 80028fe:	4294      	cmp	r4, r2
 8002900:	6044      	str	r4, [r0, #4]
 8002902:	bf04      	itt	eq
 8002904:	6862      	ldreq	r2, [r4, #4]
 8002906:	6042      	streq	r2, [r0, #4]
 8002908:	2214      	movs	r2, #20
 800290a:	fb02 1303 	mla	r3, r2, r3, r1
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <vTaskSwitchContext+0x74>)
 8002914:	e7d4      	b.n	80028c0 <vTaskSwitchContext+0xc>
 8002916:	bf00      	nop
 8002918:	20003d14 	.word	0x20003d14
 800291c:	20003d94 	.word	0x20003d94
 8002920:	20003d1c 	.word	0x20003d1c
 8002924:	20003c7c 	.word	0x20003c7c
 8002928:	20003c70 	.word	0x20003c70

0800292c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800292c:	4b05      	ldr	r3, [pc, #20]	; (8002944 <xTaskGetSchedulerState+0x18>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	b133      	cbz	r3, 8002940 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002932:	4b05      	ldr	r3, [pc, #20]	; (8002948 <xTaskGetSchedulerState+0x1c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002938:	bf0c      	ite	eq
 800293a:	2002      	moveq	r0, #2
 800293c:	2000      	movne	r0, #0
 800293e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002940:	2001      	movs	r0, #1
	}
 8002942:	4770      	bx	lr
 8002944:	20003d64 	.word	0x20003d64
 8002948:	20003d14 	.word	0x20003d14

0800294c <MT48LC4M32B2_Init>:

FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void MT48LC4M32B2_Init(SDRAM_HandleTypeDef *hsdram)
	{
 800294c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	 // Вкл тактирование, обращение именно к 1 банку памяти, одно автообновление (1-16)

	    __IO uint32_t tmpmrd =0;
	    command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002950:	4c28      	ldr	r4, [pc, #160]	; (80029f4 <MT48LC4M32B2_Init+0xa8>)
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002952:	2501      	movs	r5, #1
	    __IO uint32_t tmpmrd =0;
 8002954:	f04f 0900 	mov.w	r9, #0
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002958:	f04f 0810 	mov.w	r8, #16
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800295c:	4f26      	ldr	r7, [pc, #152]	; (80029f8 <MT48LC4M32B2_Init+0xac>)
 800295e:	4621      	mov	r1, r4
 8002960:	f64f 72ff 	movw	r2, #65535	; 0xffff
	{
 8002964:	4606      	mov	r6, r0
	    __IO uint32_t tmpmrd =0;
 8002966:	f8cd 9004 	str.w	r9, [sp, #4]
	    command.AutoRefreshNumber = 1;
 800296a:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 800296c:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002970:	e884 0120 	stmia.w	r4, {r5, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8002974:	f7fe ff05 	bl	8001782 <HAL_SDRAM_SendCommand>
 8002978:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 800297a:	4628      	mov	r0, r5
 800297c:	f7fd fe12 	bl	80005a4 <HAL_Delay>

	// Деактивируем все банки памяти перед регенерацией

	    command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002980:	2302      	movs	r3, #2
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8002982:	4621      	mov	r1, r4
 8002984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002988:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 800298a:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 800298c:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8002990:	e884 0108 	stmia.w	r4, {r3, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8002994:	f7fe fef5 	bl	8001782 <HAL_SDRAM_SendCommand>
 8002998:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 800299a:	4628      	mov	r0, r5
 800299c:	f7fd fe02 	bl	80005a4 <HAL_Delay>

	// Задаём нормальный режим автогенерации

	    command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80029a0:	2303      	movs	r3, #3
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 8;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029a2:	4621      	mov	r1, r4
 80029a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a8:	4630      	mov	r0, r6
	    command.ModeRegisterDefinition = 0;
 80029aa:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80029ae:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.AutoRefreshNumber = 8;
 80029b2:	2308      	movs	r3, #8
 80029b4:	60a3      	str	r3, [r4, #8]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029b6:	f7fe fee4 	bl	8001782 <HAL_SDRAM_SendCommand>
 80029ba:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 80029bc:	4628      	mov	r0, r5
 80029be:	f7fd fdf1 	bl	80005a4 <HAL_Delay>

	// Включаем размер пакета, последовательный режим передачи,
	// латентность 2 такта, стандартный режим, одиночный режим записи пакета

	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80029c2:	f44f 7308 	mov.w	r3, #544	; 0x220
	                      SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = tmpmrd;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029ca:	4621      	mov	r1, r4
	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80029cc:	9301      	str	r3, [sp, #4]
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 80029ce:	2304      	movs	r3, #4
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029d0:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 80029d2:	60a5      	str	r5, [r4, #8]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80029d4:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.ModeRegisterDefinition = tmpmrd;
 80029d8:	9b01      	ldr	r3, [sp, #4]
 80029da:	60e3      	str	r3, [r4, #12]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029dc:	f7fe fed1 	bl	8001782 <HAL_SDRAM_SendCommand>

	    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80029e0:	f240 6103 	movw	r1, #1539	; 0x603
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80029e4:	7038      	strb	r0, [r7, #0]
	    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 80029e6:	4630      	mov	r0, r6
 80029e8:	f7fe fee2 	bl	80017b0 <HAL_SDRAM_ProgramRefreshRate>
	}
 80029ec:	b003      	add	sp, #12
 80029ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029f2:	bf00      	nop
 80029f4:	20003ff4 	.word	0x20003ff4
 80029f8:	20004004 	.word	0x20004004

080029fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80029fc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80029fe:	4903      	ldr	r1, [pc, #12]	; (8002a0c <MX_FATFS_Init+0x10>)
 8002a00:	4803      	ldr	r0, [pc, #12]	; (8002a10 <MX_FATFS_Init+0x14>)
 8002a02:	f7ff f8c3 	bl	8001b8c <FATFS_LinkDriver>
 8002a06:	4b03      	ldr	r3, [pc, #12]	; (8002a14 <MX_FATFS_Init+0x18>)
 8002a08:	7018      	strb	r0, [r3, #0]
 8002a0a:	bd08      	pop	{r3, pc}
 8002a0c:	20004008 	.word	0x20004008
 8002a10:	20000014 	.word	0x20000014
 8002a14:	2000400c 	.word	0x2000400c

08002a18 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <vApplicationGetIdleTaskMemory+0x10>)
 8002a1a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <vApplicationGetIdleTaskMemory+0x14>)
 8002a1e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002a20:	2380      	movs	r3, #128	; 0x80
 8002a22:	6013      	str	r3, [r2, #0]
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20003f98 	.word	0x20003f98
 8002a2c:	20003d98 	.word	0x20003d98

08002a30 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8002a30:	4770      	bx	lr
	...

08002a34 <TFT_FillScreen>:
//————————————————

void TFT_FillScreen(uint32_t color)
{
 uint32_t i;
 uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
 8002a34:	4b06      	ldr	r3, [pc, #24]	; (8002a50 <TFT_FillScreen+0x1c>)
 8002a36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002a38:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8002a3a:	4351      	muls	r1, r2
 for(i=0;i<n;i++)
 8002a3c:	2200      	movs	r2, #0
{
 8002a3e:	b510      	push	{r4, lr}
 for(i=0;i<n;i++)
 8002a40:	428a      	cmp	r2, r1
 8002a42:	d100      	bne.n	8002a46 <TFT_FillScreen+0x12>
 {
  *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*4)) = color;
 }
}
 8002a44:	bd10      	pop	{r4, pc}
  *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*4)) = color;
 8002a46:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 8002a48:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 for(i=0;i<n;i++)
 8002a4c:	3201      	adds	r2, #1
 8002a4e:	e7f7      	b.n	8002a40 <TFT_FillScreen+0xc>
 8002a50:	200060ac 	.word	0x200060ac

08002a54 <TFT_DrawPixel>:
//————————————————

void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 8002a54:	b510      	push	{r4, lr}
 *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress +
		 (4*(Ypos*hltdc.LayerCfg[0].ImageWidth + Xpos))) = color;
 8002a56:	4c04      	ldr	r4, [pc, #16]	; (8002a68 <TFT_DrawPixel+0x14>)
 8002a58:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002a5a:	fb03 0101 	mla	r1, r3, r1, r0
 *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress +
 8002a5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		 (4*(Ypos*hltdc.LayerCfg[0].ImageWidth + Xpos))) = color;
 8002a60:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8002a64:	bd10      	pop	{r4, pc}
 8002a66:	bf00      	nop
 8002a68:	200060ac 	.word	0x200060ac

08002a6c <TFT_DrawLine>:
 }
}
//————————————————

void TFT_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint32_t color)
{
 8002a6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t buf;
	int steep = abs(y2-y1)>abs(x2-x1);
 8002a70:	eba3 0801 	sub.w	r8, r3, r1
 8002a74:	eba2 0900 	sub.w	r9, r2, r0
{
 8002a78:	4604      	mov	r4, r0
 8002a7a:	460d      	mov	r5, r1
	int steep = abs(y2-y1)>abs(x2-x1);
 8002a7c:	f1b8 0f00 	cmp.w	r8, #0
{
 8002a80:	4617      	mov	r7, r2
	int steep = abs(y2-y1)>abs(x2-x1);
 8002a82:	bfb8      	it	lt
 8002a84:	f1c8 0800 	rsblt	r8, r8, #0
 8002a88:	f1b9 0f00 	cmp.w	r9, #0
 8002a8c:	bfb8      	it	lt
 8002a8e:	f1c9 0900 	rsblt	r9, r9, #0
	if(steep)
 8002a92:	45c8      	cmp	r8, r9
 8002a94:	dd03      	ble.n	8002a9e <TFT_DrawLine+0x32>
	{
		buf = x1; x1 = y1; y1 = buf;
		buf = x2; x2 = y2; y2 = buf;
 8002a96:	461f      	mov	r7, r3
		buf = x1; x1 = y1; y1 = buf;
 8002a98:	460c      	mov	r4, r1
		buf = x2; x2 = y2; y2 = buf;
 8002a9a:	4613      	mov	r3, r2
		buf = x1; x1 = y1; y1 = buf;
 8002a9c:	4605      	mov	r5, r0
	}
	if(x1>x2)
 8002a9e:	42bc      	cmp	r4, r7
 8002aa0:	d905      	bls.n	8002aae <TFT_DrawLine+0x42>
 8002aa2:	462a      	mov	r2, r5
	{
		buf = x1; x1 = x2; x2 = buf;
		buf = y1; y1 = y2; y2 = buf;
 8002aa4:	461d      	mov	r5, r3
 8002aa6:	4613      	mov	r3, r2
	if(x1>x2)
 8002aa8:	4622      	mov	r2, r4
 8002aaa:	463c      	mov	r4, r7
 8002aac:	4617      	mov	r7, r2
	}
	int dx,dy;
	dx=x2-x1;
	dy=abs(y2-y1);
 8002aae:	eba3 0a05 	sub.w	sl, r3, r5
	dx=x2-x1;
 8002ab2:	eba7 0b04 	sub.w	fp, r7, r4
	int err=dx/2;
 8002ab6:	2202      	movs	r2, #2
	dy=abs(y2-y1);
 8002ab8:	f1ba 0f00 	cmp.w	sl, #0
	int err=dx/2;
 8002abc:	fb9b f6f2 	sdiv	r6, fp, r2
	dy=abs(y2-y1);
 8002ac0:	bfb8      	it	lt
 8002ac2:	f1ca 0a00 	rsblt	sl, sl, #0
	int ystep;
	if(y1<y2) ystep=1;
	else ystep=-1;
 8002ac6:	429d      	cmp	r5, r3
 8002ac8:	bf34      	ite	cc
 8002aca:	2301      	movcc	r3, #1
 8002acc:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
 8002ad0:	9301      	str	r3, [sp, #4]
	for(;x1<=x2;x1++)
 8002ad2:	42bc      	cmp	r4, r7
 8002ad4:	d902      	bls.n	8002adc <TFT_DrawLine+0x70>
		{
			y1 += ystep;
			err=dx;
		}
	}
}
 8002ad6:	b003      	add	sp, #12
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(steep) TFT_DrawPixel(y1,x1,color);
 8002adc:	45c8      	cmp	r8, r9
 8002ade:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002ae0:	bfcb      	itete	gt
 8002ae2:	4628      	movgt	r0, r5
		else TFT_DrawPixel(x1,y1,color);
 8002ae4:	4629      	movle	r1, r5
		if(steep) TFT_DrawPixel(y1,x1,color);
 8002ae6:	4621      	movgt	r1, r4
		else TFT_DrawPixel(x1,y1,color);
 8002ae8:	4620      	movle	r0, r4
 8002aea:	f7ff ffb3 	bl	8002a54 <TFT_DrawPixel>
		if(err<0)
 8002aee:	ebb6 060a 	subs.w	r6, r6, sl
	for(;x1<=x2;x1++)
 8002af2:	f104 0401 	add.w	r4, r4, #1
			y1 += ystep;
 8002af6:	bf44      	itt	mi
 8002af8:	9b01      	ldrmi	r3, [sp, #4]
			err=dx;
 8002afa:	465e      	movmi	r6, fp
	for(;x1<=x2;x1++)
 8002afc:	b2a4      	uxth	r4, r4
			y1 += ystep;
 8002afe:	bf44      	itt	mi
 8002b00:	18ed      	addmi	r5, r5, r3
 8002b02:	b2ad      	uxthmi	r5, r5
 8002b04:	e7e5      	b.n	8002ad2 <TFT_DrawLine+0x66>
	...

08002b08 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002b08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			  HAL_RNG_GetRandomNumber(&hrng)%272,
	          (uint16_t)HAL_RNG_GetRandomNumber(&hrng)|0xFF000000);
			osDelay(10);
	  }*/

	TFT_FillScreen(0);
 8002b0c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

	for(int i=0;i<1000;i++)
	    {
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8002b10:	4d1e      	ldr	r5, [pc, #120]	; (8002b8c <StartDefaultTask+0x84>)
 8002b12:	f44f 7788 	mov.w	r7, #272	; 0x110
 8002b16:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
	TFT_FillScreen(0);
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	f7ff ff8a 	bl	8002a34 <TFT_FillScreen>
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8002b20:	4628      	mov	r0, r5
 8002b22:	f7fe fe03 	bl	800172c <HAL_RNG_GetRandomNumber>
 8002b26:	4680      	mov	r8, r0
	              HAL_RNG_GetRandomNumber(&hrng)%272,
 8002b28:	4628      	mov	r0, r5
 8002b2a:	f7fe fdff 	bl	800172c <HAL_RNG_GetRandomNumber>
 8002b2e:	4681      	mov	r9, r0
	              HAL_RNG_GetRandomNumber(&hrng)%480,
 8002b30:	4628      	mov	r0, r5
 8002b32:	f7fe fdfb 	bl	800172c <HAL_RNG_GetRandomNumber>
 8002b36:	4682      	mov	sl, r0
	              HAL_RNG_GetRandomNumber(&hrng)%272,
 8002b38:	4628      	mov	r0, r5
 8002b3a:	f7fe fdf7 	bl	800172c <HAL_RNG_GetRandomNumber>
 8002b3e:	4683      	mov	fp, r0
	              HAL_RNG_GetRandomNumber(&hrng)|0xFF000000);
 8002b40:	4628      	mov	r0, r5
 8002b42:	f7fe fdf3 	bl	800172c <HAL_RNG_GetRandomNumber>
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8002b46:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8002b4a:	fbb8 fef6 	udiv	lr, r8, r6
 8002b4e:	fbbb f3f7 	udiv	r3, fp, r7
 8002b52:	fbba f2f6 	udiv	r2, sl, r6
 8002b56:	fbb9 f1f7 	udiv	r1, r9, r7
 8002b5a:	9000      	str	r0, [sp, #0]
 8002b5c:	fb07 b313 	mls	r3, r7, r3, fp
 8002b60:	fb06 801e 	mls	r0, r6, lr, r8
 8002b64:	fb06 a212 	mls	r2, r6, r2, sl
 8002b68:	fb07 9111 	mls	r1, r7, r1, r9
 8002b6c:	f7ff ff7e 	bl	8002a6c <TFT_DrawLine>
	      osDelay(10);
 8002b70:	200a      	movs	r0, #10
 8002b72:	f7ff f83b 	bl	8001bec <osDelay>
	for(int i=0;i<1000;i++)
 8002b76:	3c01      	subs	r4, #1
 8002b78:	d1d2      	bne.n	8002b20 <StartDefaultTask+0x18>
	    }

	TFT_FillScreen(0);
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f7ff ff5a 	bl	8002a34 <TFT_FillScreen>

	vTaskDelete( NULL );
 8002b80:	4620      	mov	r0, r4

  /* USER CODE END 5 */ 
}
 8002b82:	b003      	add	sp, #12
 8002b84:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	vTaskDelete( NULL );
 8002b88:	f7ff bcb4 	b.w	80024f4 <vTaskDelete>
 8002b8c:	20006418 	.word	0x20006418

08002b90 <SystemClock_Config>:
{
 8002b90:	b570      	push	{r4, r5, r6, lr}
 8002b92:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b94:	2230      	movs	r2, #48	; 0x30
 8002b96:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b98:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9a:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b9c:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b9e:	f000 fbef 	bl	8003380 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba2:	2214      	movs	r2, #20
 8002ba4:	2100      	movs	r1, #0
 8002ba6:	a802      	add	r0, sp, #8
 8002ba8:	f000 fbea 	bl	8003380 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002bac:	2100      	movs	r1, #0
 8002bae:	2284      	movs	r2, #132	; 0x84
 8002bb0:	a813      	add	r0, sp, #76	; 0x4c
 8002bb2:	f000 fbe5 	bl	8003380 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb6:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bb8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bbc:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002bc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002bc4:	641a      	str	r2, [r3, #64]	; 0x40
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <SystemClock_Config+0xc0>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bdc:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bde:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002be2:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002be4:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002bee:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bf0:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002bf2:	2319      	movs	r3, #25
 8002bf4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8002bf6:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8002bfa:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c00:	f7fe f83a 	bl	8000c78 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c04:	f7fe f800 	bl	8000c08 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c08:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c0a:	2107      	movs	r1, #7
 8002c0c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c10:	2300      	movs	r3, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c12:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c14:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c16:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c1a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c20:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002c22:	f7fe fa13 	bl	800104c <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8002c26:	4b0b      	ldr	r3, [pc, #44]	; (8002c54 <SystemClock_Config+0xc4>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c28:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8002c2a:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8002c2c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c2e:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8002c30:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8002c32:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002c34:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8002c36:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8002c38:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c3a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8002c3e:	961e      	str	r6, [sp, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8002c40:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c42:	f7fe faa3 	bl	800118c <HAL_RCCEx_PeriphCLKConfig>
}
 8002c46:	b034      	add	sp, #208	; 0xd0
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	bf00      	nop
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	40007000 	.word	0x40007000
 8002c54:	00200008 	.word	0x00200008

08002c58 <main>:
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b098      	sub	sp, #96	; 0x60

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	2210      	movs	r2, #16
  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002c60:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8002c62:	a80b      	add	r0, sp, #44	; 0x2c
 8002c64:	f000 fb8c 	bl	8003380 <memset>
  HAL_MPU_Disable();
 8002c68:	f7fd fd0e 	bl	8000688 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8002c6c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002c70:	2301      	movs	r3, #1
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002c72:	a80b      	add	r0, sp, #44	; 0x2c
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8002c74:	920c      	str	r2, [sp, #48]	; 0x30
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8002c76:	2215      	movs	r2, #21
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8002c78:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8002c7c:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002c80:	2203      	movs	r2, #3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8002c82:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8002c86:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002c8a:	f88d 402d 	strb.w	r4, [sp, #45]	; 0x2d
  MPU_InitStruct.SubRegionDisable = 0x0;
 8002c8e:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8002c92:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8002c96:	f88d 4038 	strb.w	r4, [sp, #56]	; 0x38
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8002c9a:	f88d 4039 	strb.w	r4, [sp, #57]	; 0x39
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8002c9e:	f88d 403b 	strb.w	r4, [sp, #59]	; 0x3b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002ca2:	f7fd fd13 	bl	80006cc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8002ca6:	2004      	movs	r0, #4
 8002ca8:	f7fd fcfe 	bl	80006a8 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8002cac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cb0:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002cb4:	4bb5      	ldr	r3, [pc, #724]	; (8002f8c <main+0x334>)
 8002cb6:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002cba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cbe:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002cc2:	695a      	ldr	r2, [r3, #20]
 8002cc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002cc8:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002cca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002cce:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002cd2:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002cd6:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8002cda:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002cde:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ce2:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ce6:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8002cea:	07a5      	lsls	r5, r4, #30
 8002cec:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002cee:	ea02 0e06 	and.w	lr, r2, r6
 8002cf2:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002cf4:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002cf6:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 8002cfa:	3901      	subs	r1, #1
 8002cfc:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002d00:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8002d04:	1c4f      	adds	r7, r1, #1
 8002d06:	d1f6      	bne.n	8002cf6 <main+0x9e>
 8002d08:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8002d0a:	f112 0f20 	cmn.w	r2, #32
 8002d0e:	d1ee      	bne.n	8002cee <main+0x96>
 8002d10:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002d14:	695a      	ldr	r2, [r3, #20]
 8002d16:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002d1a:	615a      	str	r2, [r3, #20]
 8002d1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002d20:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8002d24:	f7fd fc20 	bl	8000568 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d28:	2400      	movs	r4, #0
  SystemClock_Config();
 8002d2a:	f7ff ff31 	bl	8002b90 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d2e:	2214      	movs	r2, #20
 8002d30:	2100      	movs	r1, #0
 8002d32:	a80b      	add	r0, sp, #44	; 0x2c
 8002d34:	f000 fb24 	bl	8003380 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d38:	4b95      	ldr	r3, [pc, #596]	; (8002f90 <main+0x338>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8002d3a:	2108      	movs	r1, #8
 8002d3c:	4895      	ldr	r0, [pc, #596]	; (8002f94 <main+0x33c>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d40:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d42:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002d46:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d4a:	f042 0210 	orr.w	r2, r2, #16
  hltdc.Instance = LTDC;
 8002d4e:	4d92      	ldr	r5, [pc, #584]	; (8002f98 <main+0x340>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002d50:	4e92      	ldr	r6, [pc, #584]	; (8002f9c <main+0x344>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002d52:	631a      	str	r2, [r3, #48]	; 0x30
 8002d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d56:	f002 0210 	and.w	r2, r2, #16
 8002d5a:	9200      	str	r2, [sp, #0]
 8002d5c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d60:	f042 0201 	orr.w	r2, r2, #1
 8002d64:	631a      	str	r2, [r3, #48]	; 0x30
 8002d66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d68:	f002 0201 	and.w	r2, r2, #1
 8002d6c:	9201      	str	r2, [sp, #4]
 8002d6e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d76:	631a      	str	r2, [r3, #48]	; 0x30
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8002d7e:	9202      	str	r2, [sp, #8]
 8002d80:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002d82:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
 8002d8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d8c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8002d90:	9203      	str	r2, [sp, #12]
 8002d92:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d96:	f042 0208 	orr.w	r2, r2, #8
 8002d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d9e:	f002 0208 	and.w	r2, r2, #8
 8002da2:	9204      	str	r2, [sp, #16]
 8002da4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8002da6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002dac:	631a      	str	r2, [r3, #48]	; 0x30
 8002dae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002db0:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8002db4:	9205      	str	r2, [sp, #20]
 8002db6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002db8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dba:	f042 0220 	orr.w	r2, r2, #32
 8002dbe:	631a      	str	r2, [r3, #48]	; 0x30
 8002dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dc2:	f002 0220 	and.w	r2, r2, #32
 8002dc6:	9206      	str	r2, [sp, #24]
 8002dc8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002dca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
 8002dd2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dd4:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8002dd8:	9207      	str	r2, [sp, #28]
 8002dda:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002ddc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
 8002de4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002de6:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8002dea:	9208      	str	r2, [sp, #32]
 8002dec:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df0:	f042 0204 	orr.w	r2, r2, #4
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
 8002df6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002df8:	f002 0204 	and.w	r2, r2, #4
 8002dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8002dfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e02:	f042 0202 	orr.w	r2, r2, #2
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8002e08:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	930a      	str	r3, [sp, #40]	; 0x28
 8002e12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8002e14:	f7fd fd6c 	bl	80008f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	4860      	ldr	r0, [pc, #384]	; (8002fa0 <main+0x348>)
 8002e1e:	f7fd fd67 	bl	80008f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8002e22:	2201      	movs	r2, #1
 8002e24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e28:	485d      	ldr	r0, [pc, #372]	; (8002fa0 <main+0x348>)
 8002e2a:	f7fd fd61 	bl	80008f0 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e2e:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e30:	a90b      	add	r1, sp, #44	; 0x2c
 8002e32:	4858      	ldr	r0, [pc, #352]	; (8002f94 <main+0x33c>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e34:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e36:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3a:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e3c:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8002e3e:	f7fd fc6d 	bl	800071c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e42:	a90b      	add	r1, sp, #44	; 0x2c
 8002e44:	4856      	ldr	r0, [pc, #344]	; (8002fa0 <main+0x348>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002e46:	970b      	str	r7, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e48:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4c:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e50:	f7fd fc64 	bl	800071c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e54:	a90b      	add	r1, sp, #44	; 0x2c
 8002e56:	4852      	ldr	r0, [pc, #328]	; (8002fa0 <main+0x348>)
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002e58:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e5c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e62:	970e      	str	r7, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002e64:	f7fd fc5a 	bl	800071c <HAL_GPIO_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8002e68:	2234      	movs	r2, #52	; 0x34
 8002e6a:	4621      	mov	r1, r4
 8002e6c:	a80b      	add	r0, sp, #44	; 0x2c
 8002e6e:	f000 fa87 	bl	8003380 <memset>
  hltdc.Instance = LTDC;
 8002e72:	4b4c      	ldr	r3, [pc, #304]	; (8002fa4 <main+0x34c>)
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002e74:	4628      	mov	r0, r5
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8002e76:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8002e78:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002e7a:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 8002e7c:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8002e80:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8002e84:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002e88:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 40;
 8002e8c:	2328      	movs	r3, #40	; 0x28
 8002e8e:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 9;
 8002e90:	2309      	movs	r3, #9
 8002e92:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8002e94:	2335      	movs	r3, #53	; 0x35
 8002e96:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8002e98:	230b      	movs	r3, #11
 8002e9a:	622b      	str	r3, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8002e9c:	f240 2315 	movw	r3, #533	; 0x215
 8002ea0:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8002ea2:	f240 131b 	movw	r3, #283	; 0x11b
 8002ea6:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8002ea8:	f240 2335 	movw	r3, #565	; 0x235
 8002eac:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8002eae:	f240 131d 	movw	r3, #285	; 0x11d
 8002eb2:	632b      	str	r3, [r5, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8002eb4:	f7fd fdf2 	bl	8000a9c <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 8002eb8:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 8002eba:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 8002ebe:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ec2:	4628      	mov	r0, r5
  pLayerCfg.Alpha = 255;
 8002ec4:	9110      	str	r1, [sp, #64]	; 0x40
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ec6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 8002eca:	920c      	str	r2, [sp, #48]	; 0x30
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002ecc:	9112      	str	r1, [sp, #72]	; 0x48
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ece:	2107      	movs	r1, #7
  pLayerCfg.ImageWidth = 480;
 8002ed0:	9215      	str	r2, [sp, #84]	; 0x54
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ed2:	4622      	mov	r2, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002ed4:	9113      	str	r1, [sp, #76]	; 0x4c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ed6:	a90b      	add	r1, sp, #44	; 0x2c
  pLayerCfg.WindowY1 = 272;
 8002ed8:	930e      	str	r3, [sp, #56]	; 0x38
  pLayerCfg.ImageHeight = 272;
 8002eda:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.WindowX0 = 0;
 8002edc:	940b      	str	r4, [sp, #44]	; 0x2c
  pLayerCfg.WindowY0 = 0;
 8002ede:	940d      	str	r4, [sp, #52]	; 0x34
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002ee0:	940f      	str	r4, [sp, #60]	; 0x3c
  pLayerCfg.Alpha0 = 0;
 8002ee2:	9411      	str	r4, [sp, #68]	; 0x44
  pLayerCfg.FBStartAdress = 0;
 8002ee4:	9414      	str	r4, [sp, #80]	; 0x50
  pLayerCfg.Backcolor.Blue = 0;
 8002ee6:	f88d 405c 	strb.w	r4, [sp, #92]	; 0x5c
  pLayerCfg.Backcolor.Green = 0;
 8002eea:	f88d 405d 	strb.w	r4, [sp, #93]	; 0x5d
  pLayerCfg.Backcolor.Red = 0;
 8002eee:	f88d 405e 	strb.w	r4, [sp, #94]	; 0x5e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8002ef2:	f7fd fe3f 	bl	8000b74 <HAL_LTDC_ConfigLayer>
  hrng.Instance = RNG;
 8002ef6:	4b2c      	ldr	r3, [pc, #176]	; (8002fa8 <main+0x350>)
 8002ef8:	482c      	ldr	r0, [pc, #176]	; (8002fac <main+0x354>)
 8002efa:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002efc:	f7fe fbd0 	bl	80016a0 <HAL_RNG_Init>
  MX_FATFS_Init();
 8002f00:	f7ff fd7c 	bl	80029fc <MX_FATFS_Init>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8002f04:	221c      	movs	r2, #28
 8002f06:	4621      	mov	r1, r4
 8002f08:	a80b      	add	r0, sp, #44	; 0x2c
 8002f0a:	f000 fa39 	bl	8003380 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <main+0x358>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f10:	2204      	movs	r2, #4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002f12:	a90b      	add	r1, sp, #44	; 0x2c
 8002f14:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002f16:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002f18:	60f2      	str	r2, [r6, #12]
  SdramTiming.SelfRefreshTime = 4;
 8002f1a:	920d      	str	r2, [sp, #52]	; 0x34
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8002f1c:	6174      	str	r4, [r6, #20]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002f1e:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8002f20:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8002f24:	62b4      	str	r4, [r6, #40]	; 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8002f26:	970b      	str	r7, [sp, #44]	; 0x2c
  SdramTiming.WriteRecoveryTime = 2;
 8002f28:	970f      	str	r7, [sp, #60]	; 0x3c
  SdramTiming.RPDelay = 2;
 8002f2a:	9710      	str	r7, [sp, #64]	; 0x40
  SdramTiming.RCDDelay = 2;
 8002f2c:	9711      	str	r7, [sp, #68]	; 0x44
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002f2e:	e886 0018 	stmia.w	r6, {r3, r4}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002f32:	2310      	movs	r3, #16
 8002f34:	6133      	str	r3, [r6, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 8002f36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3a:	61b3      	str	r3, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8002f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f40:	6233      	str	r3, [r6, #32]
  SdramTiming.ExitSelfRefreshDelay = 6;
 8002f42:	2306      	movs	r3, #6
 8002f44:	930c      	str	r3, [sp, #48]	; 0x30
  SdramTiming.RowCycleDelay = 6;
 8002f46:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8002f48:	f7fe fbfb 	bl	8001742 <HAL_SDRAM_Init>
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002f4c:	4819      	ldr	r0, [pc, #100]	; (8002fb4 <main+0x35c>)
 8002f4e:	4b1a      	ldr	r3, [pc, #104]	; (8002fb8 <main+0x360>)
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8002f50:	f8c0 800c 	str.w	r8, [r0, #12]
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8002f54:	6003      	str	r3, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002f56:	230c      	movs	r3, #12
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8002f58:	6104      	str	r4, [r0, #16]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8002f5a:	6083      	str	r3, [r0, #8]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8002f5c:	6187      	str	r7, [r0, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8002f5e:	61c4      	str	r4, [r0, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8002f60:	6204      	str	r4, [r0, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8002f62:	6344      	str	r4, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8002f64:	f7fd fcc9 	bl	80008fa <HAL_HCD_Init>
  MX_LIBJPEG_Init();
 8002f68:	f7ff fd62 	bl	8002a30 <MX_LIBJPEG_Init>
  MT48LC4M32B2_Init(&hsdram1);
 8002f6c:	4630      	mov	r0, r6
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f6e:	4e13      	ldr	r6, [pc, #76]	; (8002fbc <main+0x364>)
  MT48LC4M32B2_Init(&hsdram1);
 8002f70:	f7ff fcec 	bl	800294c <MT48LC4M32B2_Init>
  HAL_LTDC_SetAddress(&hltdc, LCD_FRAME_BUFFER,0);
 8002f74:	4622      	mov	r2, r4
 8002f76:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8002f7a:	4628      	mov	r0, r5
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f7c:	ad0b      	add	r5, sp, #44	; 0x2c
  HAL_LTDC_SetAddress(&hltdc, LCD_FRAME_BUFFER,0);
 8002f7e:	f7fd fe22 	bl	8000bc6 <HAL_LTDC_SetAddress>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8002f82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f86:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8002f8a:	e019      	b.n	8002fc0 <main+0x368>
 8002f8c:	e000ed00 	.word	0xe000ed00
 8002f90:	40023800 	.word	0x40023800
 8002f94:	40022800 	.word	0x40022800
 8002f98:	200060ac 	.word	0x200060ac
 8002f9c:	20006428 	.word	0x20006428
 8002fa0:	40022000 	.word	0x40022000
 8002fa4:	40016800 	.word	0x40016800
 8002fa8:	50060800 	.word	0x50060800
 8002fac:	20006418 	.word	0x20006418
 8002fb0:	a0000140 	.word	0xa0000140
 8002fb4:	20006154 	.word	0x20006154
 8002fb8:	40040000 	.word	0x40040000
 8002fbc:	080033a8 	.word	0x080033a8
 8002fc0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8002fc4:	4621      	mov	r1, r4
 8002fc6:	a80b      	add	r0, sp, #44	; 0x2c
 8002fc8:	f7fe fde8 	bl	8001b9c <osThreadCreate>
 8002fcc:	4b02      	ldr	r3, [pc, #8]	; (8002fd8 <main+0x380>)
 8002fce:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8002fd0:	f7fe fddf 	bl	8001b92 <osKernelStart>
 8002fd4:	e7fe      	b.n	8002fd4 <main+0x37c>
 8002fd6:	bf00      	nop
 8002fd8:	200060a8 	.word	0x200060a8

08002fdc <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b0e      	ldr	r3, [pc, #56]	; (8003018 <HAL_MspInit+0x3c>)
{
 8002fde:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40
 8002fee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ff0:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8002ff4:	9200      	str	r2, [sp, #0]
 8002ff6:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ffa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ffe:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003000:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800300c:	f7fd faee 	bl	80005ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003010:	b003      	add	sp, #12
 8003012:	f85d fb04 	ldr.w	pc, [sp], #4
 8003016:	bf00      	nop
 8003018:	40023800 	.word	0x40023800

0800301c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800301c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800301e:	2214      	movs	r2, #20
{
 8003020:	b08a      	sub	sp, #40	; 0x28
 8003022:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003024:	2100      	movs	r1, #0
 8003026:	eb0d 0002 	add.w	r0, sp, r2
 800302a:	f000 f9a9 	bl	8003380 <memset>
  if(hltdc->Instance==LTDC)
 800302e:	6822      	ldr	r2, [r4, #0]
 8003030:	4b30      	ldr	r3, [pc, #192]	; (80030f4 <HAL_LTDC_MspInit+0xd8>)
 8003032:	429a      	cmp	r2, r3
 8003034:	d15c      	bne.n	80030f0 <HAL_LTDC_MspInit+0xd4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003036:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7 
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800303a:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800303c:	250e      	movs	r5, #14
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800303e:	a905      	add	r1, sp, #20
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003040:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003042:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003044:	482c      	ldr	r0, [pc, #176]	; (80030f8 <HAL_LTDC_MspInit+0xdc>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003046:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800304a:	645a      	str	r2, [r3, #68]	; 0x44
 800304c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800304e:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 8003052:	9200      	str	r2, [sp, #0]
 8003054:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003056:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003058:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305c:	631a      	str	r2, [r3, #48]	; 0x30
 800305e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003060:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8003064:	9201      	str	r2, [sp, #4]
 8003066:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800306a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800306e:	631a      	str	r2, [r3, #48]	; 0x30
 8003070:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003072:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8003076:	9202      	str	r2, [sp, #8]
 8003078:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800307a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800307c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
 8003082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003084:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8003088:	9203      	str	r2, [sp, #12]
 800308a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800308c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800308e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
 8003094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003096:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003098:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800309c:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800309e:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80030a0:	9304      	str	r3, [sp, #16]
 80030a2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
 80030a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030a8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80030aa:	f7fd fb37 	bl	800071c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 80030ae:	23f7      	movs	r3, #247	; 0xf7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80030b0:	a905      	add	r1, sp, #20
 80030b2:	4812      	ldr	r0, [pc, #72]	; (80030fc <HAL_LTDC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 80030b4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030b6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ba:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030bc:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 80030be:	f7fd fb2d 	bl	800071c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030c6:	a905      	add	r1, sp, #20
 80030c8:	480d      	ldr	r0, [pc, #52]	; (8003100 <HAL_LTDC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80030cc:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80030d0:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030d4:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80030d6:	f7fd fb21 	bl	800071c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80030da:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030de:	a905      	add	r1, sp, #20
 80030e0:	4808      	ldr	r0, [pc, #32]	; (8003104 <HAL_LTDC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 80030e2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030e4:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e6:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030e8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80030ea:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80030ec:	f7fd fb16 	bl	800071c <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80030f0:	b00a      	add	sp, #40	; 0x28
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	40016800 	.word	0x40016800
 80030f8:	40022400 	.word	0x40022400
 80030fc:	40022800 	.word	0x40022800
 8003100:	40021800 	.word	0x40021800
 8003104:	40022000 	.word	0x40022000

08003108 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8003108:	6802      	ldr	r2, [r0, #0]
{
 800310a:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <HAL_RNG_MspInit+0x24>)
 800310e:	429a      	cmp	r2, r3
 8003110:	d109      	bne.n	8003126 <HAL_RNG_MspInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RNG_MspInit+0x28>)
 8003114:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003116:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800311a:	635a      	str	r2, [r3, #52]	; 0x34
 800311c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003122:	9301      	str	r3, [sp, #4]
 8003124:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8003126:	b002      	add	sp, #8
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	50060800 	.word	0x50060800
 8003130:	40023800 	.word	0x40023800

08003134 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8003134:	b510      	push	{r4, lr}
 8003136:	b088      	sub	sp, #32
 8003138:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800313a:	2214      	movs	r2, #20
 800313c:	2100      	movs	r1, #0
 800313e:	a803      	add	r0, sp, #12
 8003140:	f000 f91e 	bl	8003380 <memset>
  if(hhcd->Instance==USB_OTG_HS)
 8003144:	6822      	ldr	r2, [r4, #0]
 8003146:	4b13      	ldr	r3, [pc, #76]	; (8003194 <HAL_HCD_MspInit+0x60>)
 8003148:	429a      	cmp	r2, r3
 800314a:	d120      	bne.n	800318e <HAL_HCD_MspInit+0x5a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800314c:	4c12      	ldr	r4, [pc, #72]	; (8003198 <HAL_HCD_MspInit+0x64>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	4813      	ldr	r0, [pc, #76]	; (800319c <HAL_HCD_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003150:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003152:	f043 0302 	orr.w	r3, r3, #2
 8003156:	6323      	str	r3, [r4, #48]	; 0x30
 8003158:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8003162:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003166:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003168:	2302      	movs	r3, #2
 800316a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800316c:	2303      	movs	r3, #3
 800316e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003170:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003172:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8003176:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003178:	f7fd fad0 	bl	800071c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800317c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800317e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003182:	6323      	str	r3, [r4, #48]	; 0x30
 8003184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003186:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800318a:	9302      	str	r3, [sp, #8]
 800318c:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 800318e:	b008      	add	sp, #32
 8003190:	bd10      	pop	{r4, pc}
 8003192:	bf00      	nop
 8003194:	40040000 	.word	0x40040000
 8003198:	40023800 	.word	0x40023800
 800319c:	40020400 	.word	0x40020400

080031a0 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80031a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031a2:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80031a4:	2214      	movs	r2, #20
 80031a6:	2100      	movs	r1, #0
 80031a8:	a801      	add	r0, sp, #4
 80031aa:	f000 f8e9 	bl	8003380 <memset>
  if (FMC_Initialized) {
 80031ae:	4b2a      	ldr	r3, [pc, #168]	; (8003258 <HAL_SDRAM_MspInit+0xb8>)
 80031b0:	681e      	ldr	r6, [r3, #0]
 80031b2:	2e00      	cmp	r6, #0
 80031b4:	d14d      	bne.n	8003252 <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80031b6:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b8:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ba:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031bc:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80031be:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c0:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80031c2:	4b26      	ldr	r3, [pc, #152]	; (800325c <HAL_SDRAM_MspInit+0xbc>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031c4:	4826      	ldr	r0, [pc, #152]	; (8003260 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80031c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	639a      	str	r2, [r3, #56]	; 0x38
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d0:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80031d2:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031d6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031d8:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80031de:	f64f 7383 	movw	r3, #65411	; 0xff83
 80031e2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031e4:	f7fd fa9a 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 80031e8:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031ec:	a901      	add	r1, sp, #4
 80031ee:	481d      	ldr	r0, [pc, #116]	; (8003264 <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 80031f0:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031f2:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031f4:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031f6:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80031f8:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80031fa:	f7fd fa8f 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 80031fe:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003202:	a901      	add	r1, sp, #4
 8003204:	4818      	ldr	r0, [pc, #96]	; (8003268 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8003206:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320a:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800320c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800320e:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003210:	f7fd fa84 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8003214:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003218:	a901      	add	r1, sp, #4
 800321a:	4814      	ldr	r0, [pc, #80]	; (800326c <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800321c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003222:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003224:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003226:	f7fd fa79 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800322a:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800322c:	a901      	add	r1, sp, #4
 800322e:	4810      	ldr	r0, [pc, #64]	; (8003270 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8003230:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003232:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003234:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003236:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003238:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800323a:	f7fd fa6f 	bl	800071c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800323e:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003240:	a901      	add	r1, sp, #4
 8003242:	480c      	ldr	r0, [pc, #48]	; (8003274 <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003244:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800324a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800324c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800324e:	f7fd fa65 	bl	800071c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003252:	b007      	add	sp, #28
 8003254:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003256:	bf00      	nop
 8003258:	20003fec 	.word	0x20003fec
 800325c:	40023800 	.word	0x40023800
 8003260:	40021000 	.word	0x40021000
 8003264:	40021800 	.word	0x40021800
 8003268:	40020c00 	.word	0x40020c00
 800326c:	40021400 	.word	0x40021400
 8003270:	40021c00 	.word	0x40021c00
 8003274:	40020800 	.word	0x40020800

08003278 <NMI_Handler>:
 8003278:	4770      	bx	lr

0800327a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800327a:	e7fe      	b.n	800327a <HardFault_Handler>

0800327c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800327c:	e7fe      	b.n	800327c <MemManage_Handler>

0800327e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800327e:	e7fe      	b.n	800327e <BusFault_Handler>

08003280 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003280:	e7fe      	b.n	8003280 <UsageFault_Handler>

08003282 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003282:	4770      	bx	lr

08003284 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003284:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003286:	f7fd f97b 	bl	8000580 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800328a:	f7ff fb4f 	bl	800292c <xTaskGetSchedulerState>
 800328e:	2801      	cmp	r0, #1
 8003290:	d003      	beq.n	800329a <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8003296:	f7fe bdcd 	b.w	8001e34 <xPortSysTickHandler>
 800329a:	bd08      	pop	{r3, pc}

0800329c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800329c:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <SystemInit+0x18>)
 800329e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032a2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80032a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032ae:	609a      	str	r2, [r3, #8]
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	e000ed00 	.word	0xe000ed00

080032b8 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 80032b8:	4b02      	ldr	r3, [pc, #8]	; (80032c4 <USER_status+0xc>)
 80032ba:	2201      	movs	r2, #1
 80032bc:	701a      	strb	r2, [r3, #0]
    return Stat;
 80032be:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	20000010 	.word	0x20000010

080032c8 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 80032c8:	2000      	movs	r0, #0
 80032ca:	4770      	bx	lr

080032cc <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 80032cc:	2001      	movs	r0, #1
 80032ce:	4770      	bx	lr

080032d0 <USER_read>:
 80032d0:	2000      	movs	r0, #0
 80032d2:	4770      	bx	lr

080032d4 <USER_initialize>:
 80032d4:	4b02      	ldr	r3, [pc, #8]	; (80032e0 <USER_initialize+0xc>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	701a      	strb	r2, [r3, #0]
 80032da:	7818      	ldrb	r0, [r3, #0]
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	20000010 	.word	0x20000010

080032e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800331c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80032e8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80032ea:	e003      	b.n	80032f4 <LoopCopyDataInit>

080032ec <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80032ec:	4b0c      	ldr	r3, [pc, #48]	; (8003320 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80032ee:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80032f0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80032f2:	3104      	adds	r1, #4

080032f4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80032f4:	480b      	ldr	r0, [pc, #44]	; (8003324 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80032f6:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80032f8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80032fa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80032fc:	d3f6      	bcc.n	80032ec <CopyDataInit>
  ldr  r2, =_sbss
 80032fe:	4a0b      	ldr	r2, [pc, #44]	; (800332c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003300:	e002      	b.n	8003308 <LoopFillZerobss>

08003302 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003302:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003304:	f842 3b04 	str.w	r3, [r2], #4

08003308 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800330a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800330c:	d3f9      	bcc.n	8003302 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800330e:	f7ff ffc5 	bl	800329c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003312:	f000 f811 	bl	8003338 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003316:	f7ff fc9f 	bl	8002c58 <main>
  bx  lr    
 800331a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800331c:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8003320:	080033f8 	.word	0x080033f8
  ldr  r0, =_sdata
 8003324:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003328:	20000028 	.word	0x20000028
  ldr  r2, =_sbss
 800332c:	20000028 	.word	0x20000028
  ldr  r3, = _ebss
 8003330:	2000645c 	.word	0x2000645c

08003334 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003334:	e7fe      	b.n	8003334 <ADC_IRQHandler>
	...

08003338 <__libc_init_array>:
 8003338:	b570      	push	{r4, r5, r6, lr}
 800333a:	4e0d      	ldr	r6, [pc, #52]	; (8003370 <__libc_init_array+0x38>)
 800333c:	4c0d      	ldr	r4, [pc, #52]	; (8003374 <__libc_init_array+0x3c>)
 800333e:	1ba4      	subs	r4, r4, r6
 8003340:	10a4      	asrs	r4, r4, #2
 8003342:	2500      	movs	r5, #0
 8003344:	42a5      	cmp	r5, r4
 8003346:	d109      	bne.n	800335c <__libc_init_array+0x24>
 8003348:	4e0b      	ldr	r6, [pc, #44]	; (8003378 <__libc_init_array+0x40>)
 800334a:	4c0c      	ldr	r4, [pc, #48]	; (800337c <__libc_init_array+0x44>)
 800334c:	f000 f820 	bl	8003390 <_init>
 8003350:	1ba4      	subs	r4, r4, r6
 8003352:	10a4      	asrs	r4, r4, #2
 8003354:	2500      	movs	r5, #0
 8003356:	42a5      	cmp	r5, r4
 8003358:	d105      	bne.n	8003366 <__libc_init_array+0x2e>
 800335a:	bd70      	pop	{r4, r5, r6, pc}
 800335c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003360:	4798      	blx	r3
 8003362:	3501      	adds	r5, #1
 8003364:	e7ee      	b.n	8003344 <__libc_init_array+0xc>
 8003366:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800336a:	4798      	blx	r3
 800336c:	3501      	adds	r5, #1
 800336e:	e7f2      	b.n	8003356 <__libc_init_array+0x1e>
 8003370:	080033f0 	.word	0x080033f0
 8003374:	080033f0 	.word	0x080033f0
 8003378:	080033f0 	.word	0x080033f0
 800337c:	080033f4 	.word	0x080033f4

08003380 <memset>:
 8003380:	4402      	add	r2, r0
 8003382:	4603      	mov	r3, r0
 8003384:	4293      	cmp	r3, r2
 8003386:	d100      	bne.n	800338a <memset+0xa>
 8003388:	4770      	bx	lr
 800338a:	f803 1b01 	strb.w	r1, [r3], #1
 800338e:	e7f9      	b.n	8003384 <memset+0x4>

08003390 <_init>:
 8003390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003392:	bf00      	nop
 8003394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003396:	bc08      	pop	{r3}
 8003398:	469e      	mov	lr, r3
 800339a:	4770      	bx	lr

0800339c <_fini>:
 800339c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800339e:	bf00      	nop
 80033a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033a2:	bc08      	pop	{r3}
 80033a4:	469e      	mov	lr, r3
 80033a6:	4770      	bx	lr
