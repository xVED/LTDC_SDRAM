
LTDC_SDRAM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087b8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ae4  08008988  08008988  00018988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800946c  0800946c  0001946c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009474  08009474  00019474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009478  08009478  00019478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000270  20000000  0800947c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00007b24  20000270  080096ec  00020270  2**3
                  ALLOC
  8 ._user_heap_stack 00006000  20007d94  080096ec  00027d94  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037c07  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000074c9  00000000  00000000  00057ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000142b2  00000000  00000000  0005f370  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001918  00000000  00000000  00073628  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00002140  00000000  00000000  00074f40  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ec4e  00000000  00000000  00077080  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a4eb  00000000  00000000  00085cce  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000901b9  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00004ff0  00000000  00000000  00090238  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000270 	.word	0x20000270
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008970 	.word	0x08008970

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000274 	.word	0x20000274
 800020c:	08008970 	.word	0x08008970

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b97a 	b.w	80005bc <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	468c      	mov	ip, r1
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	9e08      	ldr	r6, [sp, #32]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d151      	bne.n	8000394 <__udivmoddi4+0xb4>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d96d      	bls.n	80003d2 <__udivmoddi4+0xf2>
 80002f6:	fab2 fe82 	clz	lr, r2
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d00b      	beq.n	8000318 <__udivmoddi4+0x38>
 8000300:	f1ce 0c20 	rsb	ip, lr, #32
 8000304:	fa01 f50e 	lsl.w	r5, r1, lr
 8000308:	fa20 fc0c 	lsr.w	ip, r0, ip
 800030c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000310:	ea4c 0c05 	orr.w	ip, ip, r5
 8000314:	fa00 f40e 	lsl.w	r4, r0, lr
 8000318:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800031c:	0c25      	lsrs	r5, r4, #16
 800031e:	fbbc f8fa 	udiv	r8, ip, sl
 8000322:	fa1f f987 	uxth.w	r9, r7
 8000326:	fb0a cc18 	mls	ip, sl, r8, ip
 800032a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800032e:	fb08 f309 	mul.w	r3, r8, r9
 8000332:	42ab      	cmp	r3, r5
 8000334:	d90a      	bls.n	800034c <__udivmoddi4+0x6c>
 8000336:	19ed      	adds	r5, r5, r7
 8000338:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800033c:	f080 8123 	bcs.w	8000586 <__udivmoddi4+0x2a6>
 8000340:	42ab      	cmp	r3, r5
 8000342:	f240 8120 	bls.w	8000586 <__udivmoddi4+0x2a6>
 8000346:	f1a8 0802 	sub.w	r8, r8, #2
 800034a:	443d      	add	r5, r7
 800034c:	1aed      	subs	r5, r5, r3
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb5 f0fa 	udiv	r0, r5, sl
 8000354:	fb0a 5510 	mls	r5, sl, r0, r5
 8000358:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800035c:	fb00 f909 	mul.w	r9, r0, r9
 8000360:	45a1      	cmp	r9, r4
 8000362:	d909      	bls.n	8000378 <__udivmoddi4+0x98>
 8000364:	19e4      	adds	r4, r4, r7
 8000366:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036a:	f080 810a 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800036e:	45a1      	cmp	r9, r4
 8000370:	f240 8107 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000374:	3802      	subs	r0, #2
 8000376:	443c      	add	r4, r7
 8000378:	eba4 0409 	sub.w	r4, r4, r9
 800037c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000380:	2100      	movs	r1, #0
 8000382:	2e00      	cmp	r6, #0
 8000384:	d061      	beq.n	800044a <__udivmoddi4+0x16a>
 8000386:	fa24 f40e 	lsr.w	r4, r4, lr
 800038a:	2300      	movs	r3, #0
 800038c:	6034      	str	r4, [r6, #0]
 800038e:	6073      	str	r3, [r6, #4]
 8000390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000394:	428b      	cmp	r3, r1
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0xc8>
 8000398:	2e00      	cmp	r6, #0
 800039a:	d054      	beq.n	8000446 <__udivmoddi4+0x166>
 800039c:	2100      	movs	r1, #0
 800039e:	e886 0021 	stmia.w	r6, {r0, r5}
 80003a2:	4608      	mov	r0, r1
 80003a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a8:	fab3 f183 	clz	r1, r3
 80003ac:	2900      	cmp	r1, #0
 80003ae:	f040 808e 	bne.w	80004ce <__udivmoddi4+0x1ee>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xdc>
 80003b6:	4282      	cmp	r2, r0
 80003b8:	f200 80fa 	bhi.w	80005b0 <__udivmoddi4+0x2d0>
 80003bc:	1a84      	subs	r4, r0, r2
 80003be:	eb65 0503 	sbc.w	r5, r5, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	46ac      	mov	ip, r5
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d03f      	beq.n	800044a <__udivmoddi4+0x16a>
 80003ca:	e886 1010 	stmia.w	r6, {r4, ip}
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	b912      	cbnz	r2, 80003da <__udivmoddi4+0xfa>
 80003d4:	2701      	movs	r7, #1
 80003d6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003da:	fab7 fe87 	clz	lr, r7
 80003de:	f1be 0f00 	cmp.w	lr, #0
 80003e2:	d134      	bne.n	800044e <__udivmoddi4+0x16e>
 80003e4:	1beb      	subs	r3, r5, r7
 80003e6:	0c3a      	lsrs	r2, r7, #16
 80003e8:	fa1f fc87 	uxth.w	ip, r7
 80003ec:	2101      	movs	r1, #1
 80003ee:	fbb3 f8f2 	udiv	r8, r3, r2
 80003f2:	0c25      	lsrs	r5, r4, #16
 80003f4:	fb02 3318 	mls	r3, r2, r8, r3
 80003f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003fc:	fb0c f308 	mul.w	r3, ip, r8
 8000400:	42ab      	cmp	r3, r5
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x134>
 8000404:	19ed      	adds	r5, r5, r7
 8000406:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x132>
 800040c:	42ab      	cmp	r3, r5
 800040e:	f200 80d1 	bhi.w	80005b4 <__udivmoddi4+0x2d4>
 8000412:	4680      	mov	r8, r0
 8000414:	1aed      	subs	r5, r5, r3
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb5 f0f2 	udiv	r0, r5, r2
 800041c:	fb02 5510 	mls	r5, r2, r0, r5
 8000420:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000424:	fb0c fc00 	mul.w	ip, ip, r0
 8000428:	45a4      	cmp	ip, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x15c>
 800042c:	19e4      	adds	r4, r4, r7
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x15a>
 8000434:	45a4      	cmp	ip, r4
 8000436:	f200 80b8 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 040c 	sub.w	r4, r4, ip
 8000440:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000444:	e79d      	b.n	8000382 <__udivmoddi4+0xa2>
 8000446:	4631      	mov	r1, r6
 8000448:	4630      	mov	r0, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	f1ce 0420 	rsb	r4, lr, #32
 8000452:	fa05 f30e 	lsl.w	r3, r5, lr
 8000456:	fa07 f70e 	lsl.w	r7, r7, lr
 800045a:	fa20 f804 	lsr.w	r8, r0, r4
 800045e:	0c3a      	lsrs	r2, r7, #16
 8000460:	fa25 f404 	lsr.w	r4, r5, r4
 8000464:	ea48 0803 	orr.w	r8, r8, r3
 8000468:	fbb4 f1f2 	udiv	r1, r4, r2
 800046c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000470:	fb02 4411 	mls	r4, r2, r1, r4
 8000474:	fa1f fc87 	uxth.w	ip, r7
 8000478:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800047c:	fb01 f30c 	mul.w	r3, r1, ip
 8000480:	42ab      	cmp	r3, r5
 8000482:	fa00 f40e 	lsl.w	r4, r0, lr
 8000486:	d909      	bls.n	800049c <__udivmoddi4+0x1bc>
 8000488:	19ed      	adds	r5, r5, r7
 800048a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 800048e:	f080 808a 	bcs.w	80005a6 <__udivmoddi4+0x2c6>
 8000492:	42ab      	cmp	r3, r5
 8000494:	f240 8087 	bls.w	80005a6 <__udivmoddi4+0x2c6>
 8000498:	3902      	subs	r1, #2
 800049a:	443d      	add	r5, r7
 800049c:	1aeb      	subs	r3, r5, r3
 800049e:	fa1f f588 	uxth.w	r5, r8
 80004a2:	fbb3 f0f2 	udiv	r0, r3, r2
 80004a6:	fb02 3310 	mls	r3, r2, r0, r3
 80004aa:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80004ae:	fb00 f30c 	mul.w	r3, r0, ip
 80004b2:	42ab      	cmp	r3, r5
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x1e6>
 80004b6:	19ed      	adds	r5, r5, r7
 80004b8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004bc:	d26f      	bcs.n	800059e <__udivmoddi4+0x2be>
 80004be:	42ab      	cmp	r3, r5
 80004c0:	d96d      	bls.n	800059e <__udivmoddi4+0x2be>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443d      	add	r5, r7
 80004c6:	1aeb      	subs	r3, r5, r3
 80004c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004cc:	e78f      	b.n	80003ee <__udivmoddi4+0x10e>
 80004ce:	f1c1 0720 	rsb	r7, r1, #32
 80004d2:	fa22 f807 	lsr.w	r8, r2, r7
 80004d6:	408b      	lsls	r3, r1
 80004d8:	fa05 f401 	lsl.w	r4, r5, r1
 80004dc:	ea48 0303 	orr.w	r3, r8, r3
 80004e0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004e4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004e8:	40fd      	lsrs	r5, r7
 80004ea:	ea4e 0e04 	orr.w	lr, lr, r4
 80004ee:	fbb5 f9fc 	udiv	r9, r5, ip
 80004f2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004f6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004fa:	fa1f f883 	uxth.w	r8, r3
 80004fe:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000502:	fb09 f408 	mul.w	r4, r9, r8
 8000506:	42ac      	cmp	r4, r5
 8000508:	fa02 f201 	lsl.w	r2, r2, r1
 800050c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000510:	d908      	bls.n	8000524 <__udivmoddi4+0x244>
 8000512:	18ed      	adds	r5, r5, r3
 8000514:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000518:	d243      	bcs.n	80005a2 <__udivmoddi4+0x2c2>
 800051a:	42ac      	cmp	r4, r5
 800051c:	d941      	bls.n	80005a2 <__udivmoddi4+0x2c2>
 800051e:	f1a9 0902 	sub.w	r9, r9, #2
 8000522:	441d      	add	r5, r3
 8000524:	1b2d      	subs	r5, r5, r4
 8000526:	fa1f fe8e 	uxth.w	lr, lr
 800052a:	fbb5 f0fc 	udiv	r0, r5, ip
 800052e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000532:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000536:	fb00 f808 	mul.w	r8, r0, r8
 800053a:	45a0      	cmp	r8, r4
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x26e>
 800053e:	18e4      	adds	r4, r4, r3
 8000540:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000544:	d229      	bcs.n	800059a <__udivmoddi4+0x2ba>
 8000546:	45a0      	cmp	r8, r4
 8000548:	d927      	bls.n	800059a <__udivmoddi4+0x2ba>
 800054a:	3802      	subs	r0, #2
 800054c:	441c      	add	r4, r3
 800054e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000552:	eba4 0408 	sub.w	r4, r4, r8
 8000556:	fba0 8902 	umull	r8, r9, r0, r2
 800055a:	454c      	cmp	r4, r9
 800055c:	46c6      	mov	lr, r8
 800055e:	464d      	mov	r5, r9
 8000560:	d315      	bcc.n	800058e <__udivmoddi4+0x2ae>
 8000562:	d012      	beq.n	800058a <__udivmoddi4+0x2aa>
 8000564:	b156      	cbz	r6, 800057c <__udivmoddi4+0x29c>
 8000566:	ebba 030e 	subs.w	r3, sl, lr
 800056a:	eb64 0405 	sbc.w	r4, r4, r5
 800056e:	fa04 f707 	lsl.w	r7, r4, r7
 8000572:	40cb      	lsrs	r3, r1
 8000574:	431f      	orrs	r7, r3
 8000576:	40cc      	lsrs	r4, r1
 8000578:	6037      	str	r7, [r6, #0]
 800057a:	6074      	str	r4, [r6, #4]
 800057c:	2100      	movs	r1, #0
 800057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000582:	4618      	mov	r0, r3
 8000584:	e6f8      	b.n	8000378 <__udivmoddi4+0x98>
 8000586:	4690      	mov	r8, r2
 8000588:	e6e0      	b.n	800034c <__udivmoddi4+0x6c>
 800058a:	45c2      	cmp	sl, r8
 800058c:	d2ea      	bcs.n	8000564 <__udivmoddi4+0x284>
 800058e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000592:	eb69 0503 	sbc.w	r5, r9, r3
 8000596:	3801      	subs	r0, #1
 8000598:	e7e4      	b.n	8000564 <__udivmoddi4+0x284>
 800059a:	4628      	mov	r0, r5
 800059c:	e7d7      	b.n	800054e <__udivmoddi4+0x26e>
 800059e:	4640      	mov	r0, r8
 80005a0:	e791      	b.n	80004c6 <__udivmoddi4+0x1e6>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e7be      	b.n	8000524 <__udivmoddi4+0x244>
 80005a6:	4601      	mov	r1, r0
 80005a8:	e778      	b.n	800049c <__udivmoddi4+0x1bc>
 80005aa:	3802      	subs	r0, #2
 80005ac:	443c      	add	r4, r7
 80005ae:	e745      	b.n	800043c <__udivmoddi4+0x15c>
 80005b0:	4608      	mov	r0, r1
 80005b2:	e708      	b.n	80003c6 <__udivmoddi4+0xe6>
 80005b4:	f1a8 0802 	sub.w	r8, r8, #2
 80005b8:	443d      	add	r5, r7
 80005ba:	e72b      	b.n	8000414 <__udivmoddi4+0x134>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005c0:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c2:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <HAL_InitTick+0x3c>)
{
 80005c4:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005c6:	4a0e      	ldr	r2, [pc, #56]	; (8000600 <HAL_InitTick+0x40>)
 80005c8:	7818      	ldrb	r0, [r3, #0]
 80005ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ce:	fbb3 f3f0 	udiv	r3, r3, r0
 80005d2:	6810      	ldr	r0, [r2, #0]
 80005d4:	fbb0 f0f3 	udiv	r0, r0, r3
 80005d8:	f000 f89e 	bl	8000718 <HAL_SYSTICK_Config>
 80005dc:	4604      	mov	r4, r0
 80005de:	b958      	cbnz	r0, 80005f8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005e0:	2d0f      	cmp	r5, #15
 80005e2:	d809      	bhi.n	80005f8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005e4:	4602      	mov	r2, r0
 80005e6:	4629      	mov	r1, r5
 80005e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80005ec:	f000 f84e 	bl	800068c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005f0:	4b04      	ldr	r3, [pc, #16]	; (8000604 <HAL_InitTick+0x44>)
 80005f2:	4620      	mov	r0, r4
 80005f4:	601d      	str	r5, [r3, #0]
 80005f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80005f8:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80005fa:	bd38      	pop	{r3, r4, r5, pc}
 80005fc:	20000000 	.word	0x20000000
 8000600:	20000050 	.word	0x20000050
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_Init>:
{
 8000608:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800060a:	2003      	movs	r0, #3
 800060c:	f000 f82c 	bl	8000668 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000610:	200f      	movs	r0, #15
 8000612:	f7ff ffd5 	bl	80005c0 <HAL_InitTick>
  HAL_MspInit();
 8000616:	f005 fefb 	bl	8006410 <HAL_MspInit>
}
 800061a:	2000      	movs	r0, #0
 800061c:	bd08      	pop	{r3, pc}
	...

08000620 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000620:	4a03      	ldr	r2, [pc, #12]	; (8000630 <HAL_IncTick+0x10>)
 8000622:	4b04      	ldr	r3, [pc, #16]	; (8000634 <HAL_IncTick+0x14>)
 8000624:	6811      	ldr	r1, [r2, #0]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	440b      	add	r3, r1
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	20004030 	.word	0x20004030
 8000634:	20000000 	.word	0x20000000

08000638 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_GetTick+0x8>)
 800063a:	6818      	ldr	r0, [r3, #0]
}
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20004030 	.word	0x20004030

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b538      	push	{r3, r4, r5, lr}
 8000646:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000648:	f7ff fff6 	bl	8000638 <HAL_GetTick>
 800064c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800064e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000650:	bf1e      	ittt	ne
 8000652:	4b04      	ldrne	r3, [pc, #16]	; (8000664 <HAL_Delay+0x20>)
 8000654:	781b      	ldrbne	r3, [r3, #0]
 8000656:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000658:	f7ff ffee 	bl	8000638 <HAL_GetTick>
 800065c:	1b40      	subs	r0, r0, r5
 800065e:	4284      	cmp	r4, r0
 8000660:	d8fa      	bhi.n	8000658 <HAL_Delay+0x14>
  {
  }
}
 8000662:	bd38      	pop	{r3, r4, r5, pc}
 8000664:	20000000 	.word	0x20000000

08000668 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000668:	4a07      	ldr	r2, [pc, #28]	; (8000688 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800066a:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800066c:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800066e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000672:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000676:	041b      	lsls	r3, r3, #16
 8000678:	0c1b      	lsrs	r3, r3, #16
 800067a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800067e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8000682:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000684:	60d3      	str	r3, [r2, #12]
 8000686:	4770      	bx	lr
 8000688:	e000ed00 	.word	0xe000ed00

0800068c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800068c:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <HAL_NVIC_SetPriority+0x68>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	68dc      	ldr	r4, [r3, #12]
 8000692:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000696:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800069c:	2b04      	cmp	r3, #4
 800069e:	bf28      	it	cs
 80006a0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a4:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a8:	bf8c      	ite	hi
 80006aa:	3c03      	subhi	r4, #3
 80006ac:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006ae:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80006b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 80006b8:	ea01 0103 	and.w	r1, r1, r3
 80006bc:	fa01 f104 	lsl.w	r1, r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006c0:	fa05 f404 	lsl.w	r4, r5, r4
 80006c4:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80006c8:	ea02 0204 	and.w	r2, r2, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006cc:	ea42 0201 	orr.w	r2, r2, r1
 80006d0:	ea4f 1202 	mov.w	r2, r2, lsl #4
  if ((int32_t)(IRQn) >= 0)
 80006d4:	db07      	blt.n	80006e6 <HAL_NVIC_SetPriority+0x5a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80006da:	b2d2      	uxtb	r2, r2
 80006dc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80006e0:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
 80006e4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e6:	f000 000f 	and.w	r0, r0, #15
 80006ea:	b2d2      	uxtb	r2, r2
 80006ec:	4b02      	ldr	r3, [pc, #8]	; (80006f8 <HAL_NVIC_SetPriority+0x6c>)
 80006ee:	541a      	strb	r2, [r3, r0]
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	bf00      	nop
 80006f4:	e000ed00 	.word	0xe000ed00
 80006f8:	e000ed14 	.word	0xe000ed14

080006fc <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80006fc:	2800      	cmp	r0, #0
 80006fe:	db08      	blt.n	8000712 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000700:	0942      	lsrs	r2, r0, #5
 8000702:	2301      	movs	r3, #1
 8000704:	f000 001f 	and.w	r0, r0, #31
 8000708:	fa03 f000 	lsl.w	r0, r3, r0
 800070c:	4b01      	ldr	r3, [pc, #4]	; (8000714 <HAL_NVIC_EnableIRQ+0x18>)
 800070e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000712:	4770      	bx	lr
 8000714:	e000e100 	.word	0xe000e100

08000718 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000718:	3801      	subs	r0, #1
 800071a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800071e:	d20a      	bcs.n	8000736 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_SYSTICK_Config+0x24>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000722:	21f0      	movs	r1, #240	; 0xf0
 8000724:	4a06      	ldr	r2, [pc, #24]	; (8000740 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000726:	6058      	str	r0, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000728:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800072a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800072e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000730:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000732:	601a      	str	r2, [r3, #0]
 8000734:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000736:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	e000e010 	.word	0xe000e010
 8000740:	e000ed00 	.word	0xe000ed00

08000744 <HAL_MPU_Disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000744:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_MPU_Disable+0x18>)
 800074a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 800074c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000750:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000752:	2200      	movs	r2, #0
 8000754:	4b02      	ldr	r3, [pc, #8]	; (8000760 <HAL_MPU_Disable+0x1c>)
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000ed00 	.word	0xe000ed00
 8000760:	e000ed90 	.word	0xe000ed90

08000764 <HAL_MPU_Enable>:
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000764:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_MPU_Enable+0x1c>)
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000766:	f040 0001 	orr.w	r0, r0, #1
 800076a:	4b06      	ldr	r3, [pc, #24]	; (8000784 <HAL_MPU_Enable+0x20>)
 800076c:	6058      	str	r0, [r3, #4]
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800076e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8000770:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000774:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000776:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800077a:	f3bf 8f6f 	isb	sy
 800077e:	4770      	bx	lr
 8000780:	e000ed00 	.word	0xe000ed00
 8000784:	e000ed90 	.word	0xe000ed90

08000788 <HAL_MPU_ConfigRegion>:
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000788:	7843      	ldrb	r3, [r0, #1]
 800078a:	4a12      	ldr	r2, [pc, #72]	; (80007d4 <HAL_MPU_ConfigRegion+0x4c>)
{
 800078c:	b510      	push	{r4, lr}
  MPU->RNR = MPU_Init->Number;
 800078e:	6093      	str	r3, [r2, #8]

  if ((MPU_Init->Enable) != RESET)
 8000790:	7801      	ldrb	r1, [r0, #0]
 8000792:	b1d9      	cbz	r1, 80007cc <HAL_MPU_ConfigRegion+0x44>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8000794:	6843      	ldr	r3, [r0, #4]
 8000796:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000798:	7ac3      	ldrb	r3, [r0, #11]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800079a:	7b04      	ldrb	r4, [r0, #12]
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800079c:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800079e:	ea43 7304 	orr.w	r3, r3, r4, lsl #28
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007a2:	430b      	orrs	r3, r1
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80007a4:	7a81      	ldrb	r1, [r0, #10]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007a6:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80007aa:	7b41      	ldrb	r1, [r0, #13]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007ac:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80007b0:	7b81      	ldrb	r1, [r0, #14]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007b2:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80007b6:	7bc1      	ldrb	r1, [r0, #15]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80007bc:	7a41      	ldrb	r1, [r0, #9]
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80007be:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80007c2:	7a01      	ldrb	r1, [r0, #8]
 80007c4:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80007c8:	6113      	str	r3, [r2, #16]
 80007ca:	bd10      	pop	{r4, pc}
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
  }
  else
  {
    MPU->RBAR = 0x00;
 80007cc:	60d1      	str	r1, [r2, #12]
    MPU->RASR = 0x00;
 80007ce:	6111      	str	r1, [r2, #16]
 80007d0:	bd10      	pop	{r4, pc}
 80007d2:	bf00      	nop
 80007d4:	e000ed90 	.word	0xe000ed90

080007d8 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 80007d8:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 80007da:	6804      	ldr	r4, [r0, #0]
 80007dc:	9d04      	ldr	r5, [sp, #16]
 80007de:	6c66      	ldr	r6, [r4, #68]	; 0x44
 80007e0:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80007e4:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 80007e8:	4333      	orrs	r3, r6
 80007ea:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80007ec:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 80007ee:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 80007f0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80007f4:	d130      	bne.n	8000858 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80007f6:	6886      	ldr	r6, [r0, #8]
 80007f8:	b11e      	cbz	r6, 8000802 <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80007fa:	2e01      	cmp	r6, #1
 80007fc:	d103      	bne.n	8000806 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80007fe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8000802:	63a1      	str	r1, [r4, #56]	; 0x38
 8000804:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8000806:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8000808:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800080c:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8000810:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8000812:	d107      	bne.n	8000824 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8000814:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8000816:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8000818:	02c9      	lsls	r1, r1, #11
 800081a:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 800081e:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8000822:	e7ee      	b.n	8000802 <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8000824:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8000826:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800082a:	d10a      	bne.n	8000842 <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 800082c:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 800082e:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8000830:	029b      	lsls	r3, r3, #10
      tmp1 = (tmp1 >> 31U);
 8000832:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8000834:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8000838:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
 800083c:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8000840:	e7df      	b.n	8000802 <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8000842:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8000844:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8000846:	0209      	lsls	r1, r1, #8
      tmp1 = (tmp1 >> 28U);
 8000848:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800084a:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 800084e:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
 8000852:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8000856:	e7d4      	b.n	8000802 <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8000858:	60e1      	str	r1, [r4, #12]
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <HAL_DMA2D_Init>:
{
 800085c:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 800085e:	4604      	mov	r4, r0
 8000860:	b330      	cbz	r0, 80008b0 <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000862:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8000866:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800086a:	b91b      	cbnz	r3, 8000874 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 800086c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8000870:	f005 fdee 	bl	8006450 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000874:	6822      	ldr	r2, [r4, #0]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000876:	2302      	movs	r3, #2
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000878:	6861      	ldr	r1, [r4, #4]
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800087a:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800087c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000880:	6813      	ldr	r3, [r2, #0]
 8000882:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000886:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000888:	68a1      	ldr	r1, [r4, #8]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800088a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800088c:	6b53      	ldr	r3, [r2, #52]	; 0x34
 800088e:	f023 0307 	bic.w	r3, r3, #7
 8000892:	430b      	orrs	r3, r1
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000894:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000896:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000898:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800089a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800089e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80008a2:	430b      	orrs	r3, r1
 80008a4:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008a6:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80008a8:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80008aa:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 80008ae:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80008b0:	2001      	movs	r0, #1
}
 80008b2:	bd10      	pop	{r4, pc}

080008b4 <HAL_DMA2D_Start>:
{
 80008b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 80008b6:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
{
 80008ba:	4605      	mov	r5, r0
  __HAL_LOCK(hdma2d);
 80008bc:	2c01      	cmp	r4, #1
 80008be:	f04f 0402 	mov.w	r4, #2
 80008c2:	d00f      	beq.n	80008e4 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80008c4:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 80008c8:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80008ca:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 80008cc:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80008d0:	9400      	str	r4, [sp, #0]
 80008d2:	f7ff ff81 	bl	80007d8 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 80008d6:	682a      	ldr	r2, [r5, #0]
  return HAL_OK;
 80008d8:	2000      	movs	r0, #0
  __HAL_DMA2D_ENABLE(hdma2d);
 80008da:	6813      	ldr	r3, [r2, #0]
 80008dc:	4333      	orrs	r3, r6
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	b002      	add	sp, #8
 80008e2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 80008e4:	4620      	mov	r0, r4
 80008e6:	e7fb      	b.n	80008e0 <HAL_DMA2D_Start+0x2c>

080008e8 <HAL_DMA2D_PollForTransfer>:
  __IO uint32_t isrflags = 0x0U;
 80008e8:	2300      	movs	r3, #0
{
 80008ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 80008ec:	9301      	str	r3, [sp, #4]
{
 80008ee:	4604      	mov	r4, r0
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80008f0:	6803      	ldr	r3, [r0, #0]
{
 80008f2:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	07db      	lsls	r3, r3, #31
 80008f8:	d417      	bmi.n	800092a <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80008fa:	6822      	ldr	r2, [r4, #0]
 80008fc:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80008fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000900:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8000902:	069e      	lsls	r6, r3, #26
 8000904:	d506      	bpl.n	8000914 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8000906:	f7ff fe97 	bl	8000638 <HAL_GetTick>
 800090a:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800090c:	6823      	ldr	r3, [r4, #0]
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	06d2      	lsls	r2, r2, #27
 8000912:	d543      	bpl.n	800099c <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8000914:	6823      	ldr	r3, [r4, #0]
 8000916:	2212      	movs	r2, #18
  __HAL_UNLOCK(hdma2d);
 8000918:	2000      	movs	r0, #0
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 800091a:	609a      	str	r2, [r3, #8]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800091c:	2301      	movs	r3, #1
  __HAL_UNLOCK(hdma2d);
 800091e:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000922:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8000926:	b002      	add	sp, #8
 8000928:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 800092a:	f7ff fe85 	bl	8000638 <HAL_GetTick>
 800092e:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8000930:	6823      	ldr	r3, [r4, #0]
 8000932:	685a      	ldr	r2, [r3, #4]
 8000934:	0792      	lsls	r2, r2, #30
 8000936:	d4e0      	bmi.n	80008fa <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8000938:	685a      	ldr	r2, [r3, #4]
 800093a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800093c:	9a01      	ldr	r2, [sp, #4]
 800093e:	f012 0f21 	tst.w	r2, #33	; 0x21
 8000942:	d017      	beq.n	8000974 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000944:	9a01      	ldr	r2, [sp, #4]
 8000946:	0695      	lsls	r5, r2, #26
 8000948:	d503      	bpl.n	8000952 <HAL_DMA2D_PollForTransfer+0x6a>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800094a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800094c:	f042 0202 	orr.w	r2, r2, #2
 8000950:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000952:	9a01      	ldr	r2, [sp, #4]
 8000954:	07d0      	lsls	r0, r2, #31
 8000956:	d503      	bpl.n	8000960 <HAL_DMA2D_PollForTransfer+0x78>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000958:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800095a:	f042 0201 	orr.w	r2, r2, #1
 800095e:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000960:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8000962:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000964:	2304      	movs	r3, #4
        return HAL_ERROR;
 8000966:	2001      	movs	r0, #1
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8000968:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 800096c:	2300      	movs	r3, #0
 800096e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 8000972:	e7d8      	b.n	8000926 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8000974:	1c69      	adds	r1, r5, #1
 8000976:	d0dc      	beq.n	8000932 <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8000978:	f7ff fe5e 	bl	8000638 <HAL_GetTick>
 800097c:	1b80      	subs	r0, r0, r6
 800097e:	4285      	cmp	r5, r0
 8000980:	d301      	bcc.n	8000986 <HAL_DMA2D_PollForTransfer+0x9e>
 8000982:	2d00      	cmp	r5, #0
 8000984:	d1d4      	bne.n	8000930 <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8000986:	6be3      	ldr	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000988:	2003      	movs	r0, #3
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800098a:	f043 0320 	orr.w	r3, r3, #32
 800098e:	63e3      	str	r3, [r4, #60]	; 0x3c
          __HAL_UNLOCK(hdma2d);
 8000990:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8000992:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8000996:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 800099a:	e7c4      	b.n	8000926 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800099c:	685a      	ldr	r2, [r3, #4]
 800099e:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 80009a0:	9a01      	ldr	r2, [sp, #4]
 80009a2:	f012 0f29 	tst.w	r2, #41	; 0x29
 80009a6:	d016      	beq.n	80009d6 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80009a8:	9a01      	ldr	r2, [sp, #4]
 80009aa:	0716      	lsls	r6, r2, #28
 80009ac:	d503      	bpl.n	80009b6 <HAL_DMA2D_PollForTransfer+0xce>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80009ae:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80009b0:	f042 0204 	orr.w	r2, r2, #4
 80009b4:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80009b6:	9a01      	ldr	r2, [sp, #4]
 80009b8:	0695      	lsls	r5, r2, #26
 80009ba:	d503      	bpl.n	80009c4 <HAL_DMA2D_PollForTransfer+0xdc>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80009bc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80009be:	f042 0202 	orr.w	r2, r2, #2
 80009c2:	63e2      	str	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80009c4:	9a01      	ldr	r2, [sp, #4]
 80009c6:	07d0      	lsls	r0, r2, #31
 80009c8:	d503      	bpl.n	80009d2 <HAL_DMA2D_PollForTransfer+0xea>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80009ca:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 80009cc:	f042 0201 	orr.w	r2, r2, #1
 80009d0:	63e2      	str	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80009d2:	2229      	movs	r2, #41	; 0x29
 80009d4:	e7c5      	b.n	8000962 <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 80009d6:	1c69      	adds	r1, r5, #1
 80009d8:	d099      	beq.n	800090e <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80009da:	f7ff fe2d 	bl	8000638 <HAL_GetTick>
 80009de:	1b80      	subs	r0, r0, r6
 80009e0:	4285      	cmp	r5, r0
 80009e2:	d3d0      	bcc.n	8000986 <HAL_DMA2D_PollForTransfer+0x9e>
 80009e4:	2d00      	cmp	r5, #0
 80009e6:	d191      	bne.n	800090c <HAL_DMA2D_PollForTransfer+0x24>
 80009e8:	e7cd      	b.n	8000986 <HAL_DMA2D_PollForTransfer+0x9e>
	...

080009ec <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80009ec:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	f04f 0302 	mov.w	r3, #2
{
 80009f6:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hdma2d);
 80009f8:	d037      	beq.n	8000a6a <HAL_DMA2D_ConfigLayer+0x7e>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80009fa:	010e      	lsls	r6, r1, #4
  __HAL_LOCK(hdma2d);
 80009fc:	2201      	movs	r2, #1
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80009fe:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000a02:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 8000a04:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8000a08:	4f1c      	ldr	r7, [pc, #112]	; (8000a7c <HAL_DMA2D_ConfigLayer+0x90>)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8000a0a:	69dd      	ldr	r5, [r3, #28]
 8000a0c:	6a1a      	ldr	r2, [r3, #32]
 8000a0e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8000a10:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000a14:	3d09      	subs	r5, #9
 8000a16:	6803      	ldr	r3, [r0, #0]
 8000a18:	2d01      	cmp	r5, #1
 8000a1a:	d80f      	bhi.n	8000a3c <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8000a1c:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 8000a20:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000a24:	b969      	cbnz	r1, 8000a42 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000a26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a28:	4039      	ands	r1, r7
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000a2e:	6982      	ldr	r2, [r0, #24]
 8000a30:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8000a32:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8000a34:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
 8000a3a:	e010      	b.n	8000a5e <HAL_DMA2D_ConfigLayer+0x72>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8000a3c:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8000a40:	b1a9      	cbz	r1, 8000a6e <HAL_DMA2D_ConfigLayer+0x82>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000a42:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000a44:	4406      	add	r6, r0
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000a46:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8000a48:	ea01 0107 	and.w	r1, r1, r7
 8000a4c:	ea42 0201 	orr.w	r2, r2, r1
 8000a50:	61da      	str	r2, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8000a52:	69b2      	ldr	r2, [r6, #24]
 8000a54:	611a      	str	r2, [r3, #16]
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8000a56:	d802      	bhi.n	8000a5e <HAL_DMA2D_ConfigLayer+0x72>
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8000a58:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
 8000a5c:	621c      	str	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8000a64:	2300      	movs	r3, #0
 8000a66:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8000a6e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000a70:	4039      	ands	r1, r7
 8000a72:	430a      	orrs	r2, r1
 8000a74:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8000a76:	6982      	ldr	r2, [r0, #24]
 8000a78:	619a      	str	r2, [r3, #24]
 8000a7a:	e7f0      	b.n	8000a5e <HAL_DMA2D_ConfigLayer+0x72>
 8000a7c:	00fcfff0 	.word	0x00fcfff0

08000a80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a84:	680b      	ldr	r3, [r1, #0]
{
 8000a86:	b085      	sub	sp, #20
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000c4c <HAL_GPIO_Init+0x1cc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a8c:	9301      	str	r3, [sp, #4]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000a8e:	2300      	movs	r3, #0
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a90:	4a6c      	ldr	r2, [pc, #432]	; (8000c44 <HAL_GPIO_Init+0x1c4>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000a92:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 8000c50 <HAL_GPIO_Init+0x1d0>
    ioposition = ((uint32_t)0x01) << position;
 8000a96:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a98:	9d01      	ldr	r5, [sp, #4]
    ioposition = ((uint32_t)0x01) << position;
 8000a9a:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a9c:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000a9e:	42ac      	cmp	r4, r5
 8000aa0:	f040 80b6 	bne.w	8000c10 <HAL_GPIO_Init+0x190>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000aa4:	684c      	ldr	r4, [r1, #4]
 8000aa6:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000aaa:	f024 0c10 	bic.w	ip, r4, #16
 8000aae:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000ab2:	2e01      	cmp	r6, #1
 8000ab4:	d812      	bhi.n	8000adc <HAL_GPIO_Init+0x5c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ab6:	2603      	movs	r6, #3
        temp = GPIOx->OSPEEDR; 
 8000ab8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000aba:	fa06 f60e 	lsl.w	r6, r6, lr
 8000abe:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 8000ac2:	68ce      	ldr	r6, [r1, #12]
 8000ac4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ac8:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 8000aca:	6086      	str	r6, [r0, #8]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000acc:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp = GPIOx->OTYPER;
 8000ad0:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad2:	409e      	lsls	r6, r3
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ad4:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ad8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 8000ada:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000adc:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000ade:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ae0:	f1bc 0f02 	cmp.w	ip, #2
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ae4:	fa06 f60e 	lsl.w	r6, r6, lr
 8000ae8:	ea6f 0606 	mvn.w	r6, r6
 8000aec:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000af0:	688f      	ldr	r7, [r1, #8]
 8000af2:	fa07 f70e 	lsl.w	r7, r7, lr
 8000af6:	ea47 070a 	orr.w	r7, r7, sl
      GPIOx->PUPDR = temp;
 8000afa:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000afc:	d116      	bne.n	8000b2c <HAL_GPIO_Init+0xac>
        temp = GPIOx->AFR[position >> 3];
 8000afe:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b02:	f003 0b07 	and.w	fp, r3, #7
 8000b06:	f04f 0c0f 	mov.w	ip, #15
 8000b0a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8000b0e:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8000b12:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000b16:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000b1a:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000b1e:	690f      	ldr	r7, [r1, #16]
 8000b20:	fa07 f70b 	lsl.w	r7, r7, fp
 8000b24:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3] = temp;
 8000b28:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8000b2c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000b2e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000b30:	f004 0703 	and.w	r7, r4, #3
 8000b34:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000b38:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 8000b3c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b3e:	00e6      	lsls	r6, r4, #3
 8000b40:	d566      	bpl.n	8000c10 <HAL_GPIO_Init+0x190>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b42:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b46:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b4a:	f003 0e03 	and.w	lr, r3, #3
 8000b4e:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 8000b56:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b5a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5e:	f8c8 6044 	str.w	r6, [r8, #68]	; 0x44
 8000b62:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
 8000b66:	f8d8 6044 	ldr.w	r6, [r8, #68]	; 0x44
 8000b6a:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000b6e:	9603      	str	r6, [sp, #12]
 8000b70:	9e03      	ldr	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b72:	fa0c f60e 	lsl.w	r6, ip, lr
        temp = SYSCFG->EXTICR[position >> 2];
 8000b76:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000b7a:	ea2a 0c06 	bic.w	ip, sl, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000b7e:	4e32      	ldr	r6, [pc, #200]	; (8000c48 <HAL_GPIO_Init+0x1c8>)
 8000b80:	42b0      	cmp	r0, r6
 8000b82:	d04c      	beq.n	8000c1e <HAL_GPIO_Init+0x19e>
 8000b84:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b88:	42b0      	cmp	r0, r6
 8000b8a:	d04a      	beq.n	8000c22 <HAL_GPIO_Init+0x1a2>
 8000b8c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b90:	42b0      	cmp	r0, r6
 8000b92:	d048      	beq.n	8000c26 <HAL_GPIO_Init+0x1a6>
 8000b94:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000b98:	42b0      	cmp	r0, r6
 8000b9a:	d046      	beq.n	8000c2a <HAL_GPIO_Init+0x1aa>
 8000b9c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000ba0:	42b0      	cmp	r0, r6
 8000ba2:	d044      	beq.n	8000c2e <HAL_GPIO_Init+0x1ae>
 8000ba4:	4548      	cmp	r0, r9
 8000ba6:	d044      	beq.n	8000c32 <HAL_GPIO_Init+0x1b2>
 8000ba8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000bac:	42b0      	cmp	r0, r6
 8000bae:	d042      	beq.n	8000c36 <HAL_GPIO_Init+0x1b6>
 8000bb0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bb4:	42b0      	cmp	r0, r6
 8000bb6:	d040      	beq.n	8000c3a <HAL_GPIO_Init+0x1ba>
 8000bb8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bbc:	42b0      	cmp	r0, r6
 8000bbe:	d03e      	beq.n	8000c3e <HAL_GPIO_Init+0x1be>
 8000bc0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000bc4:	42b0      	cmp	r0, r6
 8000bc6:	bf14      	ite	ne
 8000bc8:	260a      	movne	r6, #10
 8000bca:	2609      	moveq	r6, #9
 8000bcc:	fa06 f60e 	lsl.w	r6, r6, lr
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bd0:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bd4:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bd8:	60be      	str	r6, [r7, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bda:	ea6f 0705 	mvn.w	r7, r5
        temp = EXTI->IMR;
 8000bde:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000be0:	bf0c      	ite	eq
 8000be2:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000be4:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000be6:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        EXTI->IMR = temp;
 8000bea:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000bec:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8000bee:	bf0c      	ite	eq
 8000bf0:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000bf2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000bf4:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        EXTI->EMR = temp;
 8000bf8:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000bfa:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000bfc:	bf0c      	ite	eq
 8000bfe:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000c00:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c02:	02a4      	lsls	r4, r4, #10
        EXTI->RTSR = temp;
 8000c04:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000c06:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8000c08:	bf54      	ite	pl
 8000c0a:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000c0c:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000c0e:	60d6      	str	r6, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8000c10:	3301      	adds	r3, #1
 8000c12:	2b10      	cmp	r3, #16
 8000c14:	f47f af3f 	bne.w	8000a96 <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000c18:	b005      	add	sp, #20
 8000c1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000c1e:	2600      	movs	r6, #0
 8000c20:	e7d4      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c22:	2601      	movs	r6, #1
 8000c24:	e7d2      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c26:	2602      	movs	r6, #2
 8000c28:	e7d0      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c2a:	2603      	movs	r6, #3
 8000c2c:	e7ce      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c2e:	2604      	movs	r6, #4
 8000c30:	e7cc      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c32:	2605      	movs	r6, #5
 8000c34:	e7ca      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c36:	2606      	movs	r6, #6
 8000c38:	e7c8      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c3a:	2607      	movs	r6, #7
 8000c3c:	e7c6      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c3e:	2608      	movs	r6, #8
 8000c40:	e7c4      	b.n	8000bcc <HAL_GPIO_Init+0x14c>
 8000c42:	bf00      	nop
 8000c44:	40013c00 	.word	0x40013c00
 8000c48:	40020000 	.word	0x40020000
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40021400 	.word	0x40021400

08000c54 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c54:	b10a      	cbz	r2, 8000c5a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8000c56:	6181      	str	r1, [r0, #24]
 8000c58:	4770      	bx	lr
 8000c5a:	0409      	lsls	r1, r1, #16
 8000c5c:	e7fb      	b.n	8000c56 <HAL_GPIO_WritePin+0x2>

08000c5e <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0X00u)
 8000c5e:	6943      	ldr	r3, [r0, #20]
 8000c60:	420b      	tst	r3, r1
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000c62:	bf18      	it	ne
 8000c64:	0409      	lslne	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c66:	6181      	str	r1, [r0, #24]
 8000c68:	4770      	bx	lr

08000c6a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8000c6a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c6e:	4604      	mov	r4, r0
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8000c70:	f890 02b8 	ldrb.w	r0, [r0, #696]	; 0x2b8
{
 8000c74:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
  __HAL_LOCK(hhcd);
 8000c78:	2801      	cmp	r0, #1
{
 8000c7a:	f89d e034 	ldrb.w	lr, [sp, #52]	; 0x34
 8000c7e:	f8bd c038 	ldrh.w	ip, [sp, #56]	; 0x38
  __HAL_LOCK(hhcd);
 8000c82:	d029      	beq.n	8000cd8 <HAL_HCD_HC_Init+0x6e>
 8000c84:	2501      	movs	r5, #1
  hhcd->hc[ch_num].do_ping = 0U;
 8000c86:	2600      	movs	r6, #0
  hhcd->hc[ch_num].ep_type = ep_type;
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;

  if ((epnum & 0x80U) == 0x80U)
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c88:	f012 0f80 	tst.w	r2, #128	; 0x80
  hhcd->hc[ch_num].do_ping = 0U;
 8000c8c:	f04f 0028 	mov.w	r0, #40	; 0x28
  __HAL_LOCK(hhcd);
 8000c90:	f884 52b8 	strb.w	r5, [r4, #696]	; 0x2b8
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000c94:	f002 097f 	and.w	r9, r2, #127	; 0x7f
  hhcd->hc[ch_num].do_ping = 0U;
 8000c98:	fb00 4001 	mla	r0, r0, r1, r4
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000c9c:	bf08      	it	eq
 8000c9e:	4635      	moveq	r5, r6
  hhcd->hc[ch_num].do_ping = 0U;
 8000ca0:	f880 603d 	strb.w	r6, [r0, #61]	; 0x3d
  hhcd->hc[ch_num].dev_addr = dev_address;
 8000ca4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  hhcd->hc[ch_num].max_packet = mps;
 8000ca8:	f8a0 c040 	strh.w	ip, [r0, #64]	; 0x40
  hhcd->hc[ch_num].ch_num = ch_num;
 8000cac:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
  hhcd->hc[ch_num].ep_type = ep_type;
 8000cb0:	f880 e03f 	strb.w	lr, [r0, #63]	; 0x3f
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8000cb4:	f880 903a 	strb.w	r9, [r0, #58]	; 0x3a
    hhcd->hc[ch_num].ep_is_in = 1U;
 8000cb8:	f880 503b 	strb.w	r5, [r0, #59]	; 0x3b
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
  }

  hhcd->hc[ch_num].speed = speed;
 8000cbc:	f880 703c 	strb.w	r7, [r0, #60]	; 0x3c

  status =  USB_HC_Init(hhcd->Instance,
 8000cc0:	f8cd c008 	str.w	ip, [sp, #8]
 8000cc4:	6820      	ldr	r0, [r4, #0]
 8000cc6:	e88d 4080 	stmia.w	sp, {r7, lr}
 8000cca:	f001 fec9 	bl	8002a60 <USB_HC_Init>
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8000cce:	f884 62b8 	strb.w	r6, [r4, #696]	; 0x2b8

  return status;
}
 8000cd2:	b004      	add	sp, #16
 8000cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  __HAL_LOCK(hhcd);
 8000cd8:	2002      	movs	r0, #2
 8000cda:	e7fa      	b.n	8000cd2 <HAL_HCD_HC_Init+0x68>

08000cdc <HAL_HCD_HC_Halt>:
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
  HAL_StatusTypeDef status = HAL_OK;

  __HAL_LOCK(hhcd);
 8000cdc:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 8000ce0:	2b01      	cmp	r3, #1
{
 8000ce2:	b510      	push	{r4, lr}
 8000ce4:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 8000ce6:	d009      	beq.n	8000cfc <HAL_HCD_HC_Halt+0x20>
 8000ce8:	2301      	movs	r3, #1
 8000cea:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8000cee:	6800      	ldr	r0, [r0, #0]
 8000cf0:	f001 ff44 	bl	8002b7c <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8

  return status;
 8000cfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 8000cfc:	2002      	movs	r0, #2
}
 8000cfe:	bd10      	pop	{r4, pc}

08000d00 <HAL_HCD_Init>:
{
 8000d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hhcd == NULL)
 8000d04:	4607      	mov	r7, r0
{
 8000d06:	b08a      	sub	sp, #40	; 0x28
  if (hhcd == NULL)
 8000d08:	2800      	cmp	r0, #0
 8000d0a:	d041      	beq.n	8000d90 <HAL_HCD_Init+0x90>
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000d0c:	f890 32b9 	ldrb.w	r3, [r0, #697]	; 0x2b9
  USBx = hhcd->Instance;
 8000d10:	6804      	ldr	r4, [r0, #0]
  if (hhcd->State == HAL_HCD_STATE_RESET)
 8000d12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000d16:	b91b      	cbnz	r3, 8000d20 <HAL_HCD_Init+0x20>
    hhcd->Lock = HAL_UNLOCKED;
 8000d18:	f880 22b8 	strb.w	r2, [r0, #696]	; 0x2b8
    HAL_HCD_MspInit(hhcd);
 8000d1c:	f006 fb16 	bl	800734c <HAL_HCD_MspInit>
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000d20:	2303      	movs	r3, #3
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d22:	466d      	mov	r5, sp
 8000d24:	f107 0804 	add.w	r8, r7, #4
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d28:	463e      	mov	r6, r7
  hhcd->State = HAL_HCD_STATE_BUSY;
 8000d2a:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d2e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
  __HAL_HCD_DISABLE(hhcd);
 8000d30:	463c      	mov	r4, r7
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000d32:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_HCD_DISABLE(hhcd);
 8000d36:	f854 0b10 	ldr.w	r0, [r4], #16
    hhcd->Init.dma_enable = 0U;
 8000d3a:	bf08      	it	eq
 8000d3c:	613b      	streq	r3, [r7, #16]
  __HAL_HCD_DISABLE(hhcd);
 8000d3e:	f001 fd52 	bl	80027e6 <USB_DisableGlobalInt>
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d52:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d56:	6838      	ldr	r0, [r7, #0]
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d58:	466d      	mov	r5, sp
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8000d5a:	f001 fd03 	bl	8002764 <USB_CoreInit>
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8000d5e:	f856 0b10 	ldr.w	r0, [r6], #16
 8000d62:	2101      	movs	r1, #1
 8000d64:	f001 fd45 	bl	80027f2 <USB_SetCurrentMode>
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8000d68:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d6a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000d6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d70:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000d74:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d78:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000d7c:	6838      	ldr	r0, [r7, #0]
 8000d7e:	f001 fdf7 	bl	8002970 <USB_HostInit>
  hhcd->State = HAL_HCD_STATE_READY;
 8000d82:	2301      	movs	r3, #1
  return HAL_OK;
 8000d84:	2000      	movs	r0, #0
  hhcd->State = HAL_HCD_STATE_READY;
 8000d86:	f887 32b9 	strb.w	r3, [r7, #697]	; 0x2b9
}
 8000d8a:	b00a      	add	sp, #40	; 0x28
 8000d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000d90:	2001      	movs	r0, #1
 8000d92:	e7fa      	b.n	8000d8a <HAL_HCD_Init+0x8a>

08000d94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8000d94:	b5f0      	push	{r4, r5, r6, r7, lr}
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d96:	2428      	movs	r4, #40	; 0x28
{
 8000d98:	f89d 7014 	ldrb.w	r7, [sp, #20]
 8000d9c:	9e06      	ldr	r6, [sp, #24]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000d9e:	fb04 0401 	mla	r4, r4, r1, r0
{
 8000da2:	f8bd 501c 	ldrh.w	r5, [sp, #28]
 8000da6:	f89d e020 	ldrb.w	lr, [sp, #32]
  hhcd->hc[ch_num].ep_is_in = direction;
 8000daa:	f884 203b 	strb.w	r2, [r4, #59]	; 0x3b
  hhcd->hc[ch_num].ep_type  = ep_type;
 8000dae:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f

  if (token == 0U)
 8000db2:	b97f      	cbnz	r7, 8000dd4 <HAL_HCD_HC_SubmitRequest+0x40>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000db4:	2703      	movs	r7, #3
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8000db6:	2b02      	cmp	r3, #2
    hhcd->hc[ch_num].do_ping = do_ping;
 8000db8:	f884 e03d 	strb.w	lr, [r4, #61]	; 0x3d
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8000dbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
  switch (ep_type)
 8000dc0:	d02b      	beq.n	8000e1a <HAL_HCD_HC_SubmitRequest+0x86>
 8000dc2:	42bb      	cmp	r3, r7
 8000dc4:	d029      	beq.n	8000e1a <HAL_HCD_HC_SubmitRequest+0x86>
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d131      	bne.n	8000e2e <HAL_HCD_HC_SubmitRequest+0x9a>
        }
      }
      break;

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000dca:	2328      	movs	r3, #40	; 0x28
 8000dcc:	2200      	movs	r2, #0
 8000dce:	fb03 0301 	mla	r3, r3, r1, r0
 8000dd2:	e02a      	b.n	8000e2a <HAL_HCD_HC_SubmitRequest+0x96>
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000dd4:	f04f 0e02 	mov.w	lr, #2
 8000dd8:	f884 e042 	strb.w	lr, [r4, #66]	; 0x42
  switch (ep_type)
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d826      	bhi.n	8000e2e <HAL_HCD_HC_SubmitRequest+0x9a>
 8000de0:	a401      	add	r4, pc, #4	; (adr r4, 8000de8 <HAL_HCD_HC_SubmitRequest+0x54>)
 8000de2:	f854 f023 	ldr.w	pc, [r4, r3, lsl #2]
 8000de6:	bf00      	nop
 8000de8:	08000df9 	.word	0x08000df9
 8000dec:	08000dcb 	.word	0x08000dcb
 8000df0:	08000e1b 	.word	0x08000e1b
 8000df4:	08000e1b 	.word	0x08000e1b
      if ((token == 1U) && (direction == 0U)) /*send data */
 8000df8:	2f01      	cmp	r7, #1
 8000dfa:	d118      	bne.n	8000e2e <HAL_HCD_HC_SubmitRequest+0x9a>
 8000dfc:	b9ba      	cbnz	r2, 8000e2e <HAL_HCD_HC_SubmitRequest+0x9a>
        if (length == 0U)
 8000dfe:	b925      	cbnz	r5, 8000e0a <HAL_HCD_HC_SubmitRequest+0x76>
          hhcd->hc[ch_num].toggle_out = 1U;
 8000e00:	2328      	movs	r3, #40	; 0x28
 8000e02:	fb03 0301 	mla	r3, r3, r1, r0
 8000e06:	f883 7051 	strb.w	r7, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e0a:	2328      	movs	r3, #40	; 0x28
 8000e0c:	fb03 0301 	mla	r3, r3, r1, r0
 8000e10:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e14:	b14a      	cbz	r2, 8000e2a <HAL_HCD_HC_SubmitRequest+0x96>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8000e16:	2202      	movs	r2, #2
 8000e18:	e007      	b.n	8000e2a <HAL_HCD_HC_SubmitRequest+0x96>
 8000e1a:	2328      	movs	r3, #40	; 0x28
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e1c:	fb03 0301 	mla	r3, r3, r1, r0
      if (direction == 0U)
 8000e20:	b9d2      	cbnz	r2, 8000e58 <HAL_HCD_HC_SubmitRequest+0xc4>
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8000e22:	f893 4051 	ldrb.w	r4, [r3, #81]	; 0x51
 8000e26:	2c00      	cmp	r4, #0
 8000e28:	d1f5      	bne.n	8000e16 <HAL_HCD_HC_SubmitRequest+0x82>
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8000e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    default:
      break;
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000e2e:	2428      	movs	r4, #40	; 0x28
  hhcd->hc[ch_num].xfer_len  = length;
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000e30:	2200      	movs	r2, #0
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000e32:	fb04 0301 	mla	r3, r4, r1, r0
  hhcd->hc[ch_num].xfer_count = 0U;
  hhcd->hc[ch_num].ch_num = ch_num;
 8000e36:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
  hhcd->hc[ch_num].state = HC_IDLE;

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e3a:	4619      	mov	r1, r3
  hhcd->hc[ch_num].xfer_buff = pbuff;
 8000e3c:	645e      	str	r6, [r3, #68]	; 0x44
  hhcd->hc[ch_num].xfer_len  = length;
 8000e3e:	649d      	str	r5, [r3, #72]	; 0x48
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e40:	3138      	adds	r1, #56	; 0x38
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8000e42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  hhcd->hc[ch_num].xfer_count = 0U;
 8000e46:	64da      	str	r2, [r3, #76]	; 0x4c
  hhcd->hc[ch_num].state = HC_IDLE;
 8000e48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e4c:	7c02      	ldrb	r2, [r0, #16]
 8000e4e:	6800      	ldr	r0, [r0, #0]
}
 8000e50:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8000e54:	f001 bef6 	b.w	8002c44 <USB_HC_StartXfer>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8000e58:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 8000e5c:	e7da      	b.n	8000e14 <HAL_HCD_HC_SubmitRequest+0x80>
 8000e5e:	bf00      	nop

08000e60 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8000e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8000e64:	6806      	ldr	r6, [r0, #0]
{
 8000e66:	b087      	sub	sp, #28
 8000e68:	4604      	mov	r4, r0
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f001 fd20 	bl	80028b0 <USB_GetMode>
 8000e70:	2801      	cmp	r0, #1
 8000e72:	f040 80a7 	bne.w	8000fc4 <HAL_HCD_IRQHandler+0x164>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8000e76:	6820      	ldr	r0, [r4, #0]
 8000e78:	f001 fd16 	bl	80028a8 <USB_ReadInterrupts>
 8000e7c:	2800      	cmp	r0, #0
 8000e7e:	f000 80a1 	beq.w	8000fc4 <HAL_HCD_IRQHandler+0x164>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8000e82:	6820      	ldr	r0, [r4, #0]
 8000e84:	f001 fd10 	bl	80028a8 <USB_ReadInterrupts>
 8000e88:	0283      	lsls	r3, r0, #10
 8000e8a:	d503      	bpl.n	8000e94 <HAL_HCD_IRQHandler+0x34>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8000e8c:	6823      	ldr	r3, [r4, #0]
 8000e8e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e92:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8000e94:	6820      	ldr	r0, [r4, #0]
 8000e96:	f001 fd07 	bl	80028a8 <USB_ReadInterrupts>
 8000e9a:	02c7      	lsls	r7, r0, #11
 8000e9c:	d503      	bpl.n	8000ea6 <HAL_HCD_IRQHandler+0x46>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ea4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8000ea6:	6820      	ldr	r0, [r4, #0]
 8000ea8:	f001 fcfe 	bl	80028a8 <USB_ReadInterrupts>
 8000eac:	0145      	lsls	r5, r0, #5
 8000eae:	d503      	bpl.n	8000eb8 <HAL_HCD_IRQHandler+0x58>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8000eb0:	6823      	ldr	r3, [r4, #0]
 8000eb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000eb6:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8000eb8:	6820      	ldr	r0, [r4, #0]
 8000eba:	f001 fcf5 	bl	80028a8 <USB_ReadInterrupts>
 8000ebe:	0780      	lsls	r0, r0, #30
 8000ec0:	d502      	bpl.n	8000ec8 <HAL_HCD_IRQHandler+0x68>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8000ec2:	6823      	ldr	r3, [r4, #0]
 8000ec4:	2202      	movs	r2, #2
 8000ec6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8000ec8:	6820      	ldr	r0, [r4, #0]
 8000eca:	f001 fced 	bl	80028a8 <USB_ReadInterrupts>
 8000ece:	0081      	lsls	r1, r0, #2
 8000ed0:	d50e      	bpl.n	8000ef0 <HAL_HCD_IRQHandler+0x90>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8000ed2:	6823      	ldr	r3, [r4, #0]
 8000ed4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ed8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8000eda:	f8d6 3440 	ldr.w	r3, [r6, #1088]	; 0x440
 8000ede:	07da      	lsls	r2, r3, #31
 8000ee0:	d406      	bmi.n	8000ef0 <HAL_HCD_IRQHandler+0x90>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8000ee2:	4620      	mov	r0, r4
 8000ee4:	f006 fa78 	bl	80073d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000ee8:	2101      	movs	r1, #1
 8000eea:	6820      	ldr	r0, [r4, #0]
 8000eec:	f001 fce4 	bl	80028b8 <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8000ef0:	6820      	ldr	r0, [r4, #0]
 8000ef2:	f001 fcd9 	bl	80028a8 <USB_ReadInterrupts>
 8000ef6:	01c3      	lsls	r3, r0, #7
 8000ef8:	d53b      	bpl.n	8000f72 <HAL_HCD_IRQHandler+0x112>
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
  uint32_t USBx_BASE = (uint32_t)USBx;
 8000efa:	6825      	ldr	r5, [r4, #0]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8000efc:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f00:	9304      	str	r3, [sp, #16]
  hprt0_dup = USBx_HPRT0;
 8000f02:	f8d5 3440 	ldr.w	r3, [r5, #1088]	; 0x440
 8000f06:	9305      	str	r3, [sp, #20]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8000f08:	9b05      	ldr	r3, [sp, #20]
 8000f0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8000f0e:	9305      	str	r3, [sp, #20]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8000f10:	9b04      	ldr	r3, [sp, #16]
 8000f12:	079f      	lsls	r7, r3, #30
 8000f14:	d509      	bpl.n	8000f2a <HAL_HCD_IRQHandler+0xca>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8000f16:	9b04      	ldr	r3, [sp, #16]
 8000f18:	07d8      	lsls	r0, r3, #31
 8000f1a:	d502      	bpl.n	8000f22 <HAL_HCD_IRQHandler+0xc2>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8000f1c:	4620      	mov	r0, r4
 8000f1e:	f006 fa57 	bl	80073d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8000f22:	9b05      	ldr	r3, [sp, #20]
 8000f24:	f043 0302 	orr.w	r3, r3, #2
 8000f28:	9305      	str	r3, [sp, #20]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8000f2a:	9b04      	ldr	r3, [sp, #16]
 8000f2c:	0719      	lsls	r1, r3, #28
 8000f2e:	d516      	bpl.n	8000f5e <HAL_HCD_IRQHandler+0xfe>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8000f30:	9b05      	ldr	r3, [sp, #20]
 8000f32:	f043 0308 	orr.w	r3, r3, #8
 8000f36:	9305      	str	r3, [sp, #20]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8000f38:	9b04      	ldr	r3, [sp, #16]
 8000f3a:	075a      	lsls	r2, r3, #29
 8000f3c:	d54d      	bpl.n	8000fda <HAL_HCD_IRQHandler+0x17a>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8000f3e:	69a1      	ldr	r1, [r4, #24]
 8000f40:	2902      	cmp	r1, #2
 8000f42:	d142      	bne.n	8000fca <HAL_HCD_IRQHandler+0x16a>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f44:	9b04      	ldr	r3, [sp, #16]
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f46:	6820      	ldr	r0, [r4, #0]
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8000f48:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8000f4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8000f50:	bf18      	it	ne
 8000f52:	2101      	movne	r1, #1
 8000f54:	f001 fcb0 	bl	80028b8 <USB_InitFSLSPClkSel>
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8000f58:	4620      	mov	r0, r4
 8000f5a:	f006 fa45 	bl	80073e8 <HAL_HCD_PortEnabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8000f5e:	9b04      	ldr	r3, [sp, #16]
 8000f60:	069b      	lsls	r3, r3, #26
 8000f62:	d503      	bpl.n	8000f6c <HAL_HCD_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8000f64:	9b05      	ldr	r3, [sp, #20]
 8000f66:	f043 0320 	orr.w	r3, r3, #32
 8000f6a:	9305      	str	r3, [sp, #20]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8000f6c:	9b05      	ldr	r3, [sp, #20]
 8000f6e:	f8c5 3440 	str.w	r3, [r5, #1088]	; 0x440
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8000f72:	6820      	ldr	r0, [r4, #0]
 8000f74:	f001 fc98 	bl	80028a8 <USB_ReadInterrupts>
 8000f78:	0707      	lsls	r7, r0, #28
 8000f7a:	d505      	bpl.n	8000f88 <HAL_HCD_IRQHandler+0x128>
      HAL_HCD_SOF_Callback(hhcd);
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f006 fa23 	bl	80073c8 <HAL_HCD_SOF_Callback>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8000f82:	6823      	ldr	r3, [r4, #0]
 8000f84:	2208      	movs	r2, #8
 8000f86:	615a      	str	r2, [r3, #20]
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8000f88:	6820      	ldr	r0, [r4, #0]
 8000f8a:	f001 fc8d 	bl	80028a8 <USB_ReadInterrupts>
 8000f8e:	0185      	lsls	r5, r0, #6
 8000f90:	d512      	bpl.n	8000fb8 <HAL_HCD_IRQHandler+0x158>
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000f92:	6820      	ldr	r0, [r4, #0]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000f94:	f04f 0a00 	mov.w	sl, #0
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000f98:	f001 fdeb 	bl	8002b72 <USB_HC_ReadInterrupt>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8000f9c:	2728      	movs	r7, #40	; 0x28
 8000f9e:	f506 63a0 	add.w	r3, r6, #1280	; 0x500
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8000fa2:	f04f 0802 	mov.w	r8, #2
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8000fa6:	9002      	str	r0, [sp, #8]
 8000fa8:	9301      	str	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8000faa:	68a3      	ldr	r3, [r4, #8]
 8000fac:	459a      	cmp	sl, r3
 8000fae:	d318      	bcc.n	8000fe2 <HAL_HCD_IRQHandler+0x182>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000fb6:	615a      	str	r2, [r3, #20]
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8000fb8:	6820      	ldr	r0, [r4, #0]
 8000fba:	f001 fc75 	bl	80028a8 <USB_ReadInterrupts>
 8000fbe:	06c3      	lsls	r3, r0, #27
 8000fc0:	f100 8237 	bmi.w	8001432 <HAL_HCD_IRQHandler+0x5d2>
}
 8000fc4:	b007      	add	sp, #28
 8000fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8000fca:	68e3      	ldr	r3, [r4, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d1c3      	bne.n	8000f58 <HAL_HCD_IRQHandler+0xf8>
          USBx_HOST->HFIR = 60000U;
 8000fd0:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000fd4:	f8c5 2404 	str.w	r2, [r5, #1028]	; 0x404
 8000fd8:	e7be      	b.n	8000f58 <HAL_HCD_IRQHandler+0xf8>
      HAL_HCD_PortDisabled_Callback(hhcd);
 8000fda:	4620      	mov	r0, r4
 8000fdc:	f006 fa08 	bl	80073f0 <HAL_HCD_PortDisabled_Callback>
 8000fe0:	e7bd      	b.n	8000f5e <HAL_HCD_IRQHandler+0xfe>
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8000fe2:	f00a 030f 	and.w	r3, sl, #15
 8000fe6:	9a02      	ldr	r2, [sp, #8]
 8000fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fec:	07d8      	lsls	r0, r3, #31
 8000fee:	f140 8094 	bpl.w	800111a <HAL_HCD_IRQHandler+0x2ba>
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8000ff2:	9b01      	ldr	r3, [sp, #4]
 8000ff4:	fa5f f58a 	uxtb.w	r5, sl
 8000ff8:	6820      	ldr	r0, [r4, #0]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8001000:	f000 8129 	beq.w	8001256 <HAL_HCD_IRQHandler+0x3f6>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001004:	ea4f 1b45 	mov.w	fp, r5, lsl #5
 8001008:	f500 69a0 	add.w	r9, r0, #1280	; 0x500
 800100c:	eb0b 0609 	add.w	r6, fp, r9
 8001010:	68b1      	ldr	r1, [r6, #8]
 8001012:	0749      	lsls	r1, r1, #29
 8001014:	d513      	bpl.n	800103e <HAL_HCD_IRQHandler+0x1de>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001016:	2104      	movs	r1, #4
 8001018:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800101a:	68f1      	ldr	r1, [r6, #12]
 800101c:	f041 0102 	orr.w	r1, r1, #2
 8001020:	60f1      	str	r1, [r6, #12]
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001022:	68b1      	ldr	r1, [r6, #8]
 8001024:	058b      	lsls	r3, r1, #22
 8001026:	d54a      	bpl.n	80010be <HAL_HCD_IRQHandler+0x25e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001028:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800102a:	4629      	mov	r1, r5
 800102c:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001034:	f001 fda2 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800103c:	e0e9      	b.n	8001212 <HAL_HCD_IRQHandler+0x3b2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 800103e:	68b1      	ldr	r1, [r6, #8]
 8001040:	05ca      	lsls	r2, r1, #23
 8001042:	d510      	bpl.n	8001066 <HAL_HCD_IRQHandler+0x206>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001044:	f44f 7180 	mov.w	r1, #256	; 0x100
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001048:	f04f 0e07 	mov.w	lr, #7
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800104c:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 800104e:	fb07 4105 	mla	r1, r7, r5, r4
 8001052:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001056:	68f1      	ldr	r1, [r6, #12]
 8001058:	f041 0102 	orr.w	r1, r1, #2
 800105c:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800105e:	4629      	mov	r1, r5
 8001060:	f001 fd8c 	bl	8002b7c <USB_HC_Halt>
 8001064:	e7dd      	b.n	8001022 <HAL_HCD_IRQHandler+0x1c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001066:	68b1      	ldr	r1, [r6, #8]
 8001068:	068b      	lsls	r3, r1, #26
 800106a:	d502      	bpl.n	8001072 <HAL_HCD_IRQHandler+0x212>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800106c:	2120      	movs	r1, #32
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800106e:	60b1      	str	r1, [r6, #8]
 8001070:	e7d7      	b.n	8001022 <HAL_HCD_IRQHandler+0x1c2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001072:	68b1      	ldr	r1, [r6, #8]
 8001074:	0709      	lsls	r1, r1, #28
 8001076:	d50e      	bpl.n	8001096 <HAL_HCD_IRQHandler+0x236>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001078:	68f1      	ldr	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 800107a:	f04f 0e05 	mov.w	lr, #5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800107e:	f041 0102 	orr.w	r1, r1, #2
 8001082:	60f1      	str	r1, [r6, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001084:	fb07 4105 	mla	r1, r7, r5, r4
 8001088:	f881 e05d 	strb.w	lr, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800108c:	2110      	movs	r1, #16
 800108e:	60b1      	str	r1, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001090:	2108      	movs	r1, #8
 8001092:	60b1      	str	r1, [r6, #8]
 8001094:	e7e3      	b.n	800105e <HAL_HCD_IRQHandler+0x1fe>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001096:	68b1      	ldr	r1, [r6, #8]
 8001098:	054a      	lsls	r2, r1, #21
 800109a:	d5c2      	bpl.n	8001022 <HAL_HCD_IRQHandler+0x1c2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800109c:	68f1      	ldr	r1, [r6, #12]
 800109e:	f041 0102 	orr.w	r1, r1, #2
 80010a2:	60f1      	str	r1, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010a4:	4629      	mov	r1, r5
 80010a6:	f001 fd69 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010aa:	2110      	movs	r1, #16
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80010ac:	2008      	movs	r0, #8
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80010ae:	60b1      	str	r1, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80010b0:	fb07 4105 	mla	r1, r7, r5, r4
 80010b4:	f881 005d 	strb.w	r0, [r1, #93]	; 0x5d
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80010b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010bc:	e7d7      	b.n	800106e <HAL_HCD_IRQHandler+0x20e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80010be:	68b1      	ldr	r1, [r6, #8]
 80010c0:	07c8      	lsls	r0, r1, #31
 80010c2:	d54b      	bpl.n	800115c <HAL_HCD_IRQHandler+0x2fc>
    if (hhcd->Init.dma_enable != 0U)
 80010c4:	6921      	ldr	r1, [r4, #16]
 80010c6:	b149      	cbz	r1, 80010dc <HAL_HCD_IRQHandler+0x27c>
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010c8:	6930      	ldr	r0, [r6, #16]
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80010ca:	fb07 4e05 	mla	lr, r7, r5, r4
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80010ce:	f3c0 0012 	ubfx	r0, r0, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80010d2:	f8de 1048 	ldr.w	r1, [lr, #72]	; 0x48
 80010d6:	1a09      	subs	r1, r1, r0
 80010d8:	f8ce 104c 	str.w	r1, [lr, #76]	; 0x4c
    hhcd->hc[ch_num].state = HC_XFRC;
 80010dc:	fb07 4105 	mla	r1, r7, r5, r4
 80010e0:	2301      	movs	r3, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010e2:	2200      	movs	r2, #0
    hhcd->hc[ch_num].state = HC_XFRC;
 80010e4:	f881 305d 	strb.w	r3, [r1, #93]	; 0x5d
    hhcd->hc[ch_num].ErrCnt = 0U;
 80010e8:	658a      	str	r2, [r1, #88]	; 0x58
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80010ea:	60b3      	str	r3, [r6, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80010ec:	f891 203f 	ldrb.w	r2, [r1, #63]	; 0x3f
 80010f0:	f012 0ffd 	tst.w	r2, #253	; 0xfd
 80010f4:	d117      	bne.n	8001126 <HAL_HCD_IRQHandler+0x2c6>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010f6:	68f3      	ldr	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80010f8:	4629      	mov	r1, r5
 80010fa:	6820      	ldr	r0, [r4, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001102:	f001 fd3b 	bl	8002b7c <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001106:	2310      	movs	r3, #16
 8001108:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800110a:	fb07 4505 	mla	r5, r7, r5, r4
 800110e:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8001112:	f083 0301 	eor.w	r3, r3, #1
 8001116:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 800111a:	9b01      	ldr	r3, [sp, #4]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800111c:	f10a 0a01 	add.w	sl, sl, #1
 8001120:	3320      	adds	r3, #32
 8001122:	9301      	str	r3, [sp, #4]
 8001124:	e741      	b.n	8000faa <HAL_HCD_IRQHandler+0x14a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8001126:	2a03      	cmp	r2, #3
 8001128:	d10d      	bne.n	8001146 <HAL_HCD_IRQHandler+0x2e6>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800112a:	f85b 0009 	ldr.w	r0, [fp, r9]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800112e:	461a      	mov	r2, r3
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001130:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8001134:	f84b 0009 	str.w	r0, [fp, r9]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8001138:	f881 305c 	strb.w	r3, [r1, #92]	; 0x5c
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800113c:	4629      	mov	r1, r5
 800113e:	4620      	mov	r0, r4
 8001140:	f006 f94e 	bl	80073e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8001144:	e7e1      	b.n	800110a <HAL_HCD_IRQHandler+0x2aa>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 8001146:	2a01      	cmp	r2, #1
 8001148:	d1df      	bne.n	800110a <HAL_HCD_IRQHandler+0x2aa>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 800114a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800114e:	f881 205c 	strb.w	r2, [r1, #92]	; 0x5c
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8001152:	f083 0301 	eor.w	r3, r3, #1
 8001156:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
 800115a:	e7ef      	b.n	800113c <HAL_HCD_IRQHandler+0x2dc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800115c:	68b1      	ldr	r1, [r6, #8]
 800115e:	0789      	lsls	r1, r1, #30
 8001160:	d542      	bpl.n	80011e8 <HAL_HCD_IRQHandler+0x388>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001162:	68f1      	ldr	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8001164:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8001168:	f021 0102 	bic.w	r1, r1, #2
 800116c:	60f1      	str	r1, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800116e:	f890 105d 	ldrb.w	r1, [r0, #93]	; 0x5d
 8001172:	2901      	cmp	r1, #1
 8001174:	d10c      	bne.n	8001190 <HAL_HCD_IRQHandler+0x330>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8001176:	f880 105c 	strb.w	r1, [r0, #92]	; 0x5c
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800117a:	fb07 4305 	mla	r3, r7, r5, r4
 800117e:	4629      	mov	r1, r5
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8001180:	f8c6 8008 	str.w	r8, [r6, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8001184:	4620      	mov	r0, r4
 8001186:	f893 205c 	ldrb.w	r2, [r3, #92]	; 0x5c
 800118a:	f006 f929 	bl	80073e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 800118e:	e7c4      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8001190:	2905      	cmp	r1, #5
 8001192:	d0f0      	beq.n	8001176 <HAL_HCD_IRQHandler+0x316>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8001194:	2906      	cmp	r1, #6
 8001196:	d001      	beq.n	800119c <HAL_HCD_IRQHandler+0x33c>
 8001198:	2908      	cmp	r1, #8
 800119a:	d117      	bne.n	80011cc <HAL_HCD_IRQHandler+0x36c>
      hhcd->hc[ch_num].ErrCnt++;
 800119c:	fb07 4105 	mla	r1, r7, r5, r4
 80011a0:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80011a2:	3001      	adds	r0, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80011a4:	2803      	cmp	r0, #3
      hhcd->hc[ch_num].ErrCnt++;
 80011a6:	6588      	str	r0, [r1, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011a8:	bf85      	ittet	hi
 80011aa:	2300      	movhi	r3, #0
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011ac:	2004      	movhi	r0, #4
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80011ae:	f881 805c 	strbls.w	r8, [r1, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 80011b2:	658b      	strhi	r3, [r1, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011b4:	bf88      	it	hi
 80011b6:	f881 005c 	strbhi.w	r0, [r1, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80011ba:	f85b 1009 	ldr.w	r1, [fp, r9]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80011be:	f021 4180 	bic.w	r1, r1, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80011c2:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80011c6:	f84b 1009 	str.w	r1, [fp, r9]
 80011ca:	e7d6      	b.n	800117a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80011cc:	2903      	cmp	r1, #3
 80011ce:	d102      	bne.n	80011d6 <HAL_HCD_IRQHandler+0x376>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80011d0:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 80011d4:	e7f1      	b.n	80011ba <HAL_HCD_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80011d6:	2907      	cmp	r1, #7
 80011d8:	d1cf      	bne.n	800117a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 80011da:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80011dc:	3301      	adds	r3, #1
 80011de:	6583      	str	r3, [r0, #88]	; 0x58
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80011e0:	2304      	movs	r3, #4
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80011e2:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
 80011e6:	e7c8      	b.n	800117a <HAL_HCD_IRQHandler+0x31a>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80011e8:	68b1      	ldr	r1, [r6, #8]
 80011ea:	f011 0180 	ands.w	r1, r1, #128	; 0x80
 80011ee:	d012      	beq.n	8001216 <HAL_HCD_IRQHandler+0x3b6>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011f0:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80011f2:	4629      	mov	r1, r5
 80011f4:	6820      	ldr	r0, [r4, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80011f6:	f043 0302 	orr.w	r3, r3, #2
 80011fa:	60f3      	str	r3, [r6, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80011fc:	fb07 4305 	mla	r3, r7, r5, r4
 8001200:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001202:	3201      	adds	r2, #1
 8001204:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001206:	2206      	movs	r2, #6
 8001208:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800120c:	f001 fcb6 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001210:	2380      	movs	r3, #128	; 0x80
 8001212:	60b3      	str	r3, [r6, #8]
 8001214:	e781      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001216:	68b3      	ldr	r3, [r6, #8]
 8001218:	06da      	lsls	r2, r3, #27
 800121a:	f57f af7e 	bpl.w	800111a <HAL_HCD_IRQHandler+0x2ba>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800121e:	fb07 4205 	mla	r2, r7, r5, r4
 8001222:	f892 303f 	ldrb.w	r3, [r2, #63]	; 0x3f
 8001226:	2b03      	cmp	r3, #3
 8001228:	d10a      	bne.n	8001240 <HAL_HCD_IRQHandler+0x3e0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800122a:	6591      	str	r1, [r2, #88]	; 0x58
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800122c:	68f3      	ldr	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800122e:	4629      	mov	r1, r5
 8001230:	6820      	ldr	r0, [r4, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001232:	f043 0302 	orr.w	r3, r3, #2
 8001236:	60f3      	str	r3, [r6, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001238:	f001 fca0 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800123c:	2310      	movs	r3, #16
 800123e:	e7e8      	b.n	8001212 <HAL_HCD_IRQHandler+0x3b2>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8001240:	f013 03fd 	ands.w	r3, r3, #253	; 0xfd
 8001244:	d1fa      	bne.n	800123c <HAL_HCD_IRQHandler+0x3dc>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8001246:	6593      	str	r3, [r2, #88]	; 0x58
      if (hhcd->Init.dma_enable == 0U)
 8001248:	6923      	ldr	r3, [r4, #16]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f6      	bne.n	800123c <HAL_HCD_IRQHandler+0x3dc>
        hhcd->hc[ch_num].state = HC_NAK;
 800124e:	2303      	movs	r3, #3
 8001250:	f882 305d 	strb.w	r3, [r2, #93]	; 0x5d
 8001254:	e7ea      	b.n	800122c <HAL_HCD_IRQHandler+0x3cc>
  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001256:	0169      	lsls	r1, r5, #5
 8001258:	f500 62a0 	add.w	r2, r0, #1280	; 0x500
 800125c:	188e      	adds	r6, r1, r2
 800125e:	68b3      	ldr	r3, [r6, #8]
 8001260:	f013 0e04 	ands.w	lr, r3, #4
 8001264:	d006      	beq.n	8001274 <HAL_HCD_IRQHandler+0x414>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001266:	2304      	movs	r3, #4
 8001268:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800126a:	68f3      	ldr	r3, [r6, #12]
 800126c:	f043 0302 	orr.w	r3, r3, #2
 8001270:	60f3      	str	r3, [r6, #12]
 8001272:	e752      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001274:	68b3      	ldr	r3, [r6, #8]
 8001276:	f013 0320 	ands.w	r3, r3, #32
 800127a:	d014      	beq.n	80012a6 <HAL_HCD_IRQHandler+0x446>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800127c:	2320      	movs	r3, #32
 800127e:	60b3      	str	r3, [r6, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8001280:	fb07 4305 	mla	r3, r7, r5, r4
 8001284:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 8001288:	2a01      	cmp	r2, #1
 800128a:	f47f af46 	bne.w	800111a <HAL_HCD_IRQHandler+0x2ba>
      hhcd->hc[ch_num].do_ping = 0U;
 800128e:	f883 e03d 	strb.w	lr, [r3, #61]	; 0x3d
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001292:	4629      	mov	r1, r5
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8001294:	f883 805c 	strb.w	r8, [r3, #92]	; 0x5c
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001298:	68f3      	ldr	r3, [r6, #12]
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	60f3      	str	r3, [r6, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012a0:	f001 fc6c 	bl	8002b7c <USB_HC_Halt>
 80012a4:	e739      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80012a6:	f8d6 e008 	ldr.w	lr, [r6, #8]
 80012aa:	f01e 0f40 	tst.w	lr, #64	; 0x40
 80012ae:	d011      	beq.n	80012d4 <HAL_HCD_IRQHandler+0x474>
    hhcd->hc[ch_num].state = HC_NYET;
 80012b0:	fb07 4205 	mla	r2, r7, r5, r4
 80012b4:	2104      	movs	r1, #4
 80012b6:	f882 105d 	strb.w	r1, [r2, #93]	; 0x5d
    hhcd->hc[ch_num].do_ping = 1U;
 80012ba:	2101      	movs	r1, #1
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012bc:	6593      	str	r3, [r2, #88]	; 0x58
    hhcd->hc[ch_num].do_ping = 1U;
 80012be:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012c2:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012c4:	68f3      	ldr	r3, [r6, #12]
 80012c6:	f043 0302 	orr.w	r3, r3, #2
 80012ca:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012cc:	f001 fc56 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80012d0:	2340      	movs	r3, #64	; 0x40
 80012d2:	e79e      	b.n	8001212 <HAL_HCD_IRQHandler+0x3b2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80012d4:	68b3      	ldr	r3, [r6, #8]
 80012d6:	f413 7e00 	ands.w	lr, r3, #512	; 0x200
 80012da:	d005      	beq.n	80012e8 <HAL_HCD_IRQHandler+0x488>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012dc:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012de:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	60f3      	str	r3, [r6, #12]
 80012e6:	e6a5      	b.n	8001034 <HAL_HCD_IRQHandler+0x1d4>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80012e8:	68b3      	ldr	r3, [r6, #8]
 80012ea:	07db      	lsls	r3, r3, #31
 80012ec:	d511      	bpl.n	8001312 <HAL_HCD_IRQHandler+0x4b2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012ee:	68f2      	ldr	r2, [r6, #12]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012f0:	fb07 4305 	mla	r3, r7, r5, r4
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80012f4:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80012f6:	f042 0202 	orr.w	r2, r2, #2
    hhcd->hc[ch_num].ErrCnt = 0U;
 80012fa:	f8c3 e058 	str.w	lr, [r3, #88]	; 0x58
 80012fe:	9303      	str	r3, [sp, #12]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001300:	60f2      	str	r2, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001302:	f001 fc3b 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8001306:	2201      	movs	r2, #1
    hhcd->hc[ch_num].state = HC_XFRC;
 8001308:	9b03      	ldr	r3, [sp, #12]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800130a:	60b2      	str	r2, [r6, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800130c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
 8001310:	e703      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001312:	68b3      	ldr	r3, [r6, #8]
 8001314:	071b      	lsls	r3, r3, #28
 8001316:	d50e      	bpl.n	8001336 <HAL_HCD_IRQHandler+0x4d6>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001318:	2308      	movs	r3, #8
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800131a:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_STALL;
 800131c:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001320:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001322:	68f3      	ldr	r3, [r6, #12]
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800132a:	f001 fc27 	bl	8002b7c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800132e:	2305      	movs	r3, #5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001330:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001334:	e6f1      	b.n	800111a <HAL_HCD_IRQHandler+0x2ba>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8001336:	68b3      	ldr	r3, [r6, #8]
 8001338:	06db      	lsls	r3, r3, #27
 800133a:	d515      	bpl.n	8001368 <HAL_HCD_IRQHandler+0x508>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800133c:	fb07 4305 	mla	r3, r7, r5, r4
 8001340:	2200      	movs	r2, #0
 8001342:	659a      	str	r2, [r3, #88]	; 0x58
    hhcd->hc[ch_num].state = HC_NAK;
 8001344:	2203      	movs	r2, #3
 8001346:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    if (hhcd->hc[ch_num].do_ping == 0U)
 800134a:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 800134e:	b92a      	cbnz	r2, 800135c <HAL_HCD_IRQHandler+0x4fc>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8001350:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 8001354:	b912      	cbnz	r2, 800135c <HAL_HCD_IRQHandler+0x4fc>
        hhcd->hc[ch_num].do_ping = 1U;
 8001356:	2201      	movs	r2, #1
 8001358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800135c:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800135e:	4629      	mov	r1, r5
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	60f3      	str	r3, [r6, #12]
 8001366:	e767      	b.n	8001238 <HAL_HCD_IRQHandler+0x3d8>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001368:	68b3      	ldr	r3, [r6, #8]
 800136a:	061b      	lsls	r3, r3, #24
 800136c:	d50c      	bpl.n	8001388 <HAL_HCD_IRQHandler+0x528>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800136e:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001370:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001372:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001376:	f043 0302 	orr.w	r3, r3, #2
 800137a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800137c:	f001 fbfe 	bl	8002b7c <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001380:	2306      	movs	r3, #6
 8001382:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
 8001386:	e743      	b.n	8001210 <HAL_HCD_IRQHandler+0x3b0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001388:	68b3      	ldr	r3, [r6, #8]
 800138a:	055b      	lsls	r3, r3, #21
 800138c:	d50f      	bpl.n	80013ae <HAL_HCD_IRQHandler+0x54e>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800138e:	68f3      	ldr	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001390:	4629      	mov	r1, r5
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001392:	fb07 4505 	mla	r5, r7, r5, r4
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	60f3      	str	r3, [r6, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800139c:	f001 fbee 	bl	8002b7c <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80013a0:	2310      	movs	r3, #16
 80013a2:	60b3      	str	r3, [r6, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80013a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013a8:	60b3      	str	r3, [r6, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80013aa:	2308      	movs	r3, #8
 80013ac:	e7c0      	b.n	8001330 <HAL_HCD_IRQHandler+0x4d0>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80013ae:	68b3      	ldr	r3, [r6, #8]
 80013b0:	0798      	lsls	r0, r3, #30
 80013b2:	f57f aeb2 	bpl.w	800111a <HAL_HCD_IRQHandler+0x2ba>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80013b6:	68f3      	ldr	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80013b8:	fb07 4005 	mla	r0, r7, r5, r4
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80013bc:	f023 0302 	bic.w	r3, r3, #2
 80013c0:	60f3      	str	r3, [r6, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80013c2:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d10e      	bne.n	80013e8 <HAL_HCD_IRQHandler+0x588>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80013ca:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80013ce:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 80013d2:	3b02      	subs	r3, #2
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	f63f aed0 	bhi.w	800117a <HAL_HCD_IRQHandler+0x31a>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 80013da:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
 80013e6:	e6c8      	b.n	800117a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80013e8:	2b03      	cmp	r3, #3
 80013ea:	d102      	bne.n	80013f2 <HAL_HCD_IRQHandler+0x592>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80013ec:	f880 805c 	strb.w	r8, [r0, #92]	; 0x5c
 80013f0:	e6c3      	b.n	800117a <HAL_HCD_IRQHandler+0x31a>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	d0fa      	beq.n	80013ec <HAL_HCD_IRQHandler+0x58c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80013f6:	2b05      	cmp	r3, #5
 80013f8:	f43f aef3 	beq.w	80011e2 <HAL_HCD_IRQHandler+0x382>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80013fc:	2b06      	cmp	r3, #6
 80013fe:	d002      	beq.n	8001406 <HAL_HCD_IRQHandler+0x5a6>
 8001400:	2b08      	cmp	r3, #8
 8001402:	f47f aeba 	bne.w	800117a <HAL_HCD_IRQHandler+0x31a>
      hhcd->hc[ch_num].ErrCnt++;
 8001406:	fb07 4005 	mla	r0, r7, r5, r4
 800140a:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800140c:	3301      	adds	r3, #1
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800140e:	2b03      	cmp	r3, #3
      hhcd->hc[ch_num].ErrCnt++;
 8001410:	6583      	str	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].ErrCnt = 0U;
 8001412:	bf89      	itett	hi
 8001414:	2300      	movhi	r3, #0
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8001416:	f880 805c 	strbls.w	r8, [r0, #92]	; 0x5c
        hhcd->hc[ch_num].ErrCnt = 0U;
 800141a:	6583      	strhi	r3, [r0, #88]	; 0x58
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800141c:	2304      	movhi	r3, #4
 800141e:	bf88      	it	hi
 8001420:	f880 305c 	strbhi.w	r3, [r0, #92]	; 0x5c
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001424:	588b      	ldr	r3, [r1, r2]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001426:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800142a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800142e:	508b      	str	r3, [r1, r2]
 8001430:	e6a3      	b.n	800117a <HAL_HCD_IRQHandler+0x31a>
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001432:	6826      	ldr	r6, [r4, #0]
 8001434:	69b3      	ldr	r3, [r6, #24]
 8001436:	f023 0310 	bic.w	r3, r3, #16
 800143a:	61b3      	str	r3, [r6, #24]
  temp = hhcd->Instance->GRXSTSP;
 800143c:	6a35      	ldr	r5, [r6, #32]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800143e:	f3c5 4243 	ubfx	r2, r5, #17, #4
  switch (pktsts)
 8001442:	2a02      	cmp	r2, #2
 8001444:	d129      	bne.n	800149a <HAL_HCD_IRQHandler+0x63a>
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001446:	f3c5 180a 	ubfx	r8, r5, #4, #11
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800144a:	f1b8 0f00 	cmp.w	r8, #0
 800144e:	d024      	beq.n	800149a <HAL_HCD_IRQHandler+0x63a>
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8001450:	f005 050f 	and.w	r5, r5, #15
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8001454:	2728      	movs	r7, #40	; 0x28
 8001456:	fb07 4705 	mla	r7, r7, r5, r4
 800145a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800145c:	b1e9      	cbz	r1, 800149a <HAL_HCD_IRQHandler+0x63a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 800145e:	4642      	mov	r2, r8
 8001460:	4630      	mov	r0, r6
 8001462:	f001 fa13 	bl	800288c <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8001466:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001468:	f506 66a0 	add.w	r6, r6, #1280	; 0x500
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 800146c:	4443      	add	r3, r8
 800146e:	647b      	str	r3, [r7, #68]	; 0x44
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8001470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001472:	4443      	add	r3, r8
 8001474:	64fb      	str	r3, [r7, #76]	; 0x4c
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8001476:	016b      	lsls	r3, r5, #5
 8001478:	199a      	adds	r2, r3, r6
 800147a:	6911      	ldr	r1, [r2, #16]
 800147c:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_HCD_IRQHandler+0x648>)
 800147e:	400a      	ands	r2, r1
 8001480:	b15a      	cbz	r2, 800149a <HAL_HCD_IRQHandler+0x63a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8001482:	599a      	ldr	r2, [r3, r6]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8001484:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8001488:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800148c:	519a      	str	r2, [r3, r6]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 800148e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001492:	f083 0301 	eor.w	r3, r3, #1
 8001496:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800149a:	6822      	ldr	r2, [r4, #0]
 800149c:	6993      	ldr	r3, [r2, #24]
 800149e:	f043 0310 	orr.w	r3, r3, #16
 80014a2:	6193      	str	r3, [r2, #24]
 80014a4:	e58e      	b.n	8000fc4 <HAL_HCD_IRQHandler+0x164>
 80014a6:	bf00      	nop
 80014a8:	1ff80000 	.word	0x1ff80000

080014ac <HAL_HCD_Start>:
{
 80014ac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hhcd);
 80014ae:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
{
 80014b2:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d00d      	beq.n	80014d4 <HAL_HCD_Start+0x28>
 80014b8:	2501      	movs	r5, #1
 80014ba:	f880 52b8 	strb.w	r5, [r0, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 80014be:	6800      	ldr	r0, [r0, #0]
 80014c0:	f001 f98b 	bl	80027da <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80014c4:	4629      	mov	r1, r5
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	f001 fa31 	bl	800292e <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 80014cc:	2000      	movs	r0, #0
 80014ce:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hhcd);
 80014d4:	2002      	movs	r0, #2
}
 80014d6:	bd38      	pop	{r3, r4, r5, pc}

080014d8 <HAL_HCD_Stop>:
  __HAL_LOCK(hhcd);
 80014d8:	f890 32b8 	ldrb.w	r3, [r0, #696]	; 0x2b8
 80014dc:	2b01      	cmp	r3, #1
{
 80014de:	b510      	push	{r4, lr}
 80014e0:	4604      	mov	r4, r0
  __HAL_LOCK(hhcd);
 80014e2:	d009      	beq.n	80014f8 <HAL_HCD_Stop+0x20>
 80014e4:	2301      	movs	r3, #1
 80014e6:	f880 32b8 	strb.w	r3, [r0, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	f001 fc5c 	bl	8002da8 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80014f0:	2000      	movs	r0, #0
 80014f2:	f884 02b8 	strb.w	r0, [r4, #696]	; 0x2b8
  return HAL_OK;
 80014f6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hhcd);
 80014f8:	2002      	movs	r0, #2
}
 80014fa:	bd10      	pop	{r4, pc}

080014fc <HAL_HCD_ResetPort>:
  return (USB_ResetPort(hhcd->Instance));
 80014fc:	6800      	ldr	r0, [r0, #0]
 80014fe:	f001 b9f8 	b.w	80028f2 <USB_ResetPort>

08001502 <HAL_HCD_HC_GetURBState>:
  return hhcd->hc[chnum].urb_state;
 8001502:	2328      	movs	r3, #40	; 0x28
 8001504:	fb03 0101 	mla	r1, r3, r1, r0
}
 8001508:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
 800150c:	4770      	bx	lr

0800150e <HAL_HCD_GetCurrentFrame>:
  return (USB_GetCurrentFrame(hhcd->Instance));
 800150e:	6800      	ldr	r0, [r0, #0]
 8001510:	f001 baa1 	b.w	8002a56 <USB_GetCurrentFrame>

08001514 <HAL_HCD_GetCurrentSpeed>:
  return (USB_GetHostSpeed(hhcd->Instance));
 8001514:	6800      	ldr	r0, [r0, #0]
 8001516:	f001 ba93 	b.w	8002a40 <USB_GetHostSpeed>

0800151a <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800151a:	01d2      	lsls	r2, r2, #7

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800151c:	f04f 0c00 	mov.w	ip, #0
{
 8001520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001524:	3284      	adds	r2, #132	; 0x84
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001526:	6804      	ldr	r4, [r0, #0]
 8001528:	684f      	ldr	r7, [r1, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800152a:	18a3      	adds	r3, r4, r2
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800152c:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800152e:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001532:	6858      	ldr	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001534:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001538:	f10e 0601 	add.w	r6, lr, #1
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800153c:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001540:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8001544:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8001546:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001548:	68e0      	ldr	r0, [r4, #12]
 800154a:	f3c0 400b 	ubfx	r0, r0, #16, #12
 800154e:	4430      	add	r0, r6
 8001550:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001554:	68cd      	ldr	r5, [r1, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8001556:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8001558:	68e0      	ldr	r0, [r4, #12]
 800155a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 800155e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8001560:	6898      	ldr	r0, [r3, #8]
 8001562:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8001566:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001568:	6888      	ldr	r0, [r1, #8]
 800156a:	68e6      	ldr	r6, [r4, #12]
 800156c:	3001      	adds	r0, #1
 800156e:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8001572:	4430      	add	r0, r6
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001574:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8001576:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800157a:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800157c:	6918      	ldr	r0, [r3, #16]
 800157e:	f020 0007 	bic.w	r0, r0, #7
 8001582:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8001584:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001586:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8001588:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800158c:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8001590:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8001594:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8001598:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 800159c:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 80015a0:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80015a4:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80015a6:	6958      	ldr	r0, [r3, #20]
 80015a8:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80015ac:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80015ae:	6948      	ldr	r0, [r1, #20]
 80015b0:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80015b2:	69d8      	ldr	r0, [r3, #28]
 80015b4:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 80015b8:	f020 0007 	bic.w	r0, r0, #7
 80015bc:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80015be:	6a08      	ldr	r0, [r1, #32]
 80015c0:	69cd      	ldr	r5, [r1, #28]
 80015c2:	4305      	orrs	r5, r0
 80015c4:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80015c6:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80015c8:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80015ca:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80015ce:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80015d0:	b31e      	cbz	r6, 800161a <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80015d2:	2e01      	cmp	r6, #1
 80015d4:	d023      	beq.n	800161e <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80015d6:	1eb0      	subs	r0, r6, #2
 80015d8:	2802      	cmp	r0, #2
 80015da:	d922      	bls.n	8001622 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80015dc:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 80015de:	bf0c      	ite	eq
 80015e0:	2002      	moveq	r0, #2
 80015e2:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80015e4:	6add      	ldr	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80015e6:	eba7 070e 	sub.w	r7, r7, lr
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80015ea:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 80015ee:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80015f0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80015f2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80015f4:	4345      	muls	r5, r0
 80015f6:	4378      	muls	r0, r7
 80015f8:	3003      	adds	r0, #3
 80015fa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80015fe:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8001600:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001602:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8001606:	f020 0007 	bic.w	r0, r0, #7
 800160a:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800160c:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800160e:	58a3      	ldr	r3, [r4, r2]
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	50a3      	str	r3, [r4, r2]
 8001616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 800161a:	2004      	movs	r0, #4
 800161c:	e7e2      	b.n	80015e4 <LTDC_SetConfig+0xca>
    tmp = 3U;
 800161e:	2003      	movs	r0, #3
 8001620:	e7e0      	b.n	80015e4 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8001622:	2002      	movs	r0, #2
 8001624:	e7de      	b.n	80015e4 <LTDC_SetConfig+0xca>
	...

08001628 <HAL_LTDC_Init>:
{
 8001628:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800162a:	4604      	mov	r4, r0
 800162c:	2800      	cmp	r0, #0
 800162e:	d063      	beq.n	80016f8 <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8001630:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8001634:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001638:	b91b      	cbnz	r3, 8001642 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800163a:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 800163e:	f004 ff1b 	bl	8006478 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001642:	2302      	movs	r3, #2
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001644:	68a0      	ldr	r0, [r4, #8]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001646:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800164a:	6823      	ldr	r3, [r4, #0]
 800164c:	699a      	ldr	r2, [r3, #24]
 800164e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8001652:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001654:	6862      	ldr	r2, [r4, #4]
 8001656:	6999      	ldr	r1, [r3, #24]
 8001658:	4302      	orrs	r2, r0
 800165a:	68e0      	ldr	r0, [r4, #12]
 800165c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800165e:	6920      	ldr	r0, [r4, #16]
 8001660:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8001662:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001664:	430a      	orrs	r2, r1
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8001666:	4925      	ldr	r1, [pc, #148]	; (80016fc <HAL_LTDC_Init+0xd4>)
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8001668:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800166a:	689a      	ldr	r2, [r3, #8]
 800166c:	400a      	ands	r2, r1
 800166e:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8001670:	689a      	ldr	r2, [r3, #8]
 8001672:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001676:	69a0      	ldr	r0, [r4, #24]
 8001678:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800167a:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800167c:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800167e:	68da      	ldr	r2, [r3, #12]
 8001680:	400a      	ands	r2, r1
 8001682:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800168a:	6a20      	ldr	r0, [r4, #32]
 800168c:	4302      	orrs	r2, r0
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800168e:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8001690:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8001692:	691a      	ldr	r2, [r3, #16]
 8001694:	400a      	ands	r2, r1
 8001696:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8001698:	691a      	ldr	r2, [r3, #16]
 800169a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800169e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80016a0:	4302      	orrs	r2, r0
 80016a2:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4011      	ands	r1, r2
 80016a8:	6159      	str	r1, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80016aa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80016ac:	695a      	ldr	r2, [r3, #20]
 80016ae:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80016b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80016b4:	430a      	orrs	r2, r1
 80016b6:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80016b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80016ba:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80016be:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80016c2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80016c6:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80016c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016ca:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 80016ce:	430a      	orrs	r2, r1
 80016d0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80016d4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80016d8:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80016da:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80016dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016de:	f042 0206 	orr.w	r2, r2, #6
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 80016e4:	699a      	ldr	r2, [r3, #24]
 80016e6:	f042 0201 	orr.w	r2, r2, #1
 80016ea:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80016ec:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80016ee:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 80016f2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80016f8:	2001      	movs	r0, #1
}
 80016fa:	bd38      	pop	{r3, r4, r5, pc}
 80016fc:	f000f800 	.word	0xf000f800

08001700 <HAL_LTDC_ConfigLayer>:
{
 8001700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 8001702:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
{
 8001706:	4606      	mov	r6, r0
 8001708:	468e      	mov	lr, r1
 800170a:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800170c:	2b01      	cmp	r3, #1
 800170e:	f04f 0002 	mov.w	r0, #2
 8001712:	d01d      	beq.n	8001750 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001714:	2434      	movs	r4, #52	; 0x34
 8001716:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001718:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  __HAL_LOCK(hltdc);
 800171c:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800171e:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8001722:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8001726:	3438      	adds	r4, #56	; 0x38
 8001728:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800172c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800172e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001730:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001732:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001734:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001736:	4630      	mov	r0, r6
 8001738:	4662      	mov	r2, ip
 800173a:	4671      	mov	r1, lr
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800173c:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800173e:	f7ff feec 	bl	800151a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001742:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8001744:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001746:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8001748:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 800174c:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8001750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001752 <HAL_LTDC_SetAddress>:
  __HAL_LOCK(hltdc);
 8001752:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001756:	2b01      	cmp	r3, #1
 8001758:	f04f 0302 	mov.w	r3, #2
{
 800175c:	b570      	push	{r4, r5, r6, lr}
 800175e:	4604      	mov	r4, r0
  __HAL_LOCK(hltdc);
 8001760:	d015      	beq.n	800178e <HAL_LTDC_SetAddress+0x3c>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8001762:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  pLayerCfg->FBStartAdress = Address;
 8001766:	2334      	movs	r3, #52	; 0x34
  __HAL_LOCK(hltdc);
 8001768:	2501      	movs	r5, #1
  pLayerCfg->FBStartAdress = Address;
 800176a:	4353      	muls	r3, r2
  __HAL_LOCK(hltdc);
 800176c:	f880 50a0 	strb.w	r5, [r0, #160]	; 0xa0
  pLayerCfg->FBStartAdress = Address;
 8001770:	18c6      	adds	r6, r0, r3
 8001772:	65f1      	str	r1, [r6, #92]	; 0x5c
  pLayerCfg = &hltdc->LayerCfg[LayerIdx];
 8001774:	f103 0138 	add.w	r1, r3, #56	; 0x38
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8001778:	4401      	add	r1, r0
 800177a:	f7ff fece 	bl	800151a <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800177e:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hltdc);
 8001780:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8001782:	625d      	str	r5, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8001784:	f884 50a1 	strb.w	r5, [r4, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8001788:	f884 00a0 	strb.w	r0, [r4, #160]	; 0xa0
  return HAL_OK;
 800178c:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hltdc);
 800178e:	4618      	mov	r0, r3
}
 8001790:	bd70      	pop	{r4, r5, r6, pc}

08001792 <HAL_LTDC_Reload>:
  __HAL_LOCK(hltdc);
 8001792:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8001796:	2b01      	cmp	r3, #1
 8001798:	f04f 0302 	mov.w	r3, #2
 800179c:	d00d      	beq.n	80017ba <HAL_LTDC_Reload+0x28>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800179e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_RR);
 80017a2:	6803      	ldr	r3, [r0, #0]
 80017a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017a6:	f042 0208 	orr.w	r2, r2, #8
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
  hltdc->Instance->SRCR = ReloadType;
 80017ac:	6259      	str	r1, [r3, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80017ae:	2301      	movs	r3, #1
 80017b0:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80017b4:	2300      	movs	r3, #0
 80017b6:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80017ba:	4618      	mov	r0, r3
}
 80017bc:	4770      	bx	lr
	...

080017c0 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80017c0:	4b19      	ldr	r3, [pc, #100]	; (8001828 <HAL_PWREx_EnableOverDrive+0x68>)
{
 80017c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017c6:	4c19      	ldr	r4, [pc, #100]	; (800182c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80017c8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d4:	9301      	str	r3, [sp, #4]
 80017d6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80017d8:	6823      	ldr	r3, [r4, #0]
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017e0:	f7fe ff2a 	bl	8000638 <HAL_GetTick>
 80017e4:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80017e6:	6863      	ldr	r3, [r4, #4]
 80017e8:	03da      	lsls	r2, r3, #15
 80017ea:	d50c      	bpl.n	8001806 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f2:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80017f4:	f7fe ff20 	bl	8000638 <HAL_GetTick>

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017f8:	4c0c      	ldr	r4, [pc, #48]	; (800182c <HAL_PWREx_EnableOverDrive+0x6c>)
  tickstart = HAL_GetTick();
 80017fa:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017fc:	6863      	ldr	r3, [r4, #4]
 80017fe:	039b      	lsls	r3, r3, #14
 8001800:	d50a      	bpl.n	8001818 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001802:	2000      	movs	r0, #0
 8001804:	e006      	b.n	8001814 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001806:	f7fe ff17 	bl	8000638 <HAL_GetTick>
 800180a:	1b40      	subs	r0, r0, r5
 800180c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001810:	d9e9      	bls.n	80017e6 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001812:	2003      	movs	r0, #3
}
 8001814:	b003      	add	sp, #12
 8001816:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001818:	f7fe ff0e 	bl	8000638 <HAL_GetTick>
 800181c:	1b40      	subs	r0, r0, r5
 800181e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001822:	d9eb      	bls.n	80017fc <HAL_PWREx_EnableOverDrive+0x3c>
 8001824:	e7f5      	b.n	8001812 <HAL_PWREx_EnableOverDrive+0x52>
 8001826:	bf00      	nop
 8001828:	40023800 	.word	0x40023800
 800182c:	40007000 	.word	0x40007000

08001830 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001830:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001834:	4604      	mov	r4, r0
 8001836:	b908      	cbnz	r0, 800183c <HAL_RCC_OscConfig+0xc>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001838:	2001      	movs	r0, #1
 800183a:	e03f      	b.n	80018bc <HAL_RCC_OscConfig+0x8c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183c:	6803      	ldr	r3, [r0, #0]
 800183e:	07d8      	lsls	r0, r3, #31
 8001840:	d410      	bmi.n	8001864 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001842:	6823      	ldr	r3, [r4, #0]
 8001844:	0799      	lsls	r1, r3, #30
 8001846:	d460      	bmi.n	800190a <HAL_RCC_OscConfig+0xda>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	0719      	lsls	r1, r3, #28
 800184c:	f100 80a5 	bmi.w	800199a <HAL_RCC_OscConfig+0x16a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	075a      	lsls	r2, r3, #29
 8001854:	f100 80c6 	bmi.w	80019e4 <HAL_RCC_OscConfig+0x1b4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001858:	69a0      	ldr	r0, [r4, #24]
 800185a:	2800      	cmp	r0, #0
 800185c:	f040 8130 	bne.w	8001ac0 <HAL_RCC_OscConfig+0x290>
      }
    }
  }
  return HAL_OK;
 8001860:	2000      	movs	r0, #0
 8001862:	e02b      	b.n	80018bc <HAL_RCC_OscConfig+0x8c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001864:	4b94      	ldr	r3, [pc, #592]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	f002 020c 	and.w	r2, r2, #12
 800186c:	2a04      	cmp	r2, #4
 800186e:	d007      	beq.n	8001880 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001870:	689a      	ldr	r2, [r3, #8]
 8001872:	f002 020c 	and.w	r2, r2, #12
 8001876:	2a08      	cmp	r2, #8
 8001878:	d10a      	bne.n	8001890 <HAL_RCC_OscConfig+0x60>
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	025a      	lsls	r2, r3, #9
 800187e:	d507      	bpl.n	8001890 <HAL_RCC_OscConfig+0x60>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001880:	4b8d      	ldr	r3, [pc, #564]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	039b      	lsls	r3, r3, #14
 8001886:	d5dc      	bpl.n	8001842 <HAL_RCC_OscConfig+0x12>
 8001888:	6863      	ldr	r3, [r4, #4]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1d9      	bne.n	8001842 <HAL_RCC_OscConfig+0x12>
 800188e:	e7d3      	b.n	8001838 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001890:	6863      	ldr	r3, [r4, #4]
 8001892:	4d89      	ldr	r5, [pc, #548]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001894:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001898:	d113      	bne.n	80018c2 <HAL_RCC_OscConfig+0x92>
 800189a:	682b      	ldr	r3, [r5, #0]
 800189c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018a2:	f7fe fec9 	bl	8000638 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018a6:	4d84      	ldr	r5, [pc, #528]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
        tickstart = HAL_GetTick();
 80018a8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	682b      	ldr	r3, [r5, #0]
 80018ac:	039f      	lsls	r7, r3, #14
 80018ae:	d4c8      	bmi.n	8001842 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b0:	f7fe fec2 	bl	8000638 <HAL_GetTick>
 80018b4:	1b80      	subs	r0, r0, r6
 80018b6:	2864      	cmp	r0, #100	; 0x64
 80018b8:	d9f7      	bls.n	80018aa <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 80018ba:	2003      	movs	r0, #3
}
 80018bc:	b002      	add	sp, #8
 80018be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c2:	b99b      	cbnz	r3, 80018ec <HAL_RCC_OscConfig+0xbc>
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018ca:	602b      	str	r3, [r5, #0]
 80018cc:	682b      	ldr	r3, [r5, #0]
 80018ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018d2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018d4:	f7fe feb0 	bl	8000638 <HAL_GetTick>
 80018d8:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	682b      	ldr	r3, [r5, #0]
 80018dc:	0398      	lsls	r0, r3, #14
 80018de:	d5b0      	bpl.n	8001842 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e0:	f7fe feaa 	bl	8000638 <HAL_GetTick>
 80018e4:	1b80      	subs	r0, r0, r6
 80018e6:	2864      	cmp	r0, #100	; 0x64
 80018e8:	d9f7      	bls.n	80018da <HAL_RCC_OscConfig+0xaa>
 80018ea:	e7e6      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018f0:	682b      	ldr	r3, [r5, #0]
 80018f2:	d103      	bne.n	80018fc <HAL_RCC_OscConfig+0xcc>
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f8:	602b      	str	r3, [r5, #0]
 80018fa:	e7ce      	b.n	800189a <HAL_RCC_OscConfig+0x6a>
 80018fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001900:	602b      	str	r3, [r5, #0]
 8001902:	682b      	ldr	r3, [r5, #0]
 8001904:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001908:	e7ca      	b.n	80018a0 <HAL_RCC_OscConfig+0x70>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800190a:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 800190c:	689a      	ldr	r2, [r3, #8]
 800190e:	f012 0f0c 	tst.w	r2, #12
 8001912:	d007      	beq.n	8001924 <HAL_RCC_OscConfig+0xf4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001914:	689a      	ldr	r2, [r3, #8]
 8001916:	f002 020c 	and.w	r2, r2, #12
 800191a:	2a08      	cmp	r2, #8
 800191c:	d111      	bne.n	8001942 <HAL_RCC_OscConfig+0x112>
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	0259      	lsls	r1, r3, #9
 8001922:	d40e      	bmi.n	8001942 <HAL_RCC_OscConfig+0x112>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001924:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	0792      	lsls	r2, r2, #30
 800192a:	d502      	bpl.n	8001932 <HAL_RCC_OscConfig+0x102>
 800192c:	68e2      	ldr	r2, [r4, #12]
 800192e:	2a01      	cmp	r2, #1
 8001930:	d182      	bne.n	8001838 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001932:	681a      	ldr	r2, [r3, #0]
 8001934:	6921      	ldr	r1, [r4, #16]
 8001936:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800193a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800193e:	601a      	str	r2, [r3, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001940:	e782      	b.n	8001848 <HAL_RCC_OscConfig+0x18>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001942:	68e3      	ldr	r3, [r4, #12]
 8001944:	4d5c      	ldr	r5, [pc, #368]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001946:	b1bb      	cbz	r3, 8001978 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_ENABLE();
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	f043 0301 	orr.w	r3, r3, #1
 800194e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001950:	f7fe fe72 	bl	8000638 <HAL_GetTick>
 8001954:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001956:	682b      	ldr	r3, [r5, #0]
 8001958:	079f      	lsls	r7, r3, #30
 800195a:	d507      	bpl.n	800196c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800195c:	682b      	ldr	r3, [r5, #0]
 800195e:	6922      	ldr	r2, [r4, #16]
 8001960:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001964:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001968:	602b      	str	r3, [r5, #0]
 800196a:	e76d      	b.n	8001848 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196c:	f7fe fe64 	bl	8000638 <HAL_GetTick>
 8001970:	1b80      	subs	r0, r0, r6
 8001972:	2802      	cmp	r0, #2
 8001974:	d9ef      	bls.n	8001956 <HAL_RCC_OscConfig+0x126>
 8001976:	e7a0      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8001978:	682b      	ldr	r3, [r5, #0]
 800197a:	f023 0301 	bic.w	r3, r3, #1
 800197e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001980:	f7fe fe5a 	bl	8000638 <HAL_GetTick>
 8001984:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001986:	682b      	ldr	r3, [r5, #0]
 8001988:	0798      	lsls	r0, r3, #30
 800198a:	f57f af5d 	bpl.w	8001848 <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7fe fe53 	bl	8000638 <HAL_GetTick>
 8001992:	1b80      	subs	r0, r0, r6
 8001994:	2802      	cmp	r0, #2
 8001996:	d9f6      	bls.n	8001986 <HAL_RCC_OscConfig+0x156>
 8001998:	e78f      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800199a:	6963      	ldr	r3, [r4, #20]
 800199c:	4d46      	ldr	r5, [pc, #280]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 800199e:	b183      	cbz	r3, 80019c2 <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_LSI_ENABLE();
 80019a0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019a2:	f043 0301 	orr.w	r3, r3, #1
 80019a6:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019a8:	f7fe fe46 	bl	8000638 <HAL_GetTick>
 80019ac:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ae:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019b0:	079b      	lsls	r3, r3, #30
 80019b2:	f53f af4d 	bmi.w	8001850 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7fe fe3f 	bl	8000638 <HAL_GetTick>
 80019ba:	1b80      	subs	r0, r0, r6
 80019bc:	2802      	cmp	r0, #2
 80019be:	d9f6      	bls.n	80019ae <HAL_RCC_OscConfig+0x17e>
 80019c0:	e77b      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 80019c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019c4:	f023 0301 	bic.w	r3, r3, #1
 80019c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80019ca:	f7fe fe35 	bl	8000638 <HAL_GetTick>
 80019ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80019d2:	079f      	lsls	r7, r3, #30
 80019d4:	f57f af3c 	bpl.w	8001850 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7fe fe2e 	bl	8000638 <HAL_GetTick>
 80019dc:	1b80      	subs	r0, r0, r6
 80019de:	2802      	cmp	r0, #2
 80019e0:	d9f6      	bls.n	80019d0 <HAL_RCC_OscConfig+0x1a0>
 80019e2:	e76a      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019e4:	4b34      	ldr	r3, [pc, #208]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 80019e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80019e8:	00d0      	lsls	r0, r2, #3
 80019ea:	d427      	bmi.n	8001a3c <HAL_RCC_OscConfig+0x20c>
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80019ee:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019f4:	641a      	str	r2, [r3, #64]	; 0x40
 80019f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fc:	9301      	str	r3, [sp, #4]
 80019fe:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a00:	4d2e      	ldr	r5, [pc, #184]	; (8001abc <HAL_RCC_OscConfig+0x28c>)
 8001a02:	682b      	ldr	r3, [r5, #0]
 8001a04:	05d9      	lsls	r1, r3, #23
 8001a06:	d51b      	bpl.n	8001a40 <HAL_RCC_OscConfig+0x210>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a08:	68a3      	ldr	r3, [r4, #8]
 8001a0a:	4d2b      	ldr	r5, [pc, #172]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d127      	bne.n	8001a60 <HAL_RCC_OscConfig+0x230>
 8001a10:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a12:	f043 0301 	orr.w	r3, r3, #1
 8001a16:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a18:	f241 3588 	movw	r5, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001a1c:	f7fe fe0c 	bl	8000638 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a20:	4f25      	ldr	r7, [pc, #148]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
      tickstart = HAL_GetTick();
 8001a22:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001a26:	079b      	lsls	r3, r3, #30
 8001a28:	d53f      	bpl.n	8001aaa <HAL_RCC_OscConfig+0x27a>
    if (pwrclkchanged == SET)
 8001a2a:	2e00      	cmp	r6, #0
 8001a2c:	f43f af14 	beq.w	8001858 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_RCC_OscConfig+0x288>)
 8001a32:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001a34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	e70d      	b.n	8001858 <HAL_RCC_OscConfig+0x28>
  FlagStatus pwrclkchanged = RESET;
 8001a3c:	2600      	movs	r6, #0
 8001a3e:	e7df      	b.n	8001a00 <HAL_RCC_OscConfig+0x1d0>
      PWR->CR1 |= PWR_CR1_DBP;
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a46:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001a48:	f7fe fdf6 	bl	8000638 <HAL_GetTick>
 8001a4c:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4e:	682b      	ldr	r3, [r5, #0]
 8001a50:	05da      	lsls	r2, r3, #23
 8001a52:	d4d9      	bmi.n	8001a08 <HAL_RCC_OscConfig+0x1d8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a54:	f7fe fdf0 	bl	8000638 <HAL_GetTick>
 8001a58:	1bc0      	subs	r0, r0, r7
 8001a5a:	2864      	cmp	r0, #100	; 0x64
 8001a5c:	d9f7      	bls.n	8001a4e <HAL_RCC_OscConfig+0x21e>
 8001a5e:	e72c      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a60:	b9ab      	cbnz	r3, 8001a8e <HAL_RCC_OscConfig+0x25e>
 8001a62:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a64:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a68:	f023 0301 	bic.w	r3, r3, #1
 8001a6c:	672b      	str	r3, [r5, #112]	; 0x70
 8001a6e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a70:	f023 0304 	bic.w	r3, r3, #4
 8001a74:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001a76:	f7fe fddf 	bl	8000638 <HAL_GetTick>
 8001a7a:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a7c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a7e:	0798      	lsls	r0, r3, #30
 8001a80:	d5d3      	bpl.n	8001a2a <HAL_RCC_OscConfig+0x1fa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a82:	f7fe fdd9 	bl	8000638 <HAL_GetTick>
 8001a86:	1bc0      	subs	r0, r0, r7
 8001a88:	4540      	cmp	r0, r8
 8001a8a:	d9f7      	bls.n	8001a7c <HAL_RCC_OscConfig+0x24c>
 8001a8c:	e715      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a8e:	2b05      	cmp	r3, #5
 8001a90:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001a92:	d103      	bne.n	8001a9c <HAL_RCC_OscConfig+0x26c>
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	672b      	str	r3, [r5, #112]	; 0x70
 8001a9a:	e7b9      	b.n	8001a10 <HAL_RCC_OscConfig+0x1e0>
 8001a9c:	f023 0301 	bic.w	r3, r3, #1
 8001aa0:	672b      	str	r3, [r5, #112]	; 0x70
 8001aa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001aa4:	f023 0304 	bic.w	r3, r3, #4
 8001aa8:	e7b5      	b.n	8001a16 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aaa:	f7fe fdc5 	bl	8000638 <HAL_GetTick>
 8001aae:	eba0 0008 	sub.w	r0, r0, r8
 8001ab2:	42a8      	cmp	r0, r5
 8001ab4:	d9b6      	bls.n	8001a24 <HAL_RCC_OscConfig+0x1f4>
 8001ab6:	e700      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac0:	4d38      	ldr	r5, [pc, #224]	; (8001ba4 <HAL_RCC_OscConfig+0x374>)
 8001ac2:	68ab      	ldr	r3, [r5, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d041      	beq.n	8001b50 <HAL_RCC_OscConfig+0x320>
        __HAL_RCC_PLL_DISABLE();
 8001acc:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ace:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8001ad0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ad4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad6:	d12e      	bne.n	8001b36 <HAL_RCC_OscConfig+0x306>
        tickstart = HAL_GetTick();
 8001ad8:	f7fe fdae 	bl	8000638 <HAL_GetTick>
 8001adc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	682b      	ldr	r3, [r5, #0]
 8001ae0:	0199      	lsls	r1, r3, #6
 8001ae2:	d422      	bmi.n	8001b2a <HAL_RCC_OscConfig+0x2fa>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ae4:	6a22      	ldr	r2, [r4, #32]
 8001ae6:	69e3      	ldr	r3, [r4, #28]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001aec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001af0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001af4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001af6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001afa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001afc:	4c29      	ldr	r4, [pc, #164]	; (8001ba4 <HAL_RCC_OscConfig+0x374>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afe:	0852      	lsrs	r2, r2, #1
 8001b00:	3a01      	subs	r2, #1
 8001b02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001b06:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001b08:	682b      	ldr	r3, [r5, #0]
 8001b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001b10:	f7fe fd92 	bl	8000638 <HAL_GetTick>
 8001b14:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b16:	6823      	ldr	r3, [r4, #0]
 8001b18:	019a      	lsls	r2, r3, #6
 8001b1a:	f53f aea1 	bmi.w	8001860 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b1e:	f7fe fd8b 	bl	8000638 <HAL_GetTick>
 8001b22:	1b40      	subs	r0, r0, r5
 8001b24:	2802      	cmp	r0, #2
 8001b26:	d9f6      	bls.n	8001b16 <HAL_RCC_OscConfig+0x2e6>
 8001b28:	e6c7      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7fe fd85 	bl	8000638 <HAL_GetTick>
 8001b2e:	1b80      	subs	r0, r0, r6
 8001b30:	2802      	cmp	r0, #2
 8001b32:	d9d4      	bls.n	8001ade <HAL_RCC_OscConfig+0x2ae>
 8001b34:	e6c1      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8001b36:	f7fe fd7f 	bl	8000638 <HAL_GetTick>
 8001b3a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b3c:	682b      	ldr	r3, [r5, #0]
 8001b3e:	019b      	lsls	r3, r3, #6
 8001b40:	f57f ae8e 	bpl.w	8001860 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b44:	f7fe fd78 	bl	8000638 <HAL_GetTick>
 8001b48:	1b00      	subs	r0, r0, r4
 8001b4a:	2802      	cmp	r0, #2
 8001b4c:	d9f6      	bls.n	8001b3c <HAL_RCC_OscConfig+0x30c>
 8001b4e:	e6b4      	b.n	80018ba <HAL_RCC_OscConfig+0x8a>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b50:	2801      	cmp	r0, #1
      pll_config = RCC->PLLCFGR;
 8001b52:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b54:	f43f aeb2 	beq.w	80018bc <HAL_RCC_OscConfig+0x8c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b5c:	69e1      	ldr	r1, [r4, #28]
 8001b5e:	428a      	cmp	r2, r1
 8001b60:	f47f ae6a 	bne.w	8001838 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b64:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	6a21      	ldr	r1, [r4, #32]
 8001b6a:	428a      	cmp	r2, r1
 8001b6c:	f47f ae64 	bne.w	8001838 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b70:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b74:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b76:	401a      	ands	r2, r3
 8001b78:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001b7c:	f47f ae5c 	bne.w	8001838 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001b82:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001b86:	0852      	lsrs	r2, r2, #1
 8001b88:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001b8e:	f47f ae53 	bne.w	8001838 <HAL_RCC_OscConfig+0x8>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001b94:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b98:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
    return HAL_ERROR;
 8001b9c:	bf14      	ite	ne
 8001b9e:	2001      	movne	r0, #1
 8001ba0:	2000      	moveq	r0, #0
 8001ba2:	e68b      	b.n	80018bc <HAL_RCC_OscConfig+0x8c>
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ba8:	4913      	ldr	r1, [pc, #76]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001baa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bac:	688b      	ldr	r3, [r1, #8]
 8001bae:	f003 030c 	and.w	r3, r3, #12
 8001bb2:	2b04      	cmp	r3, #4
 8001bb4:	d003      	beq.n	8001bbe <HAL_RCC_GetSysClockFreq+0x16>
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bba:	4810      	ldr	r0, [pc, #64]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001bbc:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001bbe:	4810      	ldr	r0, [pc, #64]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x58>)
 8001bc0:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc2:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bc4:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bc6:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bc8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001bcc:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bd0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001bd4:	bf1a      	itte	ne
 8001bd6:	480a      	ldrne	r0, [pc, #40]	; (8001c00 <HAL_RCC_GetSysClockFreq+0x58>)
 8001bd8:	2300      	movne	r3, #0
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001bda:	4808      	ldreq	r0, [pc, #32]	; (8001bfc <HAL_RCC_GetSysClockFreq+0x54>)
 8001bdc:	fba1 0100 	umull	r0, r1, r1, r0
 8001be0:	f7fe fb66 	bl	80002b0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001be4:	4b04      	ldr	r3, [pc, #16]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001bec:	3301      	adds	r3, #1
 8001bee:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8001bf0:	fbb0 f0f3 	udiv	r0, r0, r3
 8001bf4:	bd08      	pop	{r3, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40023800 	.word	0x40023800
 8001bfc:	00f42400 	.word	0x00f42400
 8001c00:	017d7840 	.word	0x017d7840

08001c04 <HAL_RCC_ClockConfig>:
{
 8001c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c08:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001c0a:	4604      	mov	r4, r0
 8001c0c:	b910      	cbnz	r0, 8001c14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001c0e:	2001      	movs	r0, #1
 8001c10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c14:	4a46      	ldr	r2, [pc, #280]	; (8001d30 <HAL_RCC_ClockConfig+0x12c>)
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f003 030f 	and.w	r3, r3, #15
 8001c1c:	428b      	cmp	r3, r1
 8001c1e:	d329      	bcc.n	8001c74 <HAL_RCC_ClockConfig+0x70>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	6821      	ldr	r1, [r4, #0]
 8001c22:	078f      	lsls	r7, r1, #30
 8001c24:	d431      	bmi.n	8001c8a <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c26:	07c8      	lsls	r0, r1, #31
 8001c28:	d444      	bmi.n	8001cb4 <HAL_RCC_ClockConfig+0xb0>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c2a:	4a41      	ldr	r2, [pc, #260]	; (8001d30 <HAL_RCC_ClockConfig+0x12c>)
 8001c2c:	6813      	ldr	r3, [r2, #0]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	429d      	cmp	r5, r3
 8001c34:	d368      	bcc.n	8001d08 <HAL_RCC_ClockConfig+0x104>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c36:	6822      	ldr	r2, [r4, #0]
 8001c38:	0751      	lsls	r1, r2, #29
 8001c3a:	d471      	bmi.n	8001d20 <HAL_RCC_ClockConfig+0x11c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c3c:	0713      	lsls	r3, r2, #28
 8001c3e:	d507      	bpl.n	8001c50 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c40:	4a3c      	ldr	r2, [pc, #240]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
 8001c42:	6921      	ldr	r1, [r4, #16]
 8001c44:	6893      	ldr	r3, [r2, #8]
 8001c46:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001c4a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001c4e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c50:	f7ff ffaa 	bl	8001ba8 <HAL_RCC_GetSysClockFreq>
 8001c54:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
 8001c56:	4a38      	ldr	r2, [pc, #224]	; (8001d38 <HAL_RCC_ClockConfig+0x134>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001c5e:	5cd3      	ldrb	r3, [r2, r3]
 8001c60:	40d8      	lsrs	r0, r3
 8001c62:	4b36      	ldr	r3, [pc, #216]	; (8001d3c <HAL_RCC_ClockConfig+0x138>)
 8001c64:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001c66:	4b36      	ldr	r3, [pc, #216]	; (8001d40 <HAL_RCC_ClockConfig+0x13c>)
 8001c68:	6818      	ldr	r0, [r3, #0]
 8001c6a:	f7fe fca9 	bl	80005c0 <HAL_InitTick>
  return HAL_OK;
 8001c6e:	2000      	movs	r0, #0
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c74:	6813      	ldr	r3, [r2, #0]
 8001c76:	f023 030f 	bic.w	r3, r3, #15
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c7e:	6813      	ldr	r3, [r2, #0]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	4299      	cmp	r1, r3
 8001c86:	d1c2      	bne.n	8001c0e <HAL_RCC_ClockConfig+0xa>
 8001c88:	e7ca      	b.n	8001c20 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c8a:	f011 0f04 	tst.w	r1, #4
 8001c8e:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
 8001c90:	d003      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001c98:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	070e      	lsls	r6, r1, #28
 8001c9c:	d503      	bpl.n	8001ca6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c9e:	689a      	ldr	r2, [r3, #8]
 8001ca0:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001ca4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca6:	689a      	ldr	r2, [r3, #8]
 8001ca8:	68a0      	ldr	r0, [r4, #8]
 8001caa:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001cae:	4302      	orrs	r2, r0
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	e7b8      	b.n	8001c26 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb4:	6861      	ldr	r1, [r4, #4]
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
 8001cb8:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cba:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	d11c      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xf4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cbe:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	d0a4      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc4:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cca:	4e1a      	ldr	r6, [pc, #104]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ccc:	f022 0203 	bic.w	r2, r2, #3
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001cd4:	f7fe fcb0 	bl	8000638 <HAL_GetTick>
 8001cd8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	68b3      	ldr	r3, [r6, #8]
 8001cdc:	6862      	ldr	r2, [r4, #4]
 8001cde:	f003 030c 	and.w	r3, r3, #12
 8001ce2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001ce6:	d0a0      	beq.n	8001c2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce8:	f7fe fca6 	bl	8000638 <HAL_GetTick>
 8001cec:	1bc0      	subs	r0, r0, r7
 8001cee:	4540      	cmp	r0, r8
 8001cf0:	d9f3      	bls.n	8001cda <HAL_RCC_ClockConfig+0xd6>
        return HAL_TIMEOUT;
 8001cf2:	2003      	movs	r0, #3
}
 8001cf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cf8:	2902      	cmp	r1, #2
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_ClockConfig+0xfe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cfc:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001d00:	e7df      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xbe>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d02:	f012 0f02 	tst.w	r2, #2
 8001d06:	e7dc      	b.n	8001cc2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d08:	6813      	ldr	r3, [r2, #0]
 8001d0a:	f023 030f 	bic.w	r3, r3, #15
 8001d0e:	432b      	orrs	r3, r5
 8001d10:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d12:	6813      	ldr	r3, [r2, #0]
 8001d14:	f003 030f 	and.w	r3, r3, #15
 8001d18:	429d      	cmp	r5, r3
 8001d1a:	f47f af78 	bne.w	8001c0e <HAL_RCC_ClockConfig+0xa>
 8001d1e:	e78a      	b.n	8001c36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d20:	4904      	ldr	r1, [pc, #16]	; (8001d34 <HAL_RCC_ClockConfig+0x130>)
 8001d22:	68e0      	ldr	r0, [r4, #12]
 8001d24:	688b      	ldr	r3, [r1, #8]
 8001d26:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001d2a:	4303      	orrs	r3, r0
 8001d2c:	608b      	str	r3, [r1, #8]
 8001d2e:	e785      	b.n	8001c3c <HAL_RCC_ClockConfig+0x38>
 8001d30:	40023c00 	.word	0x40023c00
 8001d34:	40023800 	.word	0x40023800
 8001d38:	08008efa 	.word	0x08008efa
 8001d3c:	20000050 	.word	0x20000050
 8001d40:	20000004 	.word	0x20000004

08001d44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d48:	6802      	ldr	r2, [r0, #0]
{
 8001d4a:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001d4c:	f012 0601 	ands.w	r6, r2, #1
 8001d50:	d00b      	beq.n	8001d6a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d52:	4bb8      	ldr	r3, [pc, #736]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d54:	6899      	ldr	r1, [r3, #8]
 8001d56:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001d5a:	6099      	str	r1, [r3, #8]
 8001d5c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001d5e:	6899      	ldr	r1, [r3, #8]
 8001d60:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001d62:	fab6 f686 	clz	r6, r6
 8001d66:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001d68:	6099      	str	r1, [r3, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001d6a:	f412 2500 	ands.w	r5, r2, #524288	; 0x80000
 8001d6e:	d012      	beq.n	8001d96 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d70:	49b0      	ldr	r1, [pc, #704]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d72:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001d74:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001d78:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d7c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001d80:	bf08      	it	eq
 8001d82:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d84:	ea43 0305 	orr.w	r3, r3, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d88:	bf16      	itet	ne
 8001d8a:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001d8e:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d90:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d92:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d96:	02d1      	lsls	r1, r2, #11
 8001d98:	d510      	bpl.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d9a:	48a6      	ldr	r0, [pc, #664]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001d9c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d9e:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001da2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001da6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001daa:	ea43 0301 	orr.w	r3, r3, r1
 8001dae:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001db2:	f000 8185 	beq.w	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001db6:	2900      	cmp	r1, #0
 8001db8:	bf08      	it	eq
 8001dba:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001dbc:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8001dc0:	bf18      	it	ne
 8001dc2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001dc4:	0692      	lsls	r2, r2, #26
 8001dc6:	d531      	bpl.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dc8:	4b9a      	ldr	r3, [pc, #616]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001dca:	4f9b      	ldr	r7, [pc, #620]	; (8002038 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001dcc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dd2:	641a      	str	r2, [r3, #64]	; 0x40
 8001dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de4:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001de6:	f7fe fc27 	bl	8000638 <HAL_GetTick>
 8001dea:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	05db      	lsls	r3, r3, #23
 8001df0:	f140 8168 	bpl.w	80020c4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001df4:	4f8f      	ldr	r7, [pc, #572]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001df6:	6f3b      	ldr	r3, [r7, #112]	; 0x70

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001df8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001dfc:	f040 816d 	bne.w	80020da <HAL_RCCEx_PeriphCLKConfig+0x396>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e00:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e02:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001e06:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001e0a:	4a8a      	ldr	r2, [pc, #552]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e0c:	f040 818b 	bne.w	8002126 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8001e10:	6891      	ldr	r1, [r2, #8]
 8001e12:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001e16:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001e1a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001e1e:	4301      	orrs	r1, r0
 8001e20:	6091      	str	r1, [r2, #8]
 8001e22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e26:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	06da      	lsls	r2, r3, #27
 8001e30:	d50c      	bpl.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001e32:	4a80      	ldr	r2, [pc, #512]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e34:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e38:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001e3c:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001e40:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001e44:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001e46:	4301      	orrs	r1, r0
 8001e48:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e4c:	045f      	lsls	r7, r3, #17
 8001e4e:	d508      	bpl.n	8001e62 <HAL_RCCEx_PeriphCLKConfig+0x11e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e50:	4978      	ldr	r1, [pc, #480]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e52:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001e54:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e58:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001e5c:	4302      	orrs	r2, r0
 8001e5e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001e62:	0418      	lsls	r0, r3, #16
 8001e64:	d508      	bpl.n	8001e78 <HAL_RCCEx_PeriphCLKConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001e66:	4973      	ldr	r1, [pc, #460]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e68:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001e6a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e6e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001e72:	4302      	orrs	r2, r0
 8001e74:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001e78:	03d9      	lsls	r1, r3, #15
 8001e7a:	d508      	bpl.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x14a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e7c:	496d      	ldr	r1, [pc, #436]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e7e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001e80:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e84:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e88:	4302      	orrs	r2, r0
 8001e8a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e8e:	039a      	lsls	r2, r3, #14
 8001e90:	d508      	bpl.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e92:	4968      	ldr	r1, [pc, #416]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001e94:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e96:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e9a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e9e:	4302      	orrs	r2, r0
 8001ea0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ea4:	065f      	lsls	r7, r3, #25
 8001ea6:	d508      	bpl.n	8001eba <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea8:	4962      	ldr	r1, [pc, #392]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eaa:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001eac:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001eb0:	f022 0203 	bic.w	r2, r2, #3
 8001eb4:	4302      	orrs	r2, r0
 8001eb6:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eba:	0618      	lsls	r0, r3, #24
 8001ebc:	d508      	bpl.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ebe:	495d      	ldr	r1, [pc, #372]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ec0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ec2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ec6:	f022 020c 	bic.w	r2, r2, #12
 8001eca:	4302      	orrs	r2, r0
 8001ecc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001ed0:	05d9      	lsls	r1, r3, #23
 8001ed2:	d508      	bpl.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001ed4:	4957      	ldr	r1, [pc, #348]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ed6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001ed8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001edc:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001ee0:	4302      	orrs	r2, r0
 8001ee2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001ee6:	059a      	lsls	r2, r3, #22
 8001ee8:	d508      	bpl.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eea:	4952      	ldr	r1, [pc, #328]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001eec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001eee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ef2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001ef6:	4302      	orrs	r2, r0
 8001ef8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001efc:	055f      	lsls	r7, r3, #21
 8001efe:	d508      	bpl.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001f00:	494c      	ldr	r1, [pc, #304]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001f04:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f08:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001f0c:	4302      	orrs	r2, r0
 8001f0e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001f12:	0518      	lsls	r0, r3, #20
 8001f14:	d508      	bpl.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001f16:	4947      	ldr	r1, [pc, #284]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f1a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f1e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001f22:	4302      	orrs	r2, r0
 8001f24:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001f28:	04d9      	lsls	r1, r3, #19
 8001f2a:	d508      	bpl.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f2c:	4941      	ldr	r1, [pc, #260]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f2e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001f30:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f34:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001f38:	4302      	orrs	r2, r0
 8001f3a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f3e:	049a      	lsls	r2, r3, #18
 8001f40:	d508      	bpl.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x210>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f42:	493c      	ldr	r1, [pc, #240]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f44:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001f46:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f4a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001f4e:	4302      	orrs	r2, r0
 8001f50:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f54:	025f      	lsls	r7, r3, #9
 8001f56:	d508      	bpl.n	8001f6a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f58:	4936      	ldr	r1, [pc, #216]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f5a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001f5c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f60:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f64:	4302      	orrs	r2, r0
 8001f66:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f6a:	0298      	lsls	r0, r3, #10
 8001f6c:	d50c      	bpl.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f6e:	4831      	ldr	r0, [pc, #196]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f70:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001f72:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001f76:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f7a:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001f7e:	bf08      	it	eq
 8001f80:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f82:	430a      	orrs	r2, r1
 8001f84:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001f88:	f013 0f08 	tst.w	r3, #8
 8001f8c:	bf18      	it	ne
 8001f8e:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f90:	0359      	lsls	r1, r3, #13
 8001f92:	d508      	bpl.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f94:	4927      	ldr	r1, [pc, #156]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001f96:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001f98:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fa0:	4302      	orrs	r2, r0
 8001fa2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	d509      	bpl.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001faa:	4922      	ldr	r1, [pc, #136]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fac:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001fb0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001fb4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001fb8:	4302      	orrs	r2, r0
 8001fba:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001fbe:	2e01      	cmp	r6, #1
 8001fc0:	f000 80b5 	beq.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8001fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001fc8:	f000 80b1 	beq.w	800212e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001fcc:	2d01      	cmp	r5, #1
 8001fce:	d175      	bne.n	80020bc <HAL_RCCEx_PeriphCLKConfig+0x378>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001fd0:	4d18      	ldr	r5, [pc, #96]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001fd2:	682b      	ldr	r3, [r5, #0]
 8001fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fd8:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fda:	f7fe fb2d 	bl	8000638 <HAL_GetTick>
 8001fde:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fe0:	682b      	ldr	r3, [r5, #0]
 8001fe2:	009f      	lsls	r7, r3, #2
 8001fe4:	f100 8127 	bmi.w	8002236 <HAL_RCCEx_PeriphCLKConfig+0x4f2>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001fe8:	6821      	ldr	r1, [r4, #0]
 8001fea:	030e      	lsls	r6, r1, #12
 8001fec:	d501      	bpl.n	8001ff2 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
 8001fee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001ff0:	b11b      	cbz	r3, 8001ffa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
 8001ff2:	02cd      	lsls	r5, r1, #11
 8001ff4:	d522      	bpl.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001ff6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001ff8:	bb03      	cbnz	r3, 800203c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ffa:	4a0e      	ldr	r2, [pc, #56]	; (8002034 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8001ffc:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002000:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002004:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002008:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800200c:	4303      	orrs	r3, r0
 800200e:	6960      	ldr	r0, [r4, #20]
 8002010:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002014:	69a0      	ldr	r0, [r4, #24]
 8002016:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 800201a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800201e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8002022:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002024:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002028:	3801      	subs	r0, #1
 800202a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 800202e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002032:	e003      	b.n	800203c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
 8002034:	40023800 	.word	0x40023800
 8002038:	40007000 	.word	0x40007000
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800203c:	0288      	lsls	r0, r1, #10
 800203e:	d515      	bpl.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x328>
 8002040:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002042:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002046:	d111      	bne.n	800206c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002048:	4a82      	ldr	r2, [pc, #520]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800204a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800204e:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002052:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002056:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800205a:	4303      	orrs	r3, r0
 800205c:	6960      	ldr	r0, [r4, #20]
 800205e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002062:	6a20      	ldr	r0, [r4, #32]
 8002064:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8002068:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800206c:	070a      	lsls	r2, r1, #28
 800206e:	d519      	bpl.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002070:	4978      	ldr	r1, [pc, #480]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002072:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002076:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800207a:	f002 6270 	and.w	r2, r2, #251658240	; 0xf000000
 800207e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002082:	4313      	orrs	r3, r2
 8002084:	6962      	ldr	r2, [r4, #20]
 8002086:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800208a:	69e2      	ldr	r2, [r4, #28]
 800208c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002094:	f8d1 308c 	ldr.w	r3, [r1, #140]	; 0x8c
 8002098:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800209a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020a4:	4c6b      	ldr	r4, [pc, #428]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80020a6:	6823      	ldr	r3, [r4, #0]
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ae:	f7fe fac3 	bl	8000638 <HAL_GetTick>
 80020b2:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020b4:	6823      	ldr	r3, [r4, #0]
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	f140 80c4 	bpl.w	8002244 <HAL_RCCEx_PeriphCLKConfig+0x500>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80020bc:	2000      	movs	r0, #0
 80020be:	e009      	b.n	80020d4 <HAL_RCCEx_PeriphCLKConfig+0x390>
      plli2sused = 1;
 80020c0:	2601      	movs	r6, #1
 80020c2:	e67b      	b.n	8001dbc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c4:	f7fe fab8 	bl	8000638 <HAL_GetTick>
 80020c8:	eba0 0008 	sub.w	r0, r0, r8
 80020cc:	2864      	cmp	r0, #100	; 0x64
 80020ce:	f67f ae8d 	bls.w	8001dec <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 80020d2:	2003      	movs	r0, #3
}
 80020d4:	b003      	add	sp, #12
 80020d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020da:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80020dc:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80020e0:	4293      	cmp	r3, r2
 80020e2:	f43f ae8d 	beq.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020f2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020f6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020fa:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80020fc:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002100:	07d8      	lsls	r0, r3, #31
 8002102:	f57f ae7d 	bpl.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8002106:	f7fe fa97 	bl	8000638 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210a:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800210e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002112:	0799      	lsls	r1, r3, #30
 8002114:	f53f ae74 	bmi.w	8001e00 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002118:	f7fe fa8e 	bl	8000638 <HAL_GetTick>
 800211c:	eba0 0008 	sub.w	r0, r0, r8
 8002120:	4548      	cmp	r0, r9
 8002122:	d9f5      	bls.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002124:	e7d5      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002126:	6891      	ldr	r1, [r2, #8]
 8002128:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800212c:	e678      	b.n	8001e20 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_PLLI2S_DISABLE();
 800212e:	4e49      	ldr	r6, [pc, #292]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002130:	6833      	ldr	r3, [r6, #0]
 8002132:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002136:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002138:	f7fe fa7e 	bl	8000638 <HAL_GetTick>
 800213c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800213e:	6833      	ldr	r3, [r6, #0]
 8002140:	011b      	lsls	r3, r3, #4
 8002142:	d472      	bmi.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002144:	6822      	ldr	r2, [r4, #0]
 8002146:	07d7      	lsls	r7, r2, #31
 8002148:	d512      	bpl.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800214a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800214c:	b983      	cbnz	r3, 8002170 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800214e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002152:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002156:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800215e:	430b      	orrs	r3, r1
 8002160:	6861      	ldr	r1, [r4, #4]
 8002162:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002166:	68a1      	ldr	r1, [r4, #8]
 8002168:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800216c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002170:	0316      	lsls	r6, r2, #12
 8002172:	d503      	bpl.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x438>
 8002174:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800217a:	d005      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x444>
 800217c:	02d0      	lsls	r0, r2, #11
 800217e:	d51e      	bpl.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x47a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002180:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002186:	d11a      	bne.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x47a>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002188:	4932      	ldr	r1, [pc, #200]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 800218a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800218e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002192:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002196:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800219a:	4303      	orrs	r3, r0
 800219c:	6860      	ldr	r0, [r4, #4]
 800219e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80021a2:	68e0      	ldr	r0, [r4, #12]
 80021a4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80021a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80021ac:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 80021b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021b2:	f020 001f 	bic.w	r0, r0, #31
 80021b6:	3b01      	subs	r3, #1
 80021b8:	4303      	orrs	r3, r0
 80021ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80021be:	01d1      	lsls	r1, r2, #7
 80021c0:	d511      	bpl.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x4a2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80021c2:	4924      	ldr	r1, [pc, #144]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 80021c4:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021c8:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80021cc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 80021d0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 80021d4:	4303      	orrs	r3, r0
 80021d6:	6860      	ldr	r0, [r4, #4]
 80021d8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80021dc:	6920      	ldr	r0, [r4, #16]
 80021de:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80021e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021e6:	0192      	lsls	r2, r2, #6
 80021e8:	d50d      	bpl.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021ea:	6923      	ldr	r3, [r4, #16]
 80021ec:	6862      	ldr	r2, [r4, #4]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021f4:	68e2      	ldr	r2, [r4, #12]
 80021f6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021fa:	68a2      	ldr	r2, [r4, #8]
 80021fc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002200:	4a14      	ldr	r2, [pc, #80]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002202:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002206:	4e13      	ldr	r6, [pc, #76]	; (8002254 <HAL_RCCEx_PeriphCLKConfig+0x510>)
 8002208:	6833      	ldr	r3, [r6, #0]
 800220a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800220e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002210:	f7fe fa12 	bl	8000638 <HAL_GetTick>
 8002214:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002216:	6833      	ldr	r3, [r6, #0]
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	f53f aed7 	bmi.w	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x288>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800221e:	f7fe fa0b 	bl	8000638 <HAL_GetTick>
 8002222:	1bc0      	subs	r0, r0, r7
 8002224:	2864      	cmp	r0, #100	; 0x64
 8002226:	d9f6      	bls.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002228:	e753      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800222a:	f7fe fa05 	bl	8000638 <HAL_GetTick>
 800222e:	1bc0      	subs	r0, r0, r7
 8002230:	2864      	cmp	r0, #100	; 0x64
 8002232:	d984      	bls.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 8002234:	e74d      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002236:	f7fe f9ff 	bl	8000638 <HAL_GetTick>
 800223a:	1b80      	subs	r0, r0, r6
 800223c:	2864      	cmp	r0, #100	; 0x64
 800223e:	f67f aecf 	bls.w	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x29c>
 8002242:	e746      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002244:	f7fe f9f8 	bl	8000638 <HAL_GetTick>
 8002248:	1b40      	subs	r0, r0, r5
 800224a:	2864      	cmp	r0, #100	; 0x64
 800224c:	f67f af32 	bls.w	80020b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 8002250:	e73f      	b.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8002252:	bf00      	nop
 8002254:	40023800 	.word	0x40023800

08002258 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8002258:	b510      	push	{r4, lr}
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800225a:	4604      	mov	r4, r0
 800225c:	b190      	cbz	r0, 8002284 <HAL_RNG_Init+0x2c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800225e:	7943      	ldrb	r3, [r0, #5]
 8002260:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002264:	b913      	cbnz	r3, 800226c <HAL_RNG_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8002266:	7102      	strb	r2, [r0, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8002268:	f004 f97c 	bl	8006564 <HAL_RNG_MspInit>
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800226c:	6822      	ldr	r2, [r4, #0]
  hrng->State = HAL_RNG_STATE_BUSY;
 800226e:	2302      	movs	r3, #2

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002270:	2000      	movs	r0, #0
  hrng->State = HAL_RNG_STATE_BUSY;
 8002272:	7163      	strb	r3, [r4, #5]
  __HAL_RNG_ENABLE(hrng);
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	f043 0304 	orr.w	r3, r3, #4
 800227a:	6013      	str	r3, [r2, #0]
  hrng->State = HAL_RNG_STATE_READY;
 800227c:	2301      	movs	r3, #1
 800227e:	7163      	strb	r3, [r4, #5]
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8002280:	60a0      	str	r0, [r4, #8]

  /* Return function status */
  return HAL_OK;
 8002282:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002284:	2001      	movs	r0, #1
}
 8002286:	bd10      	pop	{r4, pc}

08002288 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8002288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  /* Process Locked */
  __HAL_LOCK(hrng);
 800228a:	7903      	ldrb	r3, [r0, #4]
{
 800228c:	4604      	mov	r4, r0
 800228e:	460e      	mov	r6, r1
  __HAL_LOCK(hrng);
 8002290:	2b01      	cmp	r3, #1
 8002292:	d025      	beq.n	80022e0 <HAL_RNG_GenerateRandomNumber+0x58>
 8002294:	2001      	movs	r0, #1

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8002296:	7963      	ldrb	r3, [r4, #5]
 8002298:	4283      	cmp	r3, r0
  __HAL_LOCK(hrng);
 800229a:	7120      	strb	r0, [r4, #4]
  if (hrng->State == HAL_RNG_STATE_READY)
 800229c:	d11d      	bne.n	80022da <HAL_RNG_GenerateRandomNumber+0x52>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	7163      	strb	r3, [r4, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 80022a2:	f7fe f9c9 	bl	8000638 <HAL_GetTick>
 80022a6:	4607      	mov	r7, r0

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80022a8:	6822      	ldr	r2, [r4, #0]
 80022aa:	6855      	ldr	r5, [r2, #4]
 80022ac:	f015 0501 	ands.w	r5, r5, #1
 80022b0:	d008      	beq.n	80022c4 <HAL_RNG_GenerateRandomNumber+0x3c>
        return HAL_ERROR;
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80022b2:	6893      	ldr	r3, [r2, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2000      	movs	r0, #0
    hrng->RandomNumber = hrng->Instance->DR;
 80022b6:	60e3      	str	r3, [r4, #12]
    *random32bit = hrng->RandomNumber;
 80022b8:	6033      	str	r3, [r6, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80022ba:	2301      	movs	r3, #1
 80022bc:	7163      	strb	r3, [r4, #5]
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
    status = HAL_ERROR;
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80022be:	2300      	movs	r3, #0
 80022c0:	7123      	strb	r3, [r4, #4]
 80022c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80022c4:	f7fe f9b8 	bl	8000638 <HAL_GetTick>
 80022c8:	1bc0      	subs	r0, r0, r7
 80022ca:	2802      	cmp	r0, #2
 80022cc:	d9ec      	bls.n	80022a8 <HAL_RNG_GenerateRandomNumber+0x20>
        hrng->State = HAL_RNG_STATE_READY;
 80022ce:	2001      	movs	r0, #1
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80022d0:	2302      	movs	r3, #2
        __HAL_UNLOCK(hrng);
 80022d2:	7125      	strb	r5, [r4, #4]
        hrng->State = HAL_RNG_STATE_READY;
 80022d4:	7160      	strb	r0, [r4, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80022d6:	60a3      	str	r3, [r4, #8]
 80022d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80022da:	2304      	movs	r3, #4
 80022dc:	60a3      	str	r3, [r4, #8]
 80022de:	e7ee      	b.n	80022be <HAL_RNG_GenerateRandomNumber+0x36>
  __HAL_LOCK(hrng);
 80022e0:	2002      	movs	r0, #2

  return status;
}
 80022e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080022e4 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 80022e4:	b510      	push	{r4, lr}
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80022e6:	f100 010c 	add.w	r1, r0, #12
{
 80022ea:	4604      	mov	r4, r0
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 80022ec:	f7ff ffcc 	bl	8002288 <HAL_RNG_GenerateRandomNumber>
 80022f0:	b908      	cbnz	r0, 80022f6 <HAL_RNG_GetRandomNumber+0x12>
  {
    return hrng->RandomNumber;
 80022f2:	68e0      	ldr	r0, [r4, #12]
 80022f4:	bd10      	pop	{r4, pc}
  }
  else
  {
    return 0U;
 80022f6:	2000      	movs	r0, #0
  }
}
 80022f8:	bd10      	pop	{r4, pc}

080022fa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80022fa:	b538      	push	{r3, r4, r5, lr}
 80022fc:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80022fe:	4604      	mov	r4, r0
 8002300:	b1c8      	cbz	r0, 8002336 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8002302:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8002306:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800230a:	b91b      	cbnz	r3, 8002314 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800230c:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8002310:	f004 f952 	bl	80065b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002314:	2302      	movs	r3, #2
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8002316:	1d21      	adds	r1, r4, #4
 8002318:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800231a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800231e:	f000 f969 	bl	80025f4 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8002322:	6862      	ldr	r2, [r4, #4]
 8002324:	4629      	mov	r1, r5
 8002326:	6820      	ldr	r0, [r4, #0]
 8002328:	f000 f9a3 	bl	8002672 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800232c:	2301      	movs	r3, #1
  
  return HAL_OK;
 800232e:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002330:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  return HAL_OK;
 8002334:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8002336:	2001      	movs	r0, #1
}
 8002338:	bd38      	pop	{r3, r4, r5, pc}

0800233a <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800233a:	b538      	push	{r3, r4, r5, lr}
 800233c:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800233e:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
{
 8002342:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8002344:	b2c0      	uxtb	r0, r0
 8002346:	2802      	cmp	r0, #2
 8002348:	d00d      	beq.n	8002366 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800234a:	2302      	movs	r3, #2
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800234c:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800234e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8002352:	f000 f9d6 	bl	8002702 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8002356:	682b      	ldr	r3, [r5, #0]
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
  }
  
  return HAL_OK;  
 8002358:	2000      	movs	r0, #0
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800235a:	2b02      	cmp	r3, #2
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800235c:	bf0c      	ite	eq
 800235e:	2305      	moveq	r3, #5
    hsdram->State = HAL_SDRAM_STATE_READY;
 8002360:	2301      	movne	r3, #1
 8002362:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 8002366:	bd38      	pop	{r3, r4, r5, pc}

08002368 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8002368:	b510      	push	{r4, lr}
 800236a:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800236c:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 8002370:	b2c0      	uxtb	r0, r0
 8002372:	2802      	cmp	r0, #2
 8002374:	d009      	beq.n	800238a <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8002376:	2302      	movs	r3, #2
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8002378:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800237a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800237e:	f000 f9d3 	bl	8002728 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002382:	2301      	movs	r3, #1
  
  return HAL_OK;   
 8002384:	2000      	movs	r0, #0
  hsdram->State = HAL_SDRAM_STATE_READY;
 8002386:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
}
 800238a:	bd10      	pop	{r4, pc}

0800238c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800238c:	6803      	ldr	r3, [r0, #0]
 800238e:	68da      	ldr	r2, [r3, #12]
 8002390:	f042 0201 	orr.w	r2, r2, #1
 8002394:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <HAL_TIM_Base_Start_IT+0x28>)
 8002398:	6899      	ldr	r1, [r3, #8]
 800239a:	400a      	ands	r2, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800239c:	2a06      	cmp	r2, #6
 800239e:	d006      	beq.n	80023ae <HAL_TIM_Base_Start_IT+0x22>
 80023a0:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 80023a4:	d003      	beq.n	80023ae <HAL_TIM_Base_Start_IT+0x22>
  {
    __HAL_TIM_ENABLE(htim);
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	f042 0201 	orr.w	r2, r2, #1
 80023ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 80023ae:	2000      	movs	r0, #0
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	00010007 	.word	0x00010007

080023b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023b8:	4a30      	ldr	r2, [pc, #192]	; (800247c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80023ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80023bc:	4290      	cmp	r0, r2
 80023be:	d012      	beq.n	80023e6 <TIM_Base_SetConfig+0x2e>
 80023c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023c4:	d00f      	beq.n	80023e6 <TIM_Base_SetConfig+0x2e>
 80023c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023ca:	4290      	cmp	r0, r2
 80023cc:	d00b      	beq.n	80023e6 <TIM_Base_SetConfig+0x2e>
 80023ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023d2:	4290      	cmp	r0, r2
 80023d4:	d007      	beq.n	80023e6 <TIM_Base_SetConfig+0x2e>
 80023d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023da:	4290      	cmp	r0, r2
 80023dc:	d003      	beq.n	80023e6 <TIM_Base_SetConfig+0x2e>
 80023de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80023e2:	4290      	cmp	r0, r2
 80023e4:	d119      	bne.n	800241a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80023e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80023e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80023ec:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80023ee:	4a23      	ldr	r2, [pc, #140]	; (800247c <TIM_Base_SetConfig+0xc4>)
 80023f0:	4290      	cmp	r0, r2
 80023f2:	d029      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 80023f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80023f8:	d026      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 80023fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80023fe:	4290      	cmp	r0, r2
 8002400:	d022      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002402:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002406:	4290      	cmp	r0, r2
 8002408:	d01e      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 800240a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800240e:	4290      	cmp	r0, r2
 8002410:	d01a      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002412:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002416:	4290      	cmp	r0, r2
 8002418:	d016      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 800241a:	4a19      	ldr	r2, [pc, #100]	; (8002480 <TIM_Base_SetConfig+0xc8>)
 800241c:	4290      	cmp	r0, r2
 800241e:	d013      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002420:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002424:	4290      	cmp	r0, r2
 8002426:	d00f      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002428:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800242c:	4290      	cmp	r0, r2
 800242e:	d00b      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002430:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002434:	4290      	cmp	r0, r2
 8002436:	d007      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002438:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800243c:	4290      	cmp	r0, r2
 800243e:	d003      	beq.n	8002448 <TIM_Base_SetConfig+0x90>
 8002440:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002444:	4290      	cmp	r0, r2
 8002446:	d103      	bne.n	8002450 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800244c:	68ca      	ldr	r2, [r1, #12]
 800244e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002450:	694a      	ldr	r2, [r1, #20]
 8002452:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002456:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002458:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800245a:	688b      	ldr	r3, [r1, #8]
 800245c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800245e:	680b      	ldr	r3, [r1, #0]
 8002460:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <TIM_Base_SetConfig+0xc4>)
 8002464:	4298      	cmp	r0, r3
 8002466:	d003      	beq.n	8002470 <TIM_Base_SetConfig+0xb8>
 8002468:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800246c:	4298      	cmp	r0, r3
 800246e:	d101      	bne.n	8002474 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002470:	690b      	ldr	r3, [r1, #16]
 8002472:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002474:	2301      	movs	r3, #1
 8002476:	6143      	str	r3, [r0, #20]
 8002478:	4770      	bx	lr
 800247a:	bf00      	nop
 800247c:	40010000 	.word	0x40010000
 8002480:	40014000 	.word	0x40014000

08002484 <HAL_TIM_Base_Init>:
{
 8002484:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002486:	4604      	mov	r4, r0
 8002488:	b1a0      	cbz	r0, 80024b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800248a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800248e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002492:	b91b      	cbnz	r3, 800249c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002494:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002498:	f004 f87a 	bl	8006590 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800249c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800249e:	6820      	ldr	r0, [r4, #0]
 80024a0:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 80024a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024a6:	f7ff ff87 	bl	80023b8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80024aa:	2301      	movs	r3, #1
  return HAL_OK;
 80024ac:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80024ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80024b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
}
 80024b6:	bd10      	pop	{r4, pc}

080024b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80024b8:	b510      	push	{r4, lr}

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024ba:	430a      	orrs	r2, r1
  tmpsmcr = TIMx->SMCR;
 80024bc:	6884      	ldr	r4, [r0, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024be:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024c2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80024c6:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80024c8:	6083      	str	r3, [r0, #8]
 80024ca:	bd10      	pop	{r4, pc}

080024cc <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80024cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024d0:	2b01      	cmp	r3, #1
{
 80024d2:	b570      	push	{r4, r5, r6, lr}
 80024d4:	4604      	mov	r4, r0
 80024d6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80024da:	d017      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x40>
  htim->State = HAL_TIM_STATE_BUSY;
 80024dc:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80024e0:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 80024e2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80024e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80024e8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80024ea:	4b41      	ldr	r3, [pc, #260]	; (80025f0 <HAL_TIM_ConfigClockSource+0x124>)
 80024ec:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80024ee:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80024f0:	680b      	ldr	r3, [r1, #0]
 80024f2:	2b40      	cmp	r3, #64	; 0x40
 80024f4:	d065      	beq.n	80025c2 <HAL_TIM_ConfigClockSource+0xf6>
 80024f6:	d815      	bhi.n	8002524 <HAL_TIM_ConfigClockSource+0x58>
 80024f8:	2b10      	cmp	r3, #16
 80024fa:	d00c      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x4a>
 80024fc:	d807      	bhi.n	800250e <HAL_TIM_ConfigClockSource+0x42>
 80024fe:	b153      	cbz	r3, 8002516 <HAL_TIM_ConfigClockSource+0x4a>
  htim->State = HAL_TIM_STATE_READY;
 8002500:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002502:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002504:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002508:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800250c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800250e:	2b20      	cmp	r3, #32
 8002510:	d001      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0x4a>
 8002512:	2b30      	cmp	r3, #48	; 0x30
 8002514:	d1f4      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x34>
  tmpsmcr = TIMx->SMCR;
 8002516:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002518:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 800251c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002520:	4313      	orrs	r3, r2
 8002522:	e01a      	b.n	800255a <HAL_TIM_ConfigClockSource+0x8e>
  switch (sClockSourceConfig->ClockSource)
 8002524:	2b60      	cmp	r3, #96	; 0x60
 8002526:	d034      	beq.n	8002592 <HAL_TIM_ConfigClockSource+0xc6>
 8002528:	d819      	bhi.n	800255e <HAL_TIM_ConfigClockSource+0x92>
 800252a:	2b50      	cmp	r3, #80	; 0x50
 800252c:	d1e8      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800252e:	684a      	ldr	r2, [r1, #4]
 8002530:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002532:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002534:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002536:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800253a:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 800253e:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002540:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002542:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002544:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002548:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800254c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800254e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002550:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002556:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800255a:	6083      	str	r3, [r0, #8]
 800255c:	e7d0      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x34>
  switch (sClockSourceConfig->ClockSource)
 800255e:	2b70      	cmp	r3, #112	; 0x70
 8002560:	d00c      	beq.n	800257c <HAL_TIM_ConfigClockSource+0xb0>
 8002562:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002566:	d1cb      	bne.n	8002500 <HAL_TIM_ConfigClockSource+0x34>
      TIM_ETR_SetConfig(htim->Instance,
 8002568:	68cb      	ldr	r3, [r1, #12]
 800256a:	684a      	ldr	r2, [r1, #4]
 800256c:	6889      	ldr	r1, [r1, #8]
 800256e:	f7ff ffa3 	bl	80024b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002572:	6822      	ldr	r2, [r4, #0]
 8002574:	6893      	ldr	r3, [r2, #8]
 8002576:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800257a:	e008      	b.n	800258e <HAL_TIM_ConfigClockSource+0xc2>
      TIM_ETR_SetConfig(htim->Instance,
 800257c:	68cb      	ldr	r3, [r1, #12]
 800257e:	684a      	ldr	r2, [r1, #4]
 8002580:	6889      	ldr	r1, [r1, #8]
 8002582:	f7ff ff99 	bl	80024b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800258a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800258e:	6093      	str	r3, [r2, #8]
      break;
 8002590:	e7b6      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x34>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002592:	684d      	ldr	r5, [r1, #4]
 8002594:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002596:	6a01      	ldr	r1, [r0, #32]
 8002598:	f021 0110 	bic.w	r1, r1, #16
 800259c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800259e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80025a0:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80025a2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80025a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80025aa:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 80025ae:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 80025b2:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80025b4:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80025b6:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025bc:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80025c0:	e7cb      	b.n	800255a <HAL_TIM_ConfigClockSource+0x8e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025c2:	684a      	ldr	r2, [r1, #4]
 80025c4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80025c6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025c8:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80025ca:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025ce:	f025 0501 	bic.w	r5, r5, #1
  tmpccer |= TIM_ICPolarity;
 80025d2:	430a      	orrs	r2, r1
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80025d4:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80025d6:	6983      	ldr	r3, [r0, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80025d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80025dc:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80025e0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80025e2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80025e4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80025e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80025ea:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80025ee:	e7b4      	b.n	800255a <HAL_TIM_ConfigClockSource+0x8e>
 80025f0:	fffe0088 	.word	0xfffe0088

080025f4 <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80025f4:	680b      	ldr	r3, [r1, #0]
 80025f6:	684a      	ldr	r2, [r1, #4]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	f8d1 c010 	ldr.w	ip, [r1, #16]
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80025fe:	6803      	ldr	r3, [r0, #0]
{
 8002600:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002604:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8002608:	f8d1 800c 	ldr.w	r8, [r1, #12]
 800260c:	694d      	ldr	r5, [r1, #20]
 800260e:	698c      	ldr	r4, [r1, #24]
 8002610:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 8002614:	6a0f      	ldr	r7, [r1, #32]
 8002616:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 8002618:	d014      	beq.n	8002644 <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800261a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800261e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002622:	431a      	orrs	r2, r3
 8002624:	ea42 0209 	orr.w	r2, r2, r9
 8002628:	ea42 0208 	orr.w	r2, r2, r8
 800262c:	ea42 030c 	orr.w	r3, r2, ip
 8002630:	432b      	orrs	r3, r5
 8002632:	4323      	orrs	r3, r4
 8002634:	ea43 030e 	orr.w	r3, r3, lr
 8002638:	433b      	orrs	r3, r7
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800263a:	4333      	orrs	r3, r6
                        Init->WriteProtection    |\
                        Init->SDClockPeriod      |\
                        Init->ReadBurst          |\
                        Init->ReadPipeDelay
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800263c:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 800263e:	2000      	movs	r0, #0
 8002640:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 8002644:	6841      	ldr	r1, [r0, #4]
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8002646:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800264a:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 800264e:	ea43 030e 	orr.w	r3, r3, lr
 8002652:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
 8002656:	433b      	orrs	r3, r7
 8002658:	430a      	orrs	r2, r1
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800265a:	431e      	orrs	r6, r3
 800265c:	ea42 0209 	orr.w	r2, r2, r9
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8002660:	6006      	str	r6, [r0, #0]
 8002662:	ea42 0208 	orr.w	r2, r2, r8
 8002666:	ea42 030c 	orr.w	r3, r2, ip
 800266a:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800266c:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800266e:	6043      	str	r3, [r0, #4]
 8002670:	e7e5      	b.n	800263e <FMC_SDRAM_Init+0x4a>

08002672 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8002672:	2a01      	cmp	r2, #1
 8002674:	f8d1 c00c 	ldr.w	ip, [r1, #12]
{
 8002678:	b5f0      	push	{r4, r5, r6, r7, lr}
 800267a:	e891 4008 	ldmia.w	r1, {r3, lr}
 800267e:	688f      	ldr	r7, [r1, #8]
 8002680:	690d      	ldr	r5, [r1, #16]
 8002682:	694e      	ldr	r6, [r1, #20]
 8002684:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 8002686:	d01b      	beq.n	80026c0 <FMC_SDRAM_Timing_Init+0x4e>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8002688:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800268a:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800268e:	3b01      	subs	r3, #1
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 8002690:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8002694:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 8002698:	3d01      	subs	r5, #1
                       (((Timing->RPDelay)-1) << 20)             |\
 800269a:	3e01      	subs	r6, #1
                       (((Timing->RCDDelay)-1) << 24));
 800269c:	3901      	subs	r1, #1
 800269e:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80026a2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 80026a4:	1e7b      	subs	r3, r7, #1
 80026a6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80026aa:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
 80026ae:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 80026b2:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026b6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80026ba:	6083      	str	r3, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  
  return HAL_OK;
}
 80026bc:	2000      	movs	r0, #0
 80026be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 80026c0:	6884      	ldr	r4, [r0, #8]
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 80026c2:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 80026c6:	68c2      	ldr	r2, [r0, #12]
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026c8:	3b01      	subs	r3, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80026ca:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80026ce:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 80026d2:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
                        (((Timing->RPDelay)-1) << 20)); 
 80026d6:	3e01      	subs	r6, #1
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80026d8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->RCDDelay)-1) << 24));   
 80026dc:	3901      	subs	r1, #1
 80026de:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 80026e2:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
 80026e6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 80026e8:	1e7b      	subs	r3, r7, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 80026ea:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
 80026ee:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 80026f2:	1e6b      	subs	r3, r5, #1
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80026f4:	6086      	str	r6, [r0, #8]
 80026f6:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 80026fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80026fe:	60c3      	str	r3, [r0, #12]
 8002700:	e7dc      	b.n	80026bc <FMC_SDRAM_Timing_Init+0x4a>

08002702 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002702:	e891 000c 	ldmia.w	r1, {r2, r3}
{
 8002706:	b513      	push	{r0, r1, r4, lr}
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002708:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1) << 5) |\
                    ((Command->ModeRegisterDefinition) << 9)
 800270a:	68ca      	ldr	r2, [r1, #12]
{
 800270c:	4604      	mov	r4, r0
  __IO uint32_t tmpr = 0;
 800270e:	2000      	movs	r0, #0
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 8002710:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002714:	688a      	ldr	r2, [r1, #8]
  __IO uint32_t tmpr = 0;
 8002716:	9001      	str	r0, [sp, #4]
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 8002718:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800271a:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800271e:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 8002720:	9b01      	ldr	r3, [sp, #4]
 8002722:	6123      	str	r3, [r4, #16]
  
  return HAL_OK;  
}
 8002724:	b002      	add	sp, #8
 8002726:	bd10      	pop	{r4, pc}

08002728 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 8002728:	6943      	ldr	r3, [r0, #20]
 800272a:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 800272e:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 8002730:	2000      	movs	r0, #0
 8002732:	4770      	bx	lr

08002734 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002734:	4b0a      	ldr	r3, [pc, #40]	; (8002760 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002736:	3b01      	subs	r3, #1
 8002738:	d101      	bne.n	800273e <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 800273a:	2003      	movs	r0, #3
 800273c:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800273e:	6902      	ldr	r2, [r0, #16]
 8002740:	2a00      	cmp	r2, #0
 8002742:	daf8      	bge.n	8002736 <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002744:	6903      	ldr	r3, [r0, #16]
 8002746:	4a06      	ldr	r2, [pc, #24]	; (8002760 <USB_CoreReset+0x2c>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 800274e:	3a01      	subs	r2, #1
 8002750:	d0f3      	beq.n	800273a <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002752:	6903      	ldr	r3, [r0, #16]
 8002754:	f013 0301 	ands.w	r3, r3, #1
 8002758:	d1f9      	bne.n	800274e <USB_CoreReset+0x1a>

  return HAL_OK;
 800275a:	4618      	mov	r0, r3
}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	00030d41 	.word	0x00030d41

08002764 <USB_CoreInit>:
{
 8002764:	b084      	sub	sp, #16
 8002766:	b538      	push	{r3, r4, r5, lr}
 8002768:	ad05      	add	r5, sp, #20
 800276a:	4604      	mov	r4, r0
 800276c:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002772:	2b01      	cmp	r3, #1
 8002774:	d126      	bne.n	80027c4 <USB_CoreInit+0x60>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002776:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800277c:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800277e:	68c3      	ldr	r3, [r0, #12]
 8002780:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002788:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800278a:	68c3      	ldr	r3, [r0, #12]
 800278c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002790:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002792:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002794:	2b01      	cmp	r3, #1
 8002796:	d103      	bne.n	80027a0 <USB_CoreInit+0x3c>
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002798:	68c3      	ldr	r3, [r0, #12]
 800279a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279e:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80027a0:	4620      	mov	r0, r4
 80027a2:	f7ff ffc7 	bl	8002734 <USB_CoreReset>
  if (cfg.dma_enable == 1U)
 80027a6:	9b08      	ldr	r3, [sp, #32]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d107      	bne.n	80027bc <USB_CoreInit+0x58>
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80027ac:	68a3      	ldr	r3, [r4, #8]
 80027ae:	f043 0306 	orr.w	r3, r3, #6
 80027b2:	60a3      	str	r3, [r4, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80027b4:	68a3      	ldr	r3, [r4, #8]
 80027b6:	f043 0320 	orr.w	r3, r3, #32
 80027ba:	60a3      	str	r3, [r4, #8]
}
 80027bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80027c0:	b004      	add	sp, #16
 80027c2:	4770      	bx	lr
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80027c4:	68c3      	ldr	r3, [r0, #12]
 80027c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ca:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 80027cc:	f7ff ffb2 	bl	8002734 <USB_CoreReset>
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80027d0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80027d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d6:	63a3      	str	r3, [r4, #56]	; 0x38
 80027d8:	e7e5      	b.n	80027a6 <USB_CoreInit+0x42>

080027da <USB_EnableGlobalInt>:
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80027da:	6883      	ldr	r3, [r0, #8]
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6083      	str	r3, [r0, #8]
}
 80027e2:	2000      	movs	r0, #0
 80027e4:	4770      	bx	lr

080027e6 <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80027e6:	6883      	ldr	r3, [r0, #8]
 80027e8:	f023 0301 	bic.w	r3, r3, #1
 80027ec:	6083      	str	r3, [r0, #8]
}
 80027ee:	2000      	movs	r0, #0
 80027f0:	4770      	bx	lr

080027f2 <USB_SetCurrentMode>:
{
 80027f2:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80027f4:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80027f6:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80027f8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80027fc:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 80027fe:	d108      	bne.n	8002812 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002800:	68c3      	ldr	r3, [r0, #12]
 8002802:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002806:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002808:	2032      	movs	r0, #50	; 0x32
 800280a:	f7fd ff1b 	bl	8000644 <HAL_Delay>
  return HAL_OK;
 800280e:	2000      	movs	r0, #0
 8002810:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002812:	b919      	cbnz	r1, 800281c <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002814:	68c3      	ldr	r3, [r0, #12]
 8002816:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800281a:	e7f4      	b.n	8002806 <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 800281c:	2001      	movs	r0, #1
}
 800281e:	bd08      	pop	{r3, pc}

08002820 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002820:	0189      	lsls	r1, r1, #6
 8002822:	4a07      	ldr	r2, [pc, #28]	; (8002840 <USB_FlushTxFifo+0x20>)
 8002824:	f041 0120 	orr.w	r1, r1, #32
 8002828:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 800282a:	3a01      	subs	r2, #1
 800282c:	d005      	beq.n	800283a <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800282e:	6903      	ldr	r3, [r0, #16]
 8002830:	f013 0320 	ands.w	r3, r3, #32
 8002834:	d1f9      	bne.n	800282a <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002836:	4618      	mov	r0, r3
 8002838:	4770      	bx	lr
      return HAL_TIMEOUT;
 800283a:	2003      	movs	r0, #3
}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	00030d41 	.word	0x00030d41

08002844 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002844:	2310      	movs	r3, #16
 8002846:	4a06      	ldr	r2, [pc, #24]	; (8002860 <USB_FlushRxFifo+0x1c>)
 8002848:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 800284a:	3a01      	subs	r2, #1
 800284c:	d005      	beq.n	800285a <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800284e:	6903      	ldr	r3, [r0, #16]
 8002850:	f013 0310 	ands.w	r3, r3, #16
 8002854:	d1f9      	bne.n	800284a <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002856:	4618      	mov	r0, r3
 8002858:	4770      	bx	lr
      return HAL_TIMEOUT;
 800285a:	2003      	movs	r0, #3
}
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	00030d41 	.word	0x00030d41

08002864 <USB_WritePacket>:
{
 8002864:	b510      	push	{r4, lr}
 8002866:	f89d 4008 	ldrb.w	r4, [sp, #8]
  if (dma == 0U)
 800286a:	b94c      	cbnz	r4, 8002880 <USB_WritePacket+0x1c>
    count32b = ((uint32_t)len + 3U) / 4U;
 800286c:	3303      	adds	r3, #3
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800286e:	eb00 3002 	add.w	r0, r0, r2, lsl #12
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 800287a:	440b      	add	r3, r1
    for (i = 0U; i < count32b; i++)
 800287c:	4299      	cmp	r1, r3
 800287e:	d101      	bne.n	8002884 <USB_WritePacket+0x20>
}
 8002880:	2000      	movs	r0, #0
 8002882:	bd10      	pop	{r4, pc}
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8002884:	f851 2b04 	ldr.w	r2, [r1], #4
 8002888:	6002      	str	r2, [r0, #0]
 800288a:	e7f7      	b.n	800287c <USB_WritePacket+0x18>

0800288c <USB_ReadPacket>:
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800288c:	3203      	adds	r2, #3
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800288e:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
 8002892:	f022 0203 	bic.w	r2, r2, #3
 8002896:	440a      	add	r2, r1
  for (i = 0U; i < count32b; i++)
 8002898:	4291      	cmp	r1, r2
 800289a:	d101      	bne.n	80028a0 <USB_ReadPacket+0x14>
}
 800289c:	4608      	mov	r0, r1
 800289e:	4770      	bx	lr
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80028a0:	6803      	ldr	r3, [r0, #0]
 80028a2:	f841 3b04 	str.w	r3, [r1], #4
 80028a6:	e7f7      	b.n	8002898 <USB_ReadPacket+0xc>

080028a8 <USB_ReadInterrupts>:
  tmpreg = USBx->GINTSTS;
 80028a8:	6942      	ldr	r2, [r0, #20]
  tmpreg &= USBx->GINTMSK;
 80028aa:	6980      	ldr	r0, [r0, #24]
}
 80028ac:	4010      	ands	r0, r2
 80028ae:	4770      	bx	lr

080028b0 <USB_GetMode>:
  return ((USBx->GINTSTS) & 0x1U);
 80028b0:	6940      	ldr	r0, [r0, #20]
}
 80028b2:	f000 0001 	and.w	r0, r0, #1
 80028b6:	4770      	bx	lr

080028b8 <USB_InitFSLSPClkSel>:
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80028b8:	f8d0 3400 	ldr.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;

  if (freq == HCFG_48_MHZ)
 80028bc:	2901      	cmp	r1, #1
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80028be:	f500 6280 	add.w	r2, r0, #1024	; 0x400
 80028c2:	f023 0303 	bic.w	r3, r3, #3
{
 80028c6:	b510      	push	{r4, lr}
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80028c8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80028cc:	f001 0303 	and.w	r3, r1, #3
 80028d0:	f8d0 4400 	ldr.w	r4, [r0, #1024]	; 0x400
 80028d4:	ea43 0304 	orr.w	r3, r3, r4
 80028d8:	f8c0 3400 	str.w	r3, [r0, #1024]	; 0x400
  if (freq == HCFG_48_MHZ)
 80028dc:	d104      	bne.n	80028e8 <USB_InitFSLSPClkSel+0x30>
  {
    USBx_HOST->HFIR = 48000U;
 80028de:	f64b 3380 	movw	r3, #48000	; 0xbb80
  }
  else if (freq == HCFG_6_MHZ)
  {
    USBx_HOST->HFIR = 6000U;
 80028e2:	6053      	str	r3, [r2, #4]
  {
    /* ... */
  }

  return HAL_OK;
}
 80028e4:	2000      	movs	r0, #0
 80028e6:	bd10      	pop	{r4, pc}
  else if (freq == HCFG_6_MHZ)
 80028e8:	2902      	cmp	r1, #2
 80028ea:	d1fb      	bne.n	80028e4 <USB_InitFSLSPClkSel+0x2c>
    USBx_HOST->HFIR = 6000U;
 80028ec:	f241 7370 	movw	r3, #6000	; 0x1770
 80028f0:	e7f7      	b.n	80028e2 <USB_InitFSLSPClkSel+0x2a>

080028f2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80028f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t USBx_BASE = (uint32_t)USBx;

  __IO uint32_t hprt0 = 0U;
 80028f4:	2500      	movs	r5, #0
{
 80028f6:	4604      	mov	r4, r0
  __IO uint32_t hprt0 = 0U;
 80028f8:	9501      	str	r5, [sp, #4]

  hprt0 = USBx_HPRT0;
 80028fa:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 80028fe:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8002900:	9b01      	ldr	r3, [sp, #4]
 8002902:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002906:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8002908:	9b01      	ldr	r3, [sp, #4]
 800290a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800290e:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  HAL_Delay(100U);                                 /* See Note #1 */
 8002912:	2064      	movs	r0, #100	; 0x64
 8002914:	f7fd fe96 	bl	8000644 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8002918:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(10U);
 800291a:	200a      	movs	r0, #10
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	f8c4 3440 	str.w	r3, [r4, #1088]	; 0x440
  HAL_Delay(10U);
 8002924:	f7fd fe8e 	bl	8000644 <HAL_Delay>

  return HAL_OK;
}
 8002928:	4628      	mov	r0, r5
 800292a:	b003      	add	sp, #12
 800292c:	bd30      	pop	{r4, r5, pc}

0800292e <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800292e:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002934:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002938:	9301      	str	r3, [sp, #4]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800293a:	9b01      	ldr	r3, [sp, #4]
 800293c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002940:	9301      	str	r3, [sp, #4]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8002942:	9b01      	ldr	r3, [sp, #4]
 8002944:	04da      	lsls	r2, r3, #19
 8002946:	d406      	bmi.n	8002956 <USB_DriveVbus+0x28>
 8002948:	2901      	cmp	r1, #1
 800294a:	d104      	bne.n	8002956 <USB_DriveVbus+0x28>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800294c:	9b01      	ldr	r3, [sp, #4]
 800294e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002952:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8002956:	9b01      	ldr	r3, [sp, #4]
 8002958:	04db      	lsls	r3, r3, #19
 800295a:	d505      	bpl.n	8002968 <USB_DriveVbus+0x3a>
 800295c:	b921      	cbnz	r1, 8002968 <USB_DriveVbus+0x3a>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800295e:	9b01      	ldr	r3, [sp, #4]
 8002960:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002964:	f8c0 3440 	str.w	r3, [r0, #1088]	; 0x440
  }
  return HAL_OK;
}
 8002968:	2000      	movs	r0, #0
 800296a:	b002      	add	sp, #8
 800296c:	4770      	bx	lr
	...

08002970 <USB_HostInit>:
{
 8002970:	b084      	sub	sp, #16
 8002972:	b538      	push	{r3, r4, r5, lr}
 8002974:	4604      	mov	r4, r0
 8002976:	a805      	add	r0, sp, #20
 8002978:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  USBx_PCGCCTL = 0U;
 800297c:	2300      	movs	r3, #0
 800297e:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8002982:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002984:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002988:	63a3      	str	r3, [r4, #56]	; 0x38
  if ((USBx->CID & (0x1U << 8)) != 0U)
 800298a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800298c:	05da      	lsls	r2, r3, #23
 800298e:	d53f      	bpl.n	8002a10 <USB_HostInit+0xa0>
    if (cfg.speed == USBH_FSLS_SPEED)
 8002990:	9b07      	ldr	r3, [sp, #28]
 8002992:	2b01      	cmp	r3, #1
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8002994:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    if (cfg.speed == USBH_FSLS_SPEED)
 8002998:	d13c      	bne.n	8002a14 <USB_HostInit+0xa4>
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800299a:	f043 0304 	orr.w	r3, r3, #4
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800299e:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80029a2:	2110      	movs	r1, #16
 80029a4:	4620      	mov	r0, r4
 80029a6:	f7ff ff3b 	bl	8002820 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80029aa:	4620      	mov	r0, r4
 80029ac:	f7ff ff4a 	bl	8002844 <USB_FlushRxFifo>
  for (i = 0U; i < cfg.Host_channels; i++)
 80029b0:	2300      	movs	r3, #0
 80029b2:	9906      	ldr	r1, [sp, #24]
 80029b4:	f504 62a0 	add.w	r2, r4, #1280	; 0x500
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    USBx_HC(i)->HCINTMSK = 0U;
 80029bc:	461d      	mov	r5, r3
  for (i = 0U; i < cfg.Host_channels; i++)
 80029be:	428b      	cmp	r3, r1
 80029c0:	d12b      	bne.n	8002a1a <USB_HostInit+0xaa>
  (void)USB_DriveVbus(USBx, 1U);
 80029c2:	2101      	movs	r1, #1
 80029c4:	4620      	mov	r0, r4
 80029c6:	f7ff ffb2 	bl	800292e <USB_DriveVbus>
  HAL_Delay(200U);
 80029ca:	20c8      	movs	r0, #200	; 0xc8
 80029cc:	f7fd fe3a 	bl	8000644 <HAL_Delay>
  USBx->GINTMSK = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029d8:	6163      	str	r3, [r4, #20]
  if ((USBx->CID & (0x1U << 8)) != 0U)
 80029da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	d521      	bpl.n	8002a24 <USB_HostInit+0xb4>
    USBx->GRXFSIZ  = 0x200U;
 80029e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e4:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80029e6:	f103 7380 	add.w	r3, r3, #16777216	; 0x1000000
 80029ea:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80029ec:	4b11      	ldr	r3, [pc, #68]	; (8002a34 <USB_HostInit+0xc4>)
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80029ee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
  if (cfg.dma_enable == 0U)
 80029f2:	9b08      	ldr	r3, [sp, #32]
 80029f4:	b91b      	cbnz	r3, 80029fe <USB_HostInit+0x8e>
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80029f6:	69a3      	ldr	r3, [r4, #24]
 80029f8:	f043 0310 	orr.w	r3, r3, #16
 80029fc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80029fe:	69a2      	ldr	r2, [r4, #24]
}
 8002a00:	2000      	movs	r0, #0
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8002a02:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <USB_HostInit+0xc8>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61a3      	str	r3, [r4, #24]
}
 8002a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a0c:	b004      	add	sp, #16
 8002a0e:	4770      	bx	lr
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8002a10:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
 8002a14:	f023 0304 	bic.w	r3, r3, #4
 8002a18:	e7c1      	b.n	800299e <USB_HostInit+0x2e>
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8002a1a:	6090      	str	r0, [r2, #8]
  for (i = 0U; i < cfg.Host_channels; i++)
 8002a1c:	3301      	adds	r3, #1
    USBx_HC(i)->HCINTMSK = 0U;
 8002a1e:	60d5      	str	r5, [r2, #12]
 8002a20:	3220      	adds	r2, #32
 8002a22:	e7cc      	b.n	80029be <USB_HostInit+0x4e>
    USBx->GRXFSIZ  = 0x80U;
 8002a24:	2380      	movs	r3, #128	; 0x80
 8002a26:	6263      	str	r3, [r4, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8002a28:	f503 03c0 	add.w	r3, r3, #6291456	; 0x600000
 8002a2c:	62a3      	str	r3, [r4, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8002a2e:	4b03      	ldr	r3, [pc, #12]	; (8002a3c <USB_HostInit+0xcc>)
 8002a30:	e7dd      	b.n	80029ee <USB_HostInit+0x7e>
 8002a32:	bf00      	nop
 8002a34:	00e00300 	.word	0x00e00300
 8002a38:	a3200008 	.word	0xa3200008
 8002a3c:	004000e0 	.word	0x004000e0

08002a40 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8002a40:	b082      	sub	sp, #8
  uint32_t USBx_BASE = (uint32_t)USBx;
  __IO uint32_t hprt0 = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	9301      	str	r3, [sp, #4]

  hprt0 = USBx_HPRT0;
 8002a46:	f8d0 3440 	ldr.w	r3, [r0, #1088]	; 0x440
 8002a4a:	9301      	str	r3, [sp, #4]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8002a4c:	9801      	ldr	r0, [sp, #4]
}
 8002a4e:	f3c0 4041 	ubfx	r0, r0, #17, #2
 8002a52:	b002      	add	sp, #8
 8002a54:	4770      	bx	lr

08002a56 <USB_GetCurrentFrame>:
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8002a56:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002a5a:	6880      	ldr	r0, [r0, #8]
}
 8002a5c:	b280      	uxth	r0, r0
 8002a5e:	4770      	bx	lr

08002a60 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 8002a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002a64:	eb00 1741 	add.w	r7, r0, r1, lsl #5
{
 8002a68:	4605      	mov	r5, r0
 8002a6a:	f89d 601c 	ldrb.w	r6, [sp, #28]
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8002a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a72:	f507 64a0 	add.w	r4, r7, #1280	; 0x500
 8002a76:	fa4f f882 	sxtb.w	r8, r2
 8002a7a:	60a0      	str	r0, [r4, #8]
 8002a7c:	f505 6c80 	add.w	ip, r5, #1024	; 0x400
 8002a80:	f001 0e0f 	and.w	lr, r1, #15

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8002a84:	2e03      	cmp	r6, #3
 8002a86:	d870      	bhi.n	8002b6a <USB_HC_Init+0x10a>
 8002a88:	e8df f006 	tbb	[pc, r6]
 8002a8c:	50026502 	.word	0x50026502
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002a90:	f240 419d 	movw	r1, #1181	; 0x49d
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8002a94:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002a98:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002a9a:	da03      	bge.n	8002aa4 <USB_HC_Init+0x44>
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8002a9c:	68e1      	ldr	r1, [r4, #12]
 8002a9e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002aa2:	e005      	b.n	8002ab0 <USB_HC_Init+0x50>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8002aa4:	6be9      	ldr	r1, [r5, #60]	; 0x3c
 8002aa6:	05c9      	lsls	r1, r1, #23
 8002aa8:	d546      	bpl.n	8002b38 <USB_HC_Init+0xd8>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002aaa:	68e1      	ldr	r1, [r4, #12]
 8002aac:	f041 0160 	orr.w	r1, r1, #96	; 0x60
  HAL_StatusTypeDef ret = HAL_OK;
 8002ab0:	2000      	movs	r0, #0
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002ab2:	60e1      	str	r1, [r4, #12]
      ret = HAL_ERROR;
      break;
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	f8dc 4018 	ldr.w	r4, [ip, #24]
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
  }
  else
  {
    HCcharEpDir = 0U;
 8002aba:	f1b8 0f00 	cmp.w	r8, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002abe:	fa01 f10e 	lsl.w	r1, r1, lr
 8002ac2:	ea41 0104 	orr.w	r1, r1, r4
    HCcharEpDir = 0U;
 8002ac6:	bfb4      	ite	lt
 8002ac8:	f44f 4400 	movlt.w	r4, #32768	; 0x8000
 8002acc:	2400      	movge	r4, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002ace:	f8cc 1018 	str.w	r1, [ip, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002ad2:	69a9      	ldr	r1, [r5, #24]
 8002ad4:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002ad8:	61a9      	str	r1, [r5, #24]
  else
  {
    HCcharLowSpeed = 0U;
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002ada:	059b      	lsls	r3, r3, #22
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002adc:	f8bd 5020 	ldrh.w	r5, [sp, #32]
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002ae0:	02d2      	lsls	r2, r2, #11
    HCcharLowSpeed = 0U;
 8002ae2:	f89d 1018 	ldrb.w	r1, [sp, #24]
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002ae6:	f003 53fe 	and.w	r3, r3, #532676608	; 0x1fc00000
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002aea:	f3c5 050a 	ubfx	r5, r5, #0, #11
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8002aee:	f402 42f0 	and.w	r2, r2, #30720	; 0x7800
    HCcharLowSpeed = 0U;
 8002af2:	2902      	cmp	r1, #2
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002af4:	ea43 0305 	orr.w	r3, r3, r5
    HCcharLowSpeed = 0U;
 8002af8:	bf0c      	ite	eq
 8002afa:	f44f 3100 	moveq.w	r1, #131072	; 0x20000
 8002afe:	2100      	movne	r1, #0
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002b00:	4313      	orrs	r3, r2
 8002b02:	04b2      	lsls	r2, r6, #18

  if (ep_type == EP_TYPE_INTR)
 8002b04:	2e03      	cmp	r6, #3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8002b06:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 8002b0a:	ea43 0302 	orr.w	r3, r3, r2
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8002b0e:	ea43 0304 	orr.w	r3, r3, r4
 8002b12:	ea43 0301 	orr.w	r3, r3, r1
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8002b16:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  if (ep_type == EP_TYPE_INTR)
 8002b1a:	d128      	bne.n	8002b6e <USB_HC_Init+0x10e>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 8002b1c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	; 0x500
 8002b20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002b24:	f8c7 3500 	str.w	r3, [r7, #1280]	; 0x500
  }

  return ret;
 8002b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b2c:	f240 619d 	movw	r1, #1693	; 0x69d
      if ((epnum & 0x80U) == 0x80U)
 8002b30:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b34:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002b36:	dbb1      	blt.n	8002a9c <USB_HC_Init+0x3c>
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002b38:	2101      	movs	r1, #1
 8002b3a:	f8dc 0018 	ldr.w	r0, [ip, #24]
 8002b3e:	fa01 f10e 	lsl.w	r1, r1, lr
 8002b42:	4301      	orrs	r1, r0
  HAL_StatusTypeDef ret = HAL_OK;
 8002b44:	2000      	movs	r0, #0
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8002b46:	f8cc 1018 	str.w	r1, [ip, #24]
    HCcharEpDir = 0U;
 8002b4a:	4604      	mov	r4, r0
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8002b4c:	69a9      	ldr	r1, [r5, #24]
 8002b4e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002b52:	61a9      	str	r1, [r5, #24]
 8002b54:	e7c1      	b.n	8002ada <USB_HC_Init+0x7a>
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b56:	f240 2125 	movw	r1, #549	; 0x225
      if ((epnum & 0x80U) == 0x80U)
 8002b5a:	f1b8 0f00 	cmp.w	r8, #0
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8002b5e:	60e1      	str	r1, [r4, #12]
      if ((epnum & 0x80U) == 0x80U)
 8002b60:	daea      	bge.n	8002b38 <USB_HC_Init+0xd8>
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8002b62:	68e1      	ldr	r1, [r4, #12]
 8002b64:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8002b68:	e7a2      	b.n	8002ab0 <USB_HC_Init+0x50>
      ret = HAL_ERROR;
 8002b6a:	2001      	movs	r0, #1
 8002b6c:	e7a2      	b.n	8002ab4 <USB_HC_Init+0x54>
}
 8002b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b72 <USB_HC_ReadInterrupt>:
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
  uint32_t USBx_BASE = (uint32_t)USBx;

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8002b72:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8002b76:	6940      	ldr	r0, [r0, #20]
}
 8002b78:	b280      	uxth	r0, r0
 8002b7a:	4770      	bx	lr

08002b7c <USB_HC_Halt>:
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t hcnum = (uint32_t)hc_num;
  uint32_t count = 0U;
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8002b7c:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002b80:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002b84:	f501 62a0 	add.w	r2, r1, #1280	; 0x500

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002b88:	f413 2f80 	tst.w	r3, #262144	; 0x40000
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8002b8c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002b90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b94:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8002b98:	d11e      	bne.n	8002bd8 <USB_HC_Halt+0x5c>

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002b9a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002b9c:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002ba0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8002ba4:	d137      	bne.n	8002c16 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002ba6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002baa:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002bae:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bb6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002bba:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002bbe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002bc2:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002bc6:	f240 33e9 	movw	r3, #1001	; 0x3e9
      do
      {
        if (++count > 1000U)
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	d002      	beq.n	8002bd4 <USB_HC_Halt+0x58>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002bce:	6811      	ldr	r1, [r2, #0]
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	dbfa      	blt.n	8002bca <USB_HC_Halt+0x4e>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
    }
  }

  return HAL_OK;
}
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	4770      	bx	lr
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002bd8:	f8d0 3410 	ldr.w	r3, [r0, #1040]	; 0x410
 8002bdc:	f413 0f7f 	tst.w	r3, #16711680	; 0xff0000
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002be0:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8002be4:	d117      	bne.n	8002c16 <USB_HC_Halt+0x9a>
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8002be6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002bee:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002bf2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bf6:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 8002bfa:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
 8002bfe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002c02:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002c06:	f240 33e9 	movw	r3, #1001	; 0x3e9
        if (++count > 1000U)
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	d0e2      	beq.n	8002bd4 <USB_HC_Halt+0x58>
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002c0e:	6811      	ldr	r1, [r2, #0]
 8002c10:	2900      	cmp	r1, #0
 8002c12:	dbfa      	blt.n	8002c0a <USB_HC_Halt+0x8e>
 8002c14:	e7de      	b.n	8002bd4 <USB_HC_Halt+0x58>
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8002c16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c1a:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
 8002c1e:	e7d9      	b.n	8002bd4 <USB_HC_Halt+0x58>

08002c20 <USB_DoPing>:
  uint32_t USBx_BASE = (uint32_t)USBx;
  uint32_t chnum = (uint32_t)ch_num;
  uint32_t num_packets = 1U;
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002c20:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8002c24:	4a06      	ldr	r2, [pc, #24]	; (8002c40 <USB_DoPing+0x20>)
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
  tmpreg |= USB_OTG_HCCHAR_CHENA;
  USBx_HC(chnum)->HCCHAR = tmpreg;

  return HAL_OK;
}
 8002c26:	2000      	movs	r0, #0
  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002c28:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c2c:	f8d1 3500 	ldr.w	r3, [r1, #1280]	; 0x500
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c30:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c38:	f8c1 3500 	str.w	r3, [r1, #1280]	; 0x500
}
 8002c3c:	4770      	bx	lr
 8002c3e:	bf00      	nop
 8002c40:	80080000 	.word	0x80080000

08002c44 <USB_HC_StartXfer>:
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002c44:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8002c46:	05db      	lsls	r3, r3, #23
{
 8002c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002c4c:	4616      	mov	r6, r2
 8002c4e:	4604      	mov	r4, r0
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8002c50:	784a      	ldrb	r2, [r1, #1]
  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8002c52:	d517      	bpl.n	8002c84 <USB_HC_StartXfer+0x40>
 8002c54:	790d      	ldrb	r5, [r1, #4]
 8002c56:	b9ad      	cbnz	r5, 8002c84 <USB_HC_StartXfer+0x40>
    if ((dma == 0U) && (hc->do_ping == 1U))
 8002c58:	b94e      	cbnz	r6, 8002c6e <USB_HC_StartXfer+0x2a>
 8002c5a:	794b      	ldrb	r3, [r1, #5]
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d111      	bne.n	8002c84 <USB_HC_StartXfer+0x40>
      (void)USB_DoPing(USBx, hc->ch_num);
 8002c60:	4611      	mov	r1, r2
 8002c62:	f7ff ffdd 	bl	8002c20 <USB_DoPing>
}
 8002c66:	2000      	movs	r0, #0
 8002c68:	b002      	add	sp, #8
 8002c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if (dma == 1U)
 8002c6e:	2e01      	cmp	r6, #1
 8002c70:	d108      	bne.n	8002c84 <USB_HC_StartXfer+0x40>
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8002c72:	eb00 1342 	add.w	r3, r0, r2, lsl #5
 8002c76:	f8d3 050c 	ldr.w	r0, [r3, #1292]	; 0x50c
 8002c7a:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 8002c7e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
      hc->do_ping = 0U;
 8002c82:	714d      	strb	r5, [r1, #5]
  if (hc->xfer_len > 0U)
 8002c84:	6908      	ldr	r0, [r1, #16]
 8002c86:	2800      	cmp	r0, #0
 8002c88:	d066      	beq.n	8002d58 <USB_HC_StartXfer+0x114>
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8002c8a:	890b      	ldrh	r3, [r1, #8]
 8002c8c:	3801      	subs	r0, #1
 8002c8e:	4418      	add	r0, r3
 8002c90:	fbb0 f0f3 	udiv	r0, r0, r3
 8002c94:	b280      	uxth	r0, r0
    if (num_packets > max_hc_pkt_count)
 8002c96:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8002c9a:	d903      	bls.n	8002ca4 <USB_HC_StartXfer+0x60>
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002c9c:	021b      	lsls	r3, r3, #8
      num_packets = max_hc_pkt_count;
 8002c9e:	f44f 7080 	mov.w	r0, #256	; 0x100
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002ca2:	610b      	str	r3, [r1, #16]
  if (hc->ep_is_in != 0U)
 8002ca4:	78cf      	ldrb	r7, [r1, #3]
 8002ca6:	b117      	cbz	r7, 8002cae <USB_HC_StartXfer+0x6a>
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8002ca8:	890b      	ldrh	r3, [r1, #8]
 8002caa:	4343      	muls	r3, r0
 8002cac:	610b      	str	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002cae:	f891 e00a 	ldrb.w	lr, [r1, #10]
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002cb2:	eb04 1542 	add.w	r5, r4, r2, lsl #5
 8002cb6:	690b      	ldr	r3, [r1, #16]
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002cb8:	ea4f 7e4e 	mov.w	lr, lr, lsl #29
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002cbc:	f3c3 0812 	ubfx	r8, r3, #0, #19
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8002cc0:	f00e 4ec0 	and.w	lr, lr, #1610612736	; 0x60000000
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8002cc4:	ea4e 0e08 	orr.w	lr, lr, r8
 8002cc8:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002da4 <USB_HC_StartXfer+0x160>
 8002ccc:	ea08 40c0 	and.w	r0, r8, r0, lsl #19
 8002cd0:	ea4e 0000 	orr.w	r0, lr, r0
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 8002cd4:	f8c5 0510 	str.w	r0, [r5, #1296]	; 0x510
  if (dma != 0U)
 8002cd8:	b116      	cbz	r6, 8002ce0 <USB_HC_StartXfer+0x9c>
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8002cda:	68c8      	ldr	r0, [r1, #12]
 8002cdc:	f8c5 0514 	str.w	r0, [r5, #1300]	; 0x514
  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8002ce0:	f504 6e80 	add.w	lr, r4, #1024	; 0x400
 8002ce4:	f8de 0008 	ldr.w	r0, [lr, #8]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002ce8:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002cec:	43c0      	mvns	r0, r0
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002cee:	f02c 5c00 	bic.w	ip, ip, #536870912	; 0x20000000
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002cf2:	0740      	lsls	r0, r0, #29
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8002cf4:	f8c5 c500 	str.w	ip, [r5, #1280]	; 0x500
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8002cf8:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 8002cfc:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002d00:	ea40 000c 	orr.w	r0, r0, ip
 8002d04:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002d08:	4825      	ldr	r0, [pc, #148]	; (8002da0 <USB_HC_StartXfer+0x15c>)
 8002d0a:	f8d5 c500 	ldr.w	ip, [r5, #1280]	; 0x500
 8002d0e:	f8c0 c000 	str.w	ip, [r0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d12:	f8d0 c000 	ldr.w	ip, [r0]
 8002d16:	f02c 4c80 	bic.w	ip, ip, #1073741824	; 0x40000000
 8002d1a:	f8c0 c000 	str.w	ip, [r0]
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002d1e:	f8d0 c000 	ldr.w	ip, [r0]
  if (hc->ep_is_in != 0U)
 8002d22:	b1df      	cbz	r7, 8002d5c <USB_HC_StartXfer+0x118>
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8002d24:	f44c 4c00 	orr.w	ip, ip, #32768	; 0x8000
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002d28:	f8c0 c000 	str.w	ip, [r0]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d2c:	f8d0 c000 	ldr.w	ip, [r0]
 8002d30:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8002d34:	f8c0 c000 	str.w	ip, [r0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d38:	6800      	ldr	r0, [r0, #0]
 8002d3a:	f8c5 0500 	str.w	r0, [r5, #1280]	; 0x500
  if (dma == 0U) /* Slave mode */
 8002d3e:	2e00      	cmp	r6, #0
 8002d40:	d191      	bne.n	8002c66 <USB_HC_StartXfer+0x22>
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8002d42:	2f00      	cmp	r7, #0
 8002d44:	d18f      	bne.n	8002c66 <USB_HC_StartXfer+0x22>
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d08d      	beq.n	8002c66 <USB_HC_StartXfer+0x22>
      switch (hc->ep_type)
 8002d4a:	79c8      	ldrb	r0, [r1, #7]
 8002d4c:	2803      	cmp	r0, #3
 8002d4e:	d813      	bhi.n	8002d78 <USB_HC_StartXfer+0x134>
 8002d50:	e8df f000 	tbb	[pc, r0]
 8002d54:	1a071a07 	.word	0x1a071a07
    num_packets = 1U;
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e7a3      	b.n	8002ca4 <USB_HC_StartXfer+0x60>
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8002d5c:	f42c 4c00 	bic.w	ip, ip, #32768	; 0x8000
 8002d60:	e7e2      	b.n	8002d28 <USB_HC_StartXfer+0xe4>
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002d62:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002d64:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8002d66:	b280      	uxth	r0, r0
 8002d68:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002d6c:	4285      	cmp	r5, r0
 8002d6e:	d903      	bls.n	8002d78 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8002d70:	69a0      	ldr	r0, [r4, #24]
 8002d72:	f040 0020 	orr.w	r0, r0, #32
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002d76:	61a0      	str	r0, [r4, #24]
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8002d78:	2000      	movs	r0, #0
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	9000      	str	r0, [sp, #0]
 8002d7e:	4620      	mov	r0, r4
 8002d80:	68c9      	ldr	r1, [r1, #12]
 8002d82:	f7ff fd6f 	bl	8002864 <USB_WritePacket>
 8002d86:	e76e      	b.n	8002c66 <USB_HC_StartXfer+0x22>
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002d88:	f8de 0010 	ldr.w	r0, [lr, #16]
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8002d8c:	1cdd      	adds	r5, r3, #3
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8002d8e:	b280      	uxth	r0, r0
 8002d90:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8002d94:	4285      	cmp	r5, r0
 8002d96:	d9ef      	bls.n	8002d78 <USB_HC_StartXfer+0x134>
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8002d98:	69a0      	ldr	r0, [r4, #24]
 8002d9a:	f040 6080 	orr.w	r0, r0, #67108864	; 0x4000000
 8002d9e:	e7ea      	b.n	8002d76 <USB_HC_StartXfer+0x132>
 8002da0:	2000028c 	.word	0x2000028c
 8002da4:	1ff80000 	.word	0x1ff80000

08002da8 <USB_StopHost>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002da8:	6883      	ldr	r3, [r0, #8]
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002daa:	2110      	movs	r1, #16
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002dac:	f023 0301 	bic.w	r3, r3, #1
{
 8002db0:	b510      	push	{r4, lr}
 8002db2:	4604      	mov	r4, r0
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002db4:	6083      	str	r3, [r0, #8]
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8002db6:	f7ff fd33 	bl	8002820 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8002dba:	4620      	mov	r0, r4
 8002dbc:	f7ff fd42 	bl	8002844 <USB_FlushRxFifo>
 8002dc0:	f504 63a0 	add.w	r3, r4, #1280	; 0x500
 8002dc4:	f504 60e0 	add.w	r0, r4, #1792	; 0x700
 8002dc8:	461a      	mov	r2, r3

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002dca:	6811      	ldr	r1, [r2, #0]
 8002dcc:	f021 2180 	bic.w	r1, r1, #2147516416	; 0x80008000
    value |=  USB_OTG_HCCHAR_CHDIS;
    value &= ~USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002dd0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    USBx_HC(i)->HCCHAR = value;
 8002dd4:	f842 1b20 	str.w	r1, [r2], #32
  for (i = 0U; i <= 15U; i++)
 8002dd8:	4290      	cmp	r0, r2
 8002dda:	d1f6      	bne.n	8002dca <USB_StopHost+0x22>
 8002ddc:	2000      	movs	r0, #0
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
  {
    value = USBx_HC(i)->HCCHAR;
 8002dde:	6819      	ldr	r1, [r3, #0]
 8002de0:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
    value |= USB_OTG_HCCHAR_CHDIS;
    value |= USB_OTG_HCCHAR_CHENA;
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8002de4:	f041 4140 	orr.w	r1, r1, #3221225472	; 0xc0000000
    USBx_HC(i)->HCCHAR = value;
 8002de8:	6019      	str	r1, [r3, #0]

    do
    {
      if (++count > 1000U)
 8002dea:	3001      	adds	r0, #1
 8002dec:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002df0:	d802      	bhi.n	8002df8 <USB_StopHost+0x50>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8002df2:	6819      	ldr	r1, [r3, #0]
 8002df4:	2900      	cmp	r1, #0
 8002df6:	dbf8      	blt.n	8002dea <USB_StopHost+0x42>
 8002df8:	3320      	adds	r3, #32
  for (i = 0U; i <= 15U; i++)
 8002dfa:	429a      	cmp	r2, r3
 8002dfc:	d1ef      	bne.n	8002dde <USB_StopHost+0x36>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  USBx->GINTSTS = 0xFFFFFFFFU;

  (void)USB_EnableGlobalInt(USBx);

  return HAL_OK;
}
 8002e02:	2000      	movs	r0, #0
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8002e04:	f8c4 3414 	str.w	r3, [r4, #1044]	; 0x414
  USBx->GINTSTS = 0xFFFFFFFFU;
 8002e08:	6163      	str	r3, [r4, #20]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e0a:	68a3      	ldr	r3, [r4, #8]
 8002e0c:	f043 0301 	orr.w	r3, r3, #1
 8002e10:	60a3      	str	r3, [r4, #8]
}
 8002e12:	bd10      	pop	{r4, pc}

08002e14 <USBH_VIDEO_SOFProcess>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_VIDEO_SOFProcess (USBH_HandleTypeDef *phost)
{    
  return USBH_OK;
}
 8002e14:	2000      	movs	r0, #0
 8002e16:	4770      	bx	lr

08002e18 <USBH_VIDEO_ClassRequest>:
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *)phost->pActiveClass->pData;  
 8002e18:	f8d0 373c 	ldr.w	r3, [r0, #1852]	; 0x73c
{   
 8002e1c:	b570      	push	{r4, r5, r6, lr}
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *)phost->pActiveClass->pData;  
 8002e1e:	69dd      	ldr	r5, [r3, #28]
{   
 8002e20:	4606      	mov	r6, r0
  switch (VIDEO_Handle->req_state)
 8002e22:	782b      	ldrb	r3, [r5, #0]
 8002e24:	3b01      	subs	r3, #1
 8002e26:	2b03      	cmp	r3, #3
 8002e28:	d80d      	bhi.n	8002e46 <USBH_VIDEO_ClassRequest+0x2e>
 8002e2a:	e8df f003 	tbb	[pc, r3]
 8002e2e:	2c02      	.short	0x2c02
 8002e30:	1a02      	.short	0x1a02
    if(VIDEO_Handle->camera.supported == 1)
 8002e32:	f895 410e 	ldrb.w	r4, [r5, #270]	; 0x10e
 8002e36:	2c01      	cmp	r4, #1
 8002e38:	d10a      	bne.n	8002e50 <USBH_VIDEO_ClassRequest+0x38>
      req_status = USBH_SetInterface(phost, 
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f895 110c 	ldrb.w	r1, [r5, #268]	; 0x10c
 8002e40:	f001 f98c 	bl	800415c <USBH_SetInterface>
      if(req_status == USBH_OK)
 8002e44:	b108      	cbz	r0, 8002e4a <USBH_VIDEO_ClassRequest+0x32>
  USBH_StatusTypeDef status = USBH_BUSY;
 8002e46:	2001      	movs	r0, #1
}
 8002e48:	bd70      	pop	{r4, r5, r6, pc}
        VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 8002e4a:	2304      	movs	r3, #4
 8002e4c:	702b      	strb	r3, [r5, #0]
 8002e4e:	e7fa      	b.n	8002e46 <USBH_VIDEO_ClassRequest+0x2e>
      VIDEO_Handle->req_state = VIDEO_REQ_SET_DEFAULT_IN_INTERFACE;//???
 8002e50:	2303      	movs	r3, #3
      VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 8002e52:	702b      	strb	r3, [r5, #0]
      osMessagePut ( phost->os_event, USBH_URB_EVENT, 0);
 8002e54:	2200      	movs	r2, #0
 8002e56:	2102      	movs	r1, #2
 8002e58:	f8d6 0798 	ldr.w	r0, [r6, #1944]	; 0x798
 8002e5c:	f001 fa74 	bl	8004348 <osMessagePut>
 8002e60:	e7f1      	b.n	8002e46 <USBH_VIDEO_ClassRequest+0x2e>
    if(VIDEO_Handle->camera.supported == 1)
 8002e62:	f895 410e 	ldrb.w	r4, [r5, #270]	; 0x10e
 8002e66:	2c01      	cmp	r4, #1
 8002e68:	d10b      	bne.n	8002e82 <USBH_VIDEO_ClassRequest+0x6a>
      req_status = USBH_SetInterface(phost, 
 8002e6a:	f895 210d 	ldrb.w	r2, [r5, #269]	; 0x10d
 8002e6e:	f895 110c 	ldrb.w	r1, [r5, #268]	; 0x10c
 8002e72:	f001 f973 	bl	800415c <USBH_SetInterface>
      if(req_status == USBH_OK)
 8002e76:	2800      	cmp	r0, #0
 8002e78:	d1e5      	bne.n	8002e46 <USBH_VIDEO_ClassRequest+0x2e>
        VIDEO_Handle->req_state = VIDEO_REQ_IDLE;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	702b      	strb	r3, [r5, #0]
        VIDEO_Handle->steam_in_state = VIDEO_STATE_START_IN;
 8002e7e:	70ab      	strb	r3, [r5, #2]
 8002e80:	e7e1      	b.n	8002e46 <USBH_VIDEO_ClassRequest+0x2e>
      VIDEO_Handle->req_state = VIDEO_REQ_SET_IN_INTERFACE;
 8002e82:	2304      	movs	r3, #4
 8002e84:	e7e5      	b.n	8002e52 <USBH_VIDEO_ClassRequest+0x3a>
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE); 
 8002e86:	f8d0 3794 	ldr.w	r3, [r0, #1940]	; 0x794
 8002e8a:	2102      	movs	r1, #2
 8002e8c:	4798      	blx	r3
      osMessagePut ( phost->os_event, USBH_CLASS_EVENT, 0);
 8002e8e:	2200      	movs	r2, #0
 8002e90:	2104      	movs	r1, #4
 8002e92:	f8d6 0798 	ldr.w	r0, [r6, #1944]	; 0x798
 8002e96:	f001 fa57 	bl	8004348 <osMessagePut>
    status  = USBH_OK;    
 8002e9a:	2000      	movs	r0, #0
 8002e9c:	bd70      	pop	{r4, r5, r6, pc}

08002e9e <USBH_VIDEO_InterfaceDeInit>:
{
 8002e9e:	b538      	push	{r3, r4, r5, lr}
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 8002ea0:	f8d0 373c 	ldr.w	r3, [r0, #1852]	; 0x73c
{
 8002ea4:	4604      	mov	r4, r0
  VIDEO_HandleTypeDef *VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 8002ea6:	69dd      	ldr	r5, [r3, #28]
  if(VIDEO_Handle->camera.Pipe != 0x00)
 8002ea8:	f895 110f 	ldrb.w	r1, [r5, #271]	; 0x10f
 8002eac:	b149      	cbz	r1, 8002ec2 <USBH_VIDEO_InterfaceDeInit+0x24>
    USBH_ClosePipe  (phost, VIDEO_Handle->camera.Pipe);
 8002eae:	f001 f9b8 	bl	8004222 <USBH_ClosePipe>
    USBH_FreePipe  (phost, VIDEO_Handle->camera.Pipe);
 8002eb2:	f895 110f 	ldrb.w	r1, [r5, #271]	; 0x10f
 8002eb6:	4620      	mov	r0, r4
 8002eb8:	f001 f9d0 	bl	800425c <USBH_FreePipe>
    VIDEO_Handle->camera.Pipe = 0;     /* Reset the pipe as Free */  
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	f885 310f 	strb.w	r3, [r5, #271]	; 0x10f
  if(phost->pActiveClass->pData)
 8002ec2:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8002ec6:	69d8      	ldr	r0, [r3, #28]
 8002ec8:	b128      	cbz	r0, 8002ed6 <USBH_VIDEO_InterfaceDeInit+0x38>
    USBH_free (phost->pActiveClass->pData);
 8002eca:	f004 fbc3 	bl	8007654 <free>
    phost->pActiveClass->pData = 0;
 8002ece:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	61da      	str	r2, [r3, #28]
}
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	bd38      	pop	{r3, r4, r5, pc}
	...

08002edc <USBH_VIDEO_InterfaceInit>:
{
 8002edc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  interface = USBH_FindInterface(phost, CC_VIDEO, USB_SUBCLASS_VIDEOCONTROL, 0x00);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	210e      	movs	r1, #14
{
 8002ee4:	4605      	mov	r5, r0
  interface = USBH_FindInterface(phost, CC_VIDEO, USB_SUBCLASS_VIDEOCONTROL, 0x00);
 8002ee6:	f000 fb65 	bl	80035b4 <USBH_FindInterface>
  if(interface == 0xFF) /* Not Valid Interface */
 8002eea:	28ff      	cmp	r0, #255	; 0xff
 8002eec:	d10d      	bne.n	8002f0a <USBH_VIDEO_InterfaceInit+0x2e>
    USBH_ErrLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
 8002eee:	4848      	ldr	r0, [pc, #288]	; (8003010 <USBH_VIDEO_InterfaceInit+0x134>)
 8002ef0:	f004 fc86 	bl	8007800 <iprintf>
 8002ef4:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
 8002ef8:	4846      	ldr	r0, [pc, #280]	; (8003014 <USBH_VIDEO_InterfaceInit+0x138>)
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	f004 fc80 	bl	8007800 <iprintf>
 8002f00:	200a      	movs	r0, #10
 8002f02:	f004 fc95 	bl	8007830 <putchar>
      return USBH_FAIL;
 8002f06:	2602      	movs	r6, #2
 8002f08:	e01b      	b.n	8002f42 <USBH_VIDEO_InterfaceInit+0x66>
    phost->pActiveClass->pData = (VIDEO_HandleTypeDef *)USBH_malloc (sizeof(VIDEO_HandleTypeDef));
 8002f0a:	f8d5 673c 	ldr.w	r6, [r5, #1852]	; 0x73c
 8002f0e:	f44f 70a4 	mov.w	r0, #328	; 0x148
 8002f12:	f004 fb97 	bl	8007644 <malloc>
    USBH_memset(VIDEO_Handle, 0, sizeof(VIDEO_HandleTypeDef));
 8002f16:	f44f 72a4 	mov.w	r2, #328	; 0x148
    phost->pActiveClass->pData = (VIDEO_HandleTypeDef *)USBH_malloc (sizeof(VIDEO_HandleTypeDef));
 8002f1a:	61f0      	str	r0, [r6, #28]
    USBH_memset(VIDEO_Handle, 0, sizeof(VIDEO_HandleTypeDef));
 8002f1c:	2100      	movs	r1, #0
    phost->pActiveClass->pData = (VIDEO_HandleTypeDef *)USBH_malloc (sizeof(VIDEO_HandleTypeDef));
 8002f1e:	4604      	mov	r4, r0
    USBH_memset(VIDEO_Handle, 0, sizeof(VIDEO_HandleTypeDef));
 8002f20:	f004 fbba 	bl	8007698 <memset>
    out_status = USBH_VIDEO_FindStreamingIN(phost);
 8002f24:	4628      	mov	r0, r5
 8002f26:	f000 f8df 	bl	80030e8 <USBH_VIDEO_FindStreamingIN>
    if(out_status == USBH_FAIL)
 8002f2a:	2802      	cmp	r0, #2
    out_status = USBH_VIDEO_FindStreamingIN(phost);
 8002f2c:	4606      	mov	r6, r0
    if(out_status == USBH_FAIL)
 8002f2e:	d10b      	bne.n	8002f48 <USBH_VIDEO_InterfaceInit+0x6c>
      USBH_UsrLog("%s class configuration not supported.", phost->pActiveClass->Name);
 8002f30:	f8d5 373c 	ldr.w	r3, [r5, #1852]	; 0x73c
 8002f34:	4838      	ldr	r0, [pc, #224]	; (8003018 <USBH_VIDEO_InterfaceInit+0x13c>)
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	f004 fc62 	bl	8007800 <iprintf>
 8002f3c:	200a      	movs	r0, #10
 8002f3e:	f004 fc77 	bl	8007830 <putchar>
}
 8002f42:	4630      	mov	r0, r6
 8002f44:	b004      	add	sp, #16
 8002f46:	bd70      	pop	{r4, r5, r6, pc}
 8002f48:	4623      	mov	r3, r4
 8002f4a:	f104 0032 	add.w	r0, r4, #50	; 0x32
    if(out_status == USBH_FAIL)
 8002f4e:	2600      	movs	r6, #0
      if( VIDEO_Handle->stream_in[index].valid == 1)
 8002f50:	7a99      	ldrb	r1, [r3, #10]
 8002f52:	2901      	cmp	r1, #1
 8002f54:	d116      	bne.n	8002f84 <USBH_VIDEO_InterfaceInit+0xa8>
        uint16_t ep_size = VIDEO_Handle->stream_in[index].EpSize;
 8002f56:	88da      	ldrh	r2, [r3, #6]
        if ((ep_size > ep_size_in) && (ep_size < UVC_RX_FIFO_SIZE_LIMIT))
 8002f58:	42b2      	cmp	r2, r6
 8002f5a:	d913      	bls.n	8002f84 <USBH_VIDEO_InterfaceInit+0xa8>
 8002f5c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f60:	d210      	bcs.n	8002f84 <USBH_VIDEO_InterfaceInit+0xa8>
          VIDEO_Handle->camera.interface = VIDEO_Handle->stream_in[index].interface;
 8002f62:	7a5e      	ldrb	r6, [r3, #9]
 8002f64:	f884 610c 	strb.w	r6, [r4, #268]	; 0x10c
          VIDEO_Handle->camera.AltSettings = VIDEO_Handle->stream_in[index].AltSettings;                
 8002f68:	7a1e      	ldrb	r6, [r3, #8]
 8002f6a:	f884 610d 	strb.w	r6, [r4, #269]	; 0x10d
          VIDEO_Handle->camera.Ep = VIDEO_Handle->stream_in[index].Ep;
 8002f6e:	791e      	ldrb	r6, [r3, #4]
          VIDEO_Handle->camera.EpSize = VIDEO_Handle->stream_in[index].EpSize;
 8002f70:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
          VIDEO_Handle->camera.Ep = VIDEO_Handle->stream_in[index].Ep;
 8002f74:	f884 6108 	strb.w	r6, [r4, #264]	; 0x108
          VIDEO_Handle->camera.Poll = VIDEO_Handle->stream_in[index].Poll;         
 8002f78:	899e      	ldrh	r6, [r3, #12]
          VIDEO_Handle->camera.supported = 1;    
 8002f7a:	f884 110e 	strb.w	r1, [r4, #270]	; 0x10e
          VIDEO_Handle->camera.Poll = VIDEO_Handle->stream_in[index].Poll;         
 8002f7e:	f884 6110 	strb.w	r6, [r4, #272]	; 0x110
          VIDEO_Handle->camera.supported = 1;    
 8002f82:	4616      	mov	r6, r2
 8002f84:	330a      	adds	r3, #10
    for (index = 0; index < VIDEO_MAX_VIDEO_STD_INTERFACE; index++)
 8002f86:	4298      	cmp	r0, r3
 8002f88:	d1e2      	bne.n	8002f50 <USBH_VIDEO_InterfaceInit+0x74>
    USBH_DbgLog("Selected EP size: %d bytes", ep_size_in);
 8002f8a:	4824      	ldr	r0, [pc, #144]	; (800301c <USBH_VIDEO_InterfaceInit+0x140>)
 8002f8c:	f004 fc38 	bl	8007800 <iprintf>
 8002f90:	4631      	mov	r1, r6
 8002f92:	4823      	ldr	r0, [pc, #140]	; (8003020 <USBH_VIDEO_InterfaceInit+0x144>)
    USBH_VIDEO_AnalyseFormatDescriptors(&VIDEO_Handle->class_desc);
 8002f94:	f104 0638 	add.w	r6, r4, #56	; 0x38
    USBH_DbgLog("Selected EP size: %d bytes", ep_size_in);
 8002f98:	f004 fc32 	bl	8007800 <iprintf>
 8002f9c:	200a      	movs	r0, #10
 8002f9e:	f004 fc47 	bl	8007830 <putchar>
    USBH_VIDEO_ParseCSDescriptors(phost);
 8002fa2:	4628      	mov	r0, r5
 8002fa4:	f000 f97a 	bl	800329c <USBH_VIDEO_ParseCSDescriptors>
    USBH_VIDEO_AnalyseFormatDescriptors(&VIDEO_Handle->class_desc);
 8002fa8:	4630      	mov	r0, r6
 8002faa:	f000 f9bb 	bl	8003324 <USBH_VIDEO_AnalyseFormatDescriptors>
    if (USBH_VIDEO_Best_bFormatIndex == -1)
 8002fae:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <USBH_VIDEO_InterfaceInit+0x148>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	d0a7      	beq.n	8002f06 <USBH_VIDEO_InterfaceInit+0x2a>
    USBH_VIDEO_AnalyseFrameDescriptors(&VIDEO_Handle->class_desc);
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	f000 f9fe 	bl	80033b8 <USBH_VIDEO_AnalyseFrameDescriptors>
    if (USBH_VIDEO_Best_bFrameIndex == -1)
 8002fbc:	4b1a      	ldr	r3, [pc, #104]	; (8003028 <USBH_VIDEO_InterfaceInit+0x14c>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	d0a0      	beq.n	8002f06 <USBH_VIDEO_InterfaceInit+0x2a>
    if(VIDEO_Handle->camera.supported == 1)
 8002fc4:	f894 610e 	ldrb.w	r6, [r4, #270]	; 0x10e
 8002fc8:	2e01      	cmp	r6, #1
 8002fca:	d11b      	bne.n	8003004 <USBH_VIDEO_InterfaceInit+0x128>
      VIDEO_Handle->camera.Pipe = USBH_AllocPipe(phost, VIDEO_Handle->camera.Ep);
 8002fcc:	f894 1108 	ldrb.w	r1, [r4, #264]	; 0x108
 8002fd0:	4628      	mov	r0, r5
 8002fd2:	f001 f92b 	bl	800422c <USBH_AllocPipe>
 8002fd6:	4601      	mov	r1, r0
 8002fd8:	f884 010f 	strb.w	r0, [r4, #271]	; 0x10f
      USBH_OpenPipe(phost,
 8002fdc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002fe0:	f894 2108 	ldrb.w	r2, [r4, #264]	; 0x108
 8002fe4:	9002      	str	r0, [sp, #8]
 8002fe6:	f895 051d 	ldrb.w	r0, [r5, #1309]	; 0x51d
 8002fea:	f895 351c 	ldrb.w	r3, [r5, #1308]	; 0x51c
 8002fee:	9000      	str	r0, [sp, #0]
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	9601      	str	r6, [sp, #4]
 8002ff4:	f001 f906 	bl	8004204 <USBH_OpenPipe>
      USBH_LL_SetToggle(phost, VIDEO_Handle->camera.Pipe, 0);  
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	f894 110f 	ldrb.w	r1, [r4, #271]	; 0x10f
 8002ffe:	4628      	mov	r0, r5
 8003000:	f004 faa4 	bl	800754c <USBH_LL_SetToggle>
    VIDEO_Handle->req_state     = VIDEO_REQ_INIT;
 8003004:	2301      	movs	r3, #1
    status = USBH_OK;
 8003006:	2600      	movs	r6, #0
    VIDEO_Handle->req_state     = VIDEO_REQ_INIT;
 8003008:	7023      	strb	r3, [r4, #0]
    VIDEO_Handle->control_state = VIDEO_CONTROL_INIT;
 800300a:	7063      	strb	r3, [r4, #1]
 800300c:	e799      	b.n	8002f42 <USBH_VIDEO_InterfaceInit+0x66>
 800300e:	bf00      	nop
 8003010:	080089d0 	.word	0x080089d0
 8003014:	080089d8 	.word	0x080089d8
 8003018:	08008a00 	.word	0x08008a00
 800301c:	08008a26 	.word	0x08008a26
 8003020:	08008a2f 	.word	0x08008a2f
 8003024:	20000028 	.word	0x20000028
 8003028:	2000002c 	.word	0x2000002c

0800302c <USBH_VIDEO_ProcessDummy>:
 800302c:	2000      	movs	r0, #0
 800302e:	4770      	bx	lr

08003030 <USBH_VS_SetCur>:

USBH_StatusTypeDef USBH_VS_SetCur(USBH_HandleTypeDef *phost, uint16_t request_type)
{
  uint16_t wLength = 26;
  
  if (request_type == (VS_PROBE_CONTROL << 8))
 8003030:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8003034:	b570      	push	{r4, r5, r6, lr}
 8003036:	4604      	mov	r4, r0
 8003038:	460e      	mov	r6, r1
  if (request_type == (VS_PROBE_CONTROL << 8))
 800303a:	d10f      	bne.n	800305c <USBH_VS_SetCur+0x2c>
  {
    memset(&ProbeParams, 0, sizeof(ProbeParams));
 800303c:	4d13      	ldr	r5, [pc, #76]	; (800308c <USBH_VS_SetCur+0x5c>)
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	2100      	movs	r1, #0
 8003042:	4628      	mov	r0, r5
 8003044:	f004 fb28 	bl	8007698 <memset>
    // Set needed params, at commit stage this parameters must be receied during "GET_CUR"
    ProbeParams.bmHint = 1;
 8003048:	2301      	movs	r3, #1
 800304a:	802b      	strh	r3, [r5, #0]
    ProbeParams.bFormatIndex = USBH_VIDEO_Best_bFormatIndex;             
 800304c:	4b10      	ldr	r3, [pc, #64]	; (8003090 <USBH_VS_SetCur+0x60>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	70ab      	strb	r3, [r5, #2]
    ProbeParams.bFrameIndex = USBH_VIDEO_Best_bFrameIndex;
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <USBH_VS_SetCur+0x64>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	70eb      	strb	r3, [r5, #3]
    
    //Maximum framerate can be selected here
    ProbeParams.dwFrameInterval = 333333;//30 FPS
 8003058:	4b0f      	ldr	r3, [pc, #60]	; (8003098 <USBH_VS_SetCur+0x68>)
 800305a:	606b      	str	r3, [r5, #4]
    //ProbeParams.dwFrameInterval = 2000000;//5 FPS
  }
  
  //H2D - host to device
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 800305c:	2321      	movs	r3, #33	; 0x21
  USB_REQ_TYPE_CLASS;
  
  VIDEO_HandleTypeDef *VIDEO_Handle;
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
  
  phost->Control.setup.b.bRequest = UVC_SET_CUR;
 800305e:	2201      	movs	r2, #1
  phost->Control.setup.b.wLength.w = wLength;
  
  USBH_StatusTypeDef status;
  do 
  {
    status = USBH_CtlReq(phost, (uint8_t *)&ProbeParams, wLength);
 8003060:	4d0a      	ldr	r5, [pc, #40]	; (800308c <USBH_VS_SetCur+0x5c>)
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8003062:	7423      	strb	r3, [r4, #16]
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
 8003064:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003068:	69db      	ldr	r3, [r3, #28]
  phost->Control.setup.b.bRequest = UVC_SET_CUR;
 800306a:	7462      	strb	r2, [r4, #17]
  phost->Control.setup.b.wValue.w = request_type;
 800306c:	8266      	strh	r6, [r4, #18]
  phost->Control.setup.b.wIndex.w = VIDEO_Handle->camera.interface; //Video Streaming interface number
 800306e:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 8003072:	82a3      	strh	r3, [r4, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8003074:	231a      	movs	r3, #26
 8003076:	82e3      	strh	r3, [r4, #22]
    status = USBH_CtlReq(phost, (uint8_t *)&ProbeParams, wLength);
 8003078:	221a      	movs	r2, #26
 800307a:	4629      	mov	r1, r5
 800307c:	4620      	mov	r0, r4
 800307e:	f000 fe37 	bl	8003cf0 <USBH_CtlReq>
  } while (status == USBH_BUSY);
 8003082:	2801      	cmp	r0, #1
 8003084:	d0f8      	beq.n	8003078 <USBH_VS_SetCur+0x48>
  
  return USBH_OK;
}
 8003086:	2000      	movs	r0, #0
 8003088:	bd70      	pop	{r4, r5, r6, pc}
 800308a:	bf00      	nop
 800308c:	20004034 	.word	0x20004034
 8003090:	20000028 	.word	0x20000028
 8003094:	2000002c 	.word	0x2000002c
 8003098:	00051615 	.word	0x00051615

0800309c <USBH_VS_GetCur>:

USBH_StatusTypeDef USBH_VS_GetCur(USBH_HandleTypeDef *phost, uint16_t request_type)
{
 800309c:	b538      	push	{r3, r4, r5, lr}
  memset(&ProbeParams, 0, sizeof(ProbeParams));
 800309e:	2224      	movs	r2, #36	; 0x24
{
 80030a0:	4604      	mov	r4, r0
 80030a2:	460d      	mov	r5, r1
  memset(&ProbeParams, 0, sizeof(ProbeParams));
 80030a4:	480f      	ldr	r0, [pc, #60]	; (80030e4 <USBH_VS_GetCur+0x48>)
 80030a6:	2100      	movs	r1, #0
 80030a8:	f004 faf6 	bl	8007698 <memset>
  uint16_t wLength = 26;

  //H2D - host to device
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80030ac:	23a1      	movs	r3, #161	; 0xa1
  USB_REQ_TYPE_CLASS;
  
  VIDEO_HandleTypeDef *VIDEO_Handle;
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
  
  phost->Control.setup.b.bRequest = UVC_GET_CUR;
 80030ae:	2281      	movs	r2, #129	; 0x81
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80030b0:	7423      	strb	r3, [r4, #16]
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;
 80030b2:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 80030b6:	69db      	ldr	r3, [r3, #28]
  phost->Control.setup.b.bRequest = UVC_GET_CUR;
 80030b8:	7462      	strb	r2, [r4, #17]
  phost->Control.setup.b.wValue.w = request_type;
 80030ba:	8265      	strh	r5, [r4, #18]
  phost->Control.setup.b.wIndex.w = VIDEO_Handle->camera.interface; //Video Streaming interface number
 80030bc:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
 80030c0:	82a3      	strh	r3, [r4, #20]
  phost->Control.setup.b.wLength.w = wLength;
 80030c2:	231a      	movs	r3, #26
 80030c4:	82e3      	strh	r3, [r4, #22]
  
  USBH_StatusTypeDef status;
  do 
  {
    status = USBH_CtlReq(phost, (uint8_t *)&ProbeParams, wLength);
 80030c6:	221a      	movs	r2, #26
 80030c8:	4906      	ldr	r1, [pc, #24]	; (80030e4 <USBH_VS_GetCur+0x48>)
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 fe10 	bl	8003cf0 <USBH_CtlReq>
  } while (status == USBH_BUSY);
 80030d0:	2801      	cmp	r0, #1
 80030d2:	d0f8      	beq.n	80030c6 <USBH_VS_GetCur+0x2a>
  
  if (status == USBH_OK)
 80030d4:	b920      	cbnz	r0, 80030e0 <USBH_VS_GetCur+0x44>
  {
    if (ProbeParams.dwMaxVideoFrameSize > 0)
 80030d6:	4b03      	ldr	r3, [pc, #12]	; (80030e4 <USBH_VS_GetCur+0x48>)
 80030d8:	695b      	ldr	r3, [r3, #20]
    {
      return USBH_OK;
    }
    else
      return USBH_FAIL;
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf08      	it	eq
 80030de:	2002      	moveq	r0, #2
  }
  
  return status;
 80030e0:	bd38      	pop	{r3, r4, r5, pc}
 80030e2:	bf00      	nop
 80030e4:	20004034 	.word	0x20004034

080030e8 <USBH_VIDEO_FindStreamingIN>:
{
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL ;
  VIDEO_HandleTypeDef *VIDEO_Handle;

  VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 80030e8:	f8d0 373c 	ldr.w	r3, [r0, #1852]	; 0x73c
{
 80030ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  VIDEO_Handle = (VIDEO_HandleTypeDef *) phost->pActiveClass->pData; 
 80030ee:	69dd      	ldr	r5, [r3, #28]
 80030f0:	f500 76fa 	add.w	r6, r0, #500	; 0x1f4

  // Look For VIDEOSTREAMING IN interface (data FROM camera)
  alt_settings = 0;
 80030f4:	2300      	movs	r3, #0
      {
        VIDEO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
        VIDEO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
        VIDEO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;        
        VIDEO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
        VIDEO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 80030f6:	270a      	movs	r7, #10
        VIDEO_Handle->stream_in[alt_settings].valid = 1; 
 80030f8:	f04f 0e01 	mov.w	lr, #1
    if((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == CC_VIDEO) &&
 80030fc:	f890 2547 	ldrb.w	r2, [r0, #1351]	; 0x547
 8003100:	2a0e      	cmp	r2, #14
 8003102:	d11f      	bne.n	8003144 <USBH_VIDEO_FindStreamingIN+0x5c>
 8003104:	f890 2548 	ldrb.w	r2, [r0, #1352]	; 0x548
 8003108:	2a02      	cmp	r2, #2
 800310a:	d11b      	bne.n	8003144 <USBH_VIDEO_FindStreamingIN+0x5c>
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) && // is IN EP
 800310c:	f890 454e 	ldrb.w	r4, [r0, #1358]	; 0x54e
 8003110:	0622      	lsls	r2, r4, #24
 8003112:	d517      	bpl.n	8003144 <USBH_VIDEO_FindStreamingIN+0x5c>
         (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0))
 8003114:	f8b0 1550 	ldrh.w	r1, [r0, #1360]	; 0x550
      if((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80) && // is IN EP
 8003118:	b1a1      	cbz	r1, 8003144 <USBH_VIDEO_FindStreamingIN+0x5c>
 800311a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800311e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
        VIDEO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8003122:	7114      	strb	r4, [r2, #4]
        VIDEO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8003124:	80d1      	strh	r1, [r2, #6]
        VIDEO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;        
 8003126:	f890 1544 	ldrb.w	r1, [r0, #1348]	; 0x544
 800312a:	7251      	strb	r1, [r2, #9]
        VIDEO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 800312c:	f890 1545 	ldrb.w	r1, [r0, #1349]	; 0x545
 8003130:	7211      	strb	r1, [r2, #8]
        VIDEO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 8003132:	fb07 5103 	mla	r1, r7, r3, r5
        alt_settings++;
 8003136:	3301      	adds	r3, #1
        VIDEO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 8003138:	f890 4552 	ldrb.w	r4, [r0, #1362]	; 0x552
        alt_settings++;
 800313c:	b2db      	uxtb	r3, r3
        VIDEO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;   
 800313e:	818c      	strh	r4, [r1, #12]
        VIDEO_Handle->stream_in[alt_settings].valid = 1; 
 8003140:	f882 e00a 	strb.w	lr, [r2, #10]
 8003144:	3032      	adds	r0, #50	; 0x32
  for (interface = 0;  interface < USBH_MAX_NUM_INTERFACES ; interface ++ )
 8003146:	42b0      	cmp	r0, r6
 8003148:	d1d8      	bne.n	80030fc <USBH_VIDEO_FindStreamingIN+0x14>
    }
  } 
  
  if(alt_settings > 0)
  {  
     status = USBH_OK;
 800314a:	2b00      	cmp	r3, #0
  }
  
  return status;
}
 800314c:	bf0c      	ite	eq
 800314e:	2002      	moveq	r0, #2
 8003150:	2000      	movne	r0, #0
 8003152:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003154 <ParseCSDescriptors>:
                                      uint8_t vs_subclass, 
                                      uint8_t *pdesc)
{
  uint8_t desc_number = 0;
    
  if(vs_subclass == USB_SUBCLASS_VIDEOCONTROL)
 8003154:	2901      	cmp	r1, #1
{
 8003156:	b570      	push	{r4, r5, r6, lr}
 8003158:	4604      	mov	r4, r0
  if(vs_subclass == USB_SUBCLASS_VIDEOCONTROL)
 800315a:	d125      	bne.n	80031a8 <ParseCSDescriptors+0x54>
  {
    switch(pdesc[2])
 800315c:	7893      	ldrb	r3, [r2, #2]
 800315e:	3b01      	subs	r3, #1
 8003160:	2b03      	cmp	r3, #3
 8003162:	d804      	bhi.n	800316e <ParseCSDescriptors+0x1a>
 8003164:	e8df f003 	tbb	[pc, r3]
 8003168:	170e0502 	.word	0x170e0502
    {
    case UVC_VC_HEADER: 
      class_desc->cs_desc.HeaderDesc = (VIDEO_HeaderDescTypeDef *)pdesc;
 800316c:	6002      	str	r2, [r0, #0]
      break;
    }
  }
 
  return USBH_OK;
}
 800316e:	2000      	movs	r0, #0
 8003170:	bd70      	pop	{r4, r5, r6, pc}
      class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (VIDEO_ITDescTypeDef*) pdesc;    
 8003172:	f8b0 30c2 	ldrh.w	r3, [r0, #194]	; 0xc2
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800317c:	f8a0 10c2 	strh.w	r1, [r0, #194]	; 0xc2
 8003180:	6062      	str	r2, [r4, #4]
      break;
 8003182:	e7f4      	b.n	800316e <ParseCSDescriptors+0x1a>
      class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (VIDEO_OTDescTypeDef*) pdesc;   
 8003184:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
 8003188:	1c59      	adds	r1, r3, #1
 800318a:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800318e:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
 8003192:	62e2      	str	r2, [r4, #44]	; 0x2c
      break;
 8003194:	e7eb      	b.n	800316e <ParseCSDescriptors+0x1a>
      class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (VIDEO_SelectorDescTypeDef*) pdesc; 
 8003196:	f8b0 30c6 	ldrh.w	r3, [r0, #198]	; 0xc6
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80031a0:	f8a0 10c6 	strh.w	r1, [r0, #198]	; 0xc6
 80031a4:	6462      	str	r2, [r4, #68]	; 0x44
      break;    
 80031a6:	e7e2      	b.n	800316e <ParseCSDescriptors+0x1a>
  else if(vs_subclass == USB_SUBCLASS_VIDEOSTREAMING)
 80031a8:	2902      	cmp	r1, #2
 80031aa:	d1e0      	bne.n	800316e <ParseCSDescriptors+0x1a>
    switch(pdesc[2])
 80031ac:	7893      	ldrb	r3, [r2, #2]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	2b06      	cmp	r3, #6
 80031b2:	d8dc      	bhi.n	800316e <ParseCSDescriptors+0x1a>
 80031b4:	a101      	add	r1, pc, #4	; (adr r1, 80031bc <ParseCSDescriptors+0x68>)
 80031b6:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80031ba:	bf00      	nop
 80031bc:	080031d9 	.word	0x080031d9
 80031c0:	0800316f 	.word	0x0800316f
 80031c4:	0800316f 	.word	0x0800316f
 80031c8:	0800323d 	.word	0x0800323d
 80031cc:	08003255 	.word	0x08003255
 80031d0:	080031ef 	.word	0x080031ef
 80031d4:	08003205 	.word	0x08003205
      if (class_desc->InputHeaderNum < VIDEO_MAX_NUM_IN_HEADER)
 80031d8:	f890 30c8 	ldrb.w	r3, [r0, #200]	; 0xc8
 80031dc:	2b02      	cmp	r3, #2
 80031de:	d8c6      	bhi.n	800316e <ParseCSDescriptors+0x1a>
        class_desc->vs_desc.InputHeader[class_desc->InputHeaderNum++] = (VIDEO_InHeaderDescTypeDef*) pdesc; 
 80031e0:	1c59      	adds	r1, r3, #1
 80031e2:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80031e6:	f880 10c8 	strb.w	r1, [r0, #200]	; 0xc8
 80031ea:	64e2      	str	r2, [r4, #76]	; 0x4c
 80031ec:	e7bf      	b.n	800316e <ParseCSDescriptors+0x1a>
      if (class_desc->MJPEGFormatNum < VIDEO_MAX_MJPEG_FORMAT)
 80031ee:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d8bb      	bhi.n	800316e <ParseCSDescriptors+0x1a>
        class_desc->vs_desc.MJPEGFormat[class_desc->MJPEGFormatNum++] = (VIDEO_MJPEGFormatDescTypeDef*) pdesc; 
 80031f6:	1c59      	adds	r1, r3, #1
 80031f8:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 80031fc:	f880 10c9 	strb.w	r1, [r0, #201]	; 0xc9
 8003200:	65a2      	str	r2, [r4, #88]	; 0x58
 8003202:	e7b4      	b.n	800316e <ParseCSDescriptors+0x1a>
      desc_number = class_desc->MJPEGFrameNum; 
 8003204:	f890 30ca 	ldrb.w	r3, [r0, #202]	; 0xca
      if (desc_number < VIDEO_MAX_MJPEG_FRAME_D)
 8003208:	2b09      	cmp	r3, #9
 800320a:	d8b0      	bhi.n	800316e <ParseCSDescriptors+0x1a>
        class_desc->vs_desc.MJPEGFrame[desc_number] = (VIDEO_MJPEGFrameDescTypeDef*) pdesc;
 800320c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        USBH_DbgLog("MJPEG Frame detected: %d x %d", width, height);
 8003210:	481f      	ldr	r0, [pc, #124]	; (8003290 <ParseCSDescriptors+0x13c>)
        class_desc->vs_desc.MJPEGFrame[desc_number] = (VIDEO_MJPEGFrameDescTypeDef*) pdesc;
 8003212:	665a      	str	r2, [r3, #100]	; 0x64
        uint16_t width = LE16(class_desc->vs_desc.MJPEGFrame[desc_number]->wWidth);
 8003214:	f8b2 5005 	ldrh.w	r5, [r2, #5]
        uint16_t height = LE16(class_desc->vs_desc.MJPEGFrame[desc_number]->wHeight);
 8003218:	f8b2 6007 	ldrh.w	r6, [r2, #7]
        USBH_DbgLog("MJPEG Frame detected: %d x %d", width, height);
 800321c:	f004 faf0 	bl	8007800 <iprintf>
 8003220:	4629      	mov	r1, r5
 8003222:	481c      	ldr	r0, [pc, #112]	; (8003294 <ParseCSDescriptors+0x140>)
 8003224:	4632      	mov	r2, r6
 8003226:	f004 faeb 	bl	8007800 <iprintf>
 800322a:	200a      	movs	r0, #10
 800322c:	f004 fb00 	bl	8007830 <putchar>
        class_desc->MJPEGFrameNum++;
 8003230:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
 8003234:	3301      	adds	r3, #1
 8003236:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
 800323a:	e798      	b.n	800316e <ParseCSDescriptors+0x1a>
      if (class_desc->UncompFormatNum < VIDEO_MAX_UNCOMP_FORMAT)
 800323c:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 8003240:	2b02      	cmp	r3, #2
 8003242:	d894      	bhi.n	800316e <ParseCSDescriptors+0x1a>
        class_desc->vs_desc.UncompFormat[class_desc->UncompFormatNum++] = (VIDEO_UncompFormatDescTypeDef*) pdesc; 
 8003244:	1c59      	adds	r1, r3, #1
 8003246:	eb00 0483 	add.w	r4, r0, r3, lsl #2
 800324a:	f880 10cb 	strb.w	r1, [r0, #203]	; 0xcb
 800324e:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
 8003252:	e78c      	b.n	800316e <ParseCSDescriptors+0x1a>
      desc_number = class_desc->UncompFrameNum; 
 8003254:	f890 30cc 	ldrb.w	r3, [r0, #204]	; 0xcc
      if (desc_number < VIDEO_MAX_UNCOMP_FRAME_D)
 8003258:	2b09      	cmp	r3, #9
 800325a:	d888      	bhi.n	800316e <ParseCSDescriptors+0x1a>
        class_desc->vs_desc.UncompFrame[desc_number] = (VIDEO_UncompFrameDescTypeDef*) pdesc;
 800325c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
        USBH_DbgLog("Uncompressed Frame detected: %d x %d", width, height);
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <ParseCSDescriptors+0x13c>)
        class_desc->vs_desc.UncompFrame[desc_number] = (VIDEO_UncompFrameDescTypeDef*) pdesc;
 8003262:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        uint16_t width = LE16(class_desc->vs_desc.UncompFrame[desc_number]->wWidth);
 8003266:	f8b2 5005 	ldrh.w	r5, [r2, #5]
        uint16_t height = LE16(class_desc->vs_desc.UncompFrame[desc_number]->wHeight);
 800326a:	f8b2 6007 	ldrh.w	r6, [r2, #7]
        USBH_DbgLog("Uncompressed Frame detected: %d x %d", width, height);
 800326e:	f004 fac7 	bl	8007800 <iprintf>
 8003272:	4629      	mov	r1, r5
 8003274:	4808      	ldr	r0, [pc, #32]	; (8003298 <ParseCSDescriptors+0x144>)
 8003276:	4632      	mov	r2, r6
 8003278:	f004 fac2 	bl	8007800 <iprintf>
 800327c:	200a      	movs	r0, #10
 800327e:	f004 fad7 	bl	8007830 <putchar>
        class_desc->UncompFrameNum++;
 8003282:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
 8003286:	3301      	adds	r3, #1
 8003288:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
 800328c:	e76f      	b.n	800316e <ParseCSDescriptors+0x1a>
 800328e:	bf00      	nop
 8003290:	08008a26 	.word	0x08008a26
 8003294:	08008a50 	.word	0x08008a50
 8003298:	08008a6e 	.word	0x08008a6e

0800329c <USBH_VIDEO_ParseCSDescriptors>:
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;  
 800329c:	f8d0 373c 	ldr.w	r3, [r0, #1852]	; 0x73c
{
 80032a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  VIDEO_Handle =  (VIDEO_HandleTypeDef *) phost->pActiveClass->pData;  
 80032a4:	69dc      	ldr	r4, [r3, #28]
  ptr = USB_LEN_CFG_DESC;
 80032a6:	f10d 0808 	add.w	r8, sp, #8
 80032aa:	2309      	movs	r3, #9
{
 80032ac:	4606      	mov	r6, r0
  pdesc   = (USBH_DescHeader_t *)(phost->device.CfgDesc_Raw);
 80032ae:	f100 071c 	add.w	r7, r0, #28
        ParseCSDescriptors(&VIDEO_Handle->class_desc,
 80032b2:	f04f 0a32 	mov.w	sl, #50	; 0x32
  ptr = USB_LEN_CFG_DESC;
 80032b6:	f828 3d02 	strh.w	r3, [r8, #-2]!
  VIDEO_Handle->class_desc.InputTerminalNum = 0;
 80032ba:	2300      	movs	r3, #0
        ParseCSDescriptors(&VIDEO_Handle->class_desc,
 80032bc:	3438      	adds	r4, #56	; 0x38
  VIDEO_Handle->class_desc.InputTerminalNum = 0;
 80032be:	f8a4 30c2 	strh.w	r3, [r4, #194]	; 0xc2
  int8_t                        itf_number = 0; 
 80032c2:	461d      	mov	r5, r3
  VIDEO_Handle->class_desc.OutputTerminalNum = 0;  
 80032c4:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
  int8_t                        itf_index = 0;
 80032c8:	4699      	mov	r9, r3
  VIDEO_Handle->class_desc.ASNum = 0;
 80032ca:	f8a4 30c0 	strh.w	r3, [r4, #192]	; 0xc0
  while(ptr < phost->device.CfgDesc.wTotalLength)
 80032ce:	f8b6 253a 	ldrh.w	r2, [r6, #1338]	; 0x53a
 80032d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d803      	bhi.n	80032e2 <USBH_VIDEO_ParseCSDescriptors+0x46>
}
 80032da:	2000      	movs	r0, #0
 80032dc:	b002      	add	sp, #8
 80032de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80032e2:	4638      	mov	r0, r7
 80032e4:	4641      	mov	r1, r8
 80032e6:	f000 fcfd 	bl	8003ce4 <USBH_GetNextDesc>
    switch (pdesc->bDescriptorType)
 80032ea:	7843      	ldrb	r3, [r0, #1]
    pdesc = USBH_GetNextDesc((uint8_t*) pdesc, &ptr);
 80032ec:	4607      	mov	r7, r0
    switch (pdesc->bDescriptorType)
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d00e      	beq.n	8003310 <USBH_VIDEO_ParseCSDescriptors+0x74>
 80032f2:	2b24      	cmp	r3, #36	; 0x24
 80032f4:	d1eb      	bne.n	80032ce <USBH_VIDEO_ParseCSDescriptors+0x32>
      if(itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80032f6:	f896 353c 	ldrb.w	r3, [r6, #1340]	; 0x53c
 80032fa:	429d      	cmp	r5, r3
 80032fc:	dce7      	bgt.n	80032ce <USBH_VIDEO_ParseCSDescriptors+0x32>
        ParseCSDescriptors(&VIDEO_Handle->class_desc,
 80032fe:	fb0a 6309 	mla	r3, sl, r9, r6
 8003302:	4602      	mov	r2, r0
 8003304:	4620      	mov	r0, r4
 8003306:	f893 1548 	ldrb.w	r1, [r3, #1352]	; 0x548
 800330a:	f7ff ff23 	bl	8003154 <ParseCSDescriptors>
 800330e:	e7de      	b.n	80032ce <USBH_VIDEO_ParseCSDescriptors+0x32>
      itf_number = *((uint8_t *)pdesc + 2);//bInterfaceNumber
 8003310:	7881      	ldrb	r1, [r0, #2]
      itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);     
 8003312:	78c2      	ldrb	r2, [r0, #3]
 8003314:	4630      	mov	r0, r6
      itf_number = *((uint8_t *)pdesc + 2);//bInterfaceNumber
 8003316:	b24d      	sxtb	r5, r1
      itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);     
 8003318:	f000 f968 	bl	80035ec <USBH_FindInterfaceIndex>
 800331c:	fa4f f980 	sxtb.w	r9, r0
      break;
 8003320:	e7d5      	b.n	80032ce <USBH_VIDEO_ParseCSDescriptors+0x32>
	...

08003324 <USBH_VIDEO_AnalyseFormatDescriptors>:

/*
 * Check if camera have needed Format descriptor (base for MJPEG/Uncompressed frames)
 */
void USBH_VIDEO_AnalyseFormatDescriptors(VIDEO_ClassSpecificDescTypedef *class_desc)
{
 8003324:	b538      	push	{r3, r4, r5, lr}
  USBH_VIDEO_Best_bFormatIndex = -1;
 8003326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800332a:	4d1c      	ldr	r5, [pc, #112]	; (800339c <USBH_VIDEO_AnalyseFormatDescriptors+0x78>)
{
 800332c:	4604      	mov	r4, r0
  USBH_VIDEO_Best_bFormatIndex = -1;
 800332e:	602b      	str	r3, [r5, #0]
  
  if (USBH_VIDEO_Target_Format == USBH_VIDEO_MJPEG)
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <USBH_VIDEO_AnalyseFormatDescriptors+0x7c>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	b9a3      	cbnz	r3, 8003360 <USBH_VIDEO_AnalyseFormatDescriptors+0x3c>
  {
    if (class_desc->MJPEGFormatNum != 1)
 8003336:	f890 30c9 	ldrb.w	r3, [r0, #201]	; 0xc9
 800333a:	2b01      	cmp	r3, #1
 800333c:	d00c      	beq.n	8003358 <USBH_VIDEO_AnalyseFormatDescriptors+0x34>
    {
      USBH_ErrLog("Not supported MJPEG descriptors number: %d", class_desc->MJPEGFormatNum);
 800333e:	4819      	ldr	r0, [pc, #100]	; (80033a4 <USBH_VIDEO_AnalyseFormatDescriptors+0x80>)
 8003340:	f004 fa5e 	bl	8007800 <iprintf>
 8003344:	f894 10c9 	ldrb.w	r1, [r4, #201]	; 0xc9
 8003348:	4817      	ldr	r0, [pc, #92]	; (80033a8 <USBH_VIDEO_AnalyseFormatDescriptors+0x84>)
  }
  else if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
  {
    if (class_desc->UncompFormatNum != 1)
    {
      USBH_ErrLog("Not supported UNCOMP descriptors number: %d", class_desc->UncompFormatNum);
 800334a:	f004 fa59 	bl	8007800 <iprintf>
      VIDEO_UncompFormatDescTypeDef* uncomp_format_desc;
      uncomp_format_desc = class_desc->vs_desc.UncompFormat[0];
      
      if (memcmp(&uncomp_format_desc->guidFormat, "YUY2", 4) != 0)
      {
        USBH_ErrLog("Not supported UNCOMP descriptor type");
 800334e:	200a      	movs	r0, #10
        // Found!
        USBH_VIDEO_Best_bFormatIndex = uncomp_format_desc->bFormatIndex;
      }
    }
  }
}
 8003350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBH_ErrLog("Not supported UNCOMP descriptor type");
 8003354:	f004 ba6c 	b.w	8007830 <putchar>
      USBH_VIDEO_Best_bFormatIndex = mjpeg_format_desc->bFormatIndex;
 8003358:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800335a:	78db      	ldrb	r3, [r3, #3]
        USBH_VIDEO_Best_bFormatIndex = uncomp_format_desc->bFormatIndex;
 800335c:	602b      	str	r3, [r5, #0]
 800335e:	bd38      	pop	{r3, r4, r5, pc}
  else if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 8003360:	2b01      	cmp	r3, #1
 8003362:	d1fc      	bne.n	800335e <USBH_VIDEO_AnalyseFormatDescriptors+0x3a>
    if (class_desc->UncompFormatNum != 1)
 8003364:	f890 30cb 	ldrb.w	r3, [r0, #203]	; 0xcb
 8003368:	2b01      	cmp	r3, #1
 800336a:	d006      	beq.n	800337a <USBH_VIDEO_AnalyseFormatDescriptors+0x56>
      USBH_ErrLog("Not supported UNCOMP descriptors number: %d", class_desc->UncompFormatNum);
 800336c:	480d      	ldr	r0, [pc, #52]	; (80033a4 <USBH_VIDEO_AnalyseFormatDescriptors+0x80>)
 800336e:	f004 fa47 	bl	8007800 <iprintf>
 8003372:	f894 10cb 	ldrb.w	r1, [r4, #203]	; 0xcb
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <USBH_VIDEO_AnalyseFormatDescriptors+0x88>)
 8003378:	e7e7      	b.n	800334a <USBH_VIDEO_AnalyseFormatDescriptors+0x26>
      uncomp_format_desc = class_desc->vs_desc.UncompFormat[0];
 800337a:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
      if (memcmp(&uncomp_format_desc->guidFormat, "YUY2", 4) != 0)
 800337e:	2204      	movs	r2, #4
 8003380:	490b      	ldr	r1, [pc, #44]	; (80033b0 <USBH_VIDEO_AnalyseFormatDescriptors+0x8c>)
 8003382:	1d60      	adds	r0, r4, #5
 8003384:	f004 f96e 	bl	8007664 <memcmp>
 8003388:	b130      	cbz	r0, 8003398 <USBH_VIDEO_AnalyseFormatDescriptors+0x74>
        USBH_ErrLog("Not supported UNCOMP descriptor type");
 800338a:	4806      	ldr	r0, [pc, #24]	; (80033a4 <USBH_VIDEO_AnalyseFormatDescriptors+0x80>)
 800338c:	f004 fa38 	bl	8007800 <iprintf>
 8003390:	4808      	ldr	r0, [pc, #32]	; (80033b4 <USBH_VIDEO_AnalyseFormatDescriptors+0x90>)
 8003392:	f004 fa35 	bl	8007800 <iprintf>
 8003396:	e7da      	b.n	800334e <USBH_VIDEO_AnalyseFormatDescriptors+0x2a>
        USBH_VIDEO_Best_bFormatIndex = uncomp_format_desc->bFormatIndex;
 8003398:	78e3      	ldrb	r3, [r4, #3]
 800339a:	e7df      	b.n	800335c <USBH_VIDEO_AnalyseFormatDescriptors+0x38>
 800339c:	20000028 	.word	0x20000028
 80033a0:	20000030 	.word	0x20000030
 80033a4:	080089d0 	.word	0x080089d0
 80033a8:	08008a93 	.word	0x08008a93
 80033ac:	08008abe 	.word	0x08008abe
 80033b0:	08008aea 	.word	0x08008aea
 80033b4:	08008aef 	.word	0x08008aef

080033b8 <USBH_VIDEO_AnalyseFrameDescriptors>:
/*
 * Check if camera have needed Frame descriptor (whith target image width)
 */
void USBH_VIDEO_AnalyseFrameDescriptors(VIDEO_ClassSpecificDescTypedef *class_desc)
{
  USBH_VIDEO_Best_bFrameIndex = -1;
 80033b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033bc:	491d      	ldr	r1, [pc, #116]	; (8003434 <USBH_VIDEO_AnalyseFrameDescriptors+0x7c>)
{
 80033be:	b5f0      	push	{r4, r5, r6, r7, lr}
  USBH_VIDEO_Best_bFrameIndex = -1;
 80033c0:	600b      	str	r3, [r1, #0]
    
  if (USBH_VIDEO_Target_Format == USBH_VIDEO_MJPEG)
 80033c2:	4b1d      	ldr	r3, [pc, #116]	; (8003438 <USBH_VIDEO_AnalyseFrameDescriptors+0x80>)
 80033c4:	781b      	ldrb	r3, [r3, #0]
 80033c6:	b9c3      	cbnz	r3, 80033fa <USBH_VIDEO_AnalyseFrameDescriptors+0x42>
  {
    for (uint8_t i = 0; i < class_desc->MJPEGFrameNum; i++)
    {
      VIDEO_MJPEGFrameDescTypeDef* mjpeg_frame_desc;
      mjpeg_frame_desc = class_desc->vs_desc.MJPEGFrame[i];
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 80033c8:	4a1c      	ldr	r2, [pc, #112]	; (800343c <USBH_VIDEO_AnalyseFrameDescriptors+0x84>)
 80033ca:	3064      	adds	r0, #100	; 0x64
    for (uint8_t i = 0; i < class_desc->MJPEGFrameNum; i++)
 80033cc:	f890 4066 	ldrb.w	r4, [r0, #102]	; 0x66
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 80033d0:	6815      	ldr	r5, [r2, #0]
        (LE16(mjpeg_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 80033d2:	4a1b      	ldr	r2, [pc, #108]	; (8003440 <USBH_VIDEO_AnalyseFrameDescriptors+0x88>)
 80033d4:	6816      	ldr	r6, [r2, #0]
    for (uint8_t i = 0; i < class_desc->MJPEGFrameNum; i++)
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4294      	cmp	r4, r2
 80033da:	d800      	bhi.n	80033de <USBH_VIDEO_AnalyseFrameDescriptors+0x26>
 80033dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      mjpeg_frame_desc = class_desc->vs_desc.MJPEGFrame[i];
 80033de:	f850 2b04 	ldr.w	r2, [r0], #4
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 80033e2:	f8b2 7005 	ldrh.w	r7, [r2, #5]
 80033e6:	42af      	cmp	r7, r5
 80033e8:	d105      	bne.n	80033f6 <USBH_VIDEO_AnalyseFrameDescriptors+0x3e>
        (LE16(mjpeg_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 80033ea:	f8b2 7007 	ldrh.w	r7, [r2, #7]
      if ((LE16(mjpeg_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 80033ee:	42b7      	cmp	r7, r6
      {
        //Found!
        USBH_VIDEO_Best_bFrameIndex = mjpeg_frame_desc->bFrameIndex;
 80033f0:	bf04      	itt	eq
 80033f2:	78d2      	ldrbeq	r2, [r2, #3]
 80033f4:	600a      	streq	r2, [r1, #0]
 80033f6:	3301      	adds	r3, #1
 80033f8:	e7ed      	b.n	80033d6 <USBH_VIDEO_AnalyseFrameDescriptors+0x1e>
      }
    }
  }
  else if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d10a      	bne.n	8003414 <USBH_VIDEO_AnalyseFrameDescriptors+0x5c>
  {
    for (uint8_t i = 0; i < class_desc->UncompFrameNum; i++)
    {
      VIDEO_UncompFrameDescTypeDef* uncomp_frame_desc;
      uncomp_frame_desc = class_desc->vs_desc.UncompFrame[i];
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 80033fe:	4b0f      	ldr	r3, [pc, #60]	; (800343c <USBH_VIDEO_AnalyseFrameDescriptors+0x84>)
 8003400:	3098      	adds	r0, #152	; 0x98
    for (uint8_t i = 0; i < class_desc->UncompFrameNum; i++)
 8003402:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8003406:	681d      	ldr	r5, [r3, #0]
        (LE16(uncomp_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 8003408:	4b0d      	ldr	r3, [pc, #52]	; (8003440 <USBH_VIDEO_AnalyseFrameDescriptors+0x88>)
 800340a:	681e      	ldr	r6, [r3, #0]
 800340c:	2300      	movs	r3, #0
    for (uint8_t i = 0; i < class_desc->UncompFrameNum; i++)
 800340e:	b2da      	uxtb	r2, r3
 8003410:	42a2      	cmp	r2, r4
 8003412:	d300      	bcc.n	8003416 <USBH_VIDEO_AnalyseFrameDescriptors+0x5e>
 8003414:	bdf0      	pop	{r4, r5, r6, r7, pc}
      uncomp_frame_desc = class_desc->vs_desc.UncompFrame[i];
 8003416:	f850 2b04 	ldr.w	r2, [r0], #4
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 800341a:	f8b2 7005 	ldrh.w	r7, [r2, #5]
 800341e:	42af      	cmp	r7, r5
 8003420:	d105      	bne.n	800342e <USBH_VIDEO_AnalyseFrameDescriptors+0x76>
        (LE16(uncomp_frame_desc->wHeight) == USBH_VIDEO_Target_Height))
 8003422:	f8b2 7007 	ldrh.w	r7, [r2, #7]
      if ((LE16(uncomp_frame_desc->wWidth) == USBH_VIDEO_Target_Width) && \
 8003426:	42b7      	cmp	r7, r6
      {
        //Found!
        USBH_VIDEO_Best_bFrameIndex = uncomp_frame_desc->bFrameIndex;
 8003428:	bf04      	itt	eq
 800342a:	78d2      	ldrbeq	r2, [r2, #3]
 800342c:	600a      	streq	r2, [r1, #0]
 800342e:	3301      	adds	r3, #1
 8003430:	e7ed      	b.n	800340e <USBH_VIDEO_AnalyseFrameDescriptors+0x56>
 8003432:	bf00      	nop
 8003434:	2000002c 	.word	0x2000002c
 8003438:	20000030 	.word	0x20000030
 800343c:	20000038 	.word	0x20000038
 8003440:	20000034 	.word	0x20000034

08003444 <video_stream_init_buffers>:
  uvc_curr_frame_length+= data_size;
}

void video_stream_init_buffers(uint8_t* buffer0, uint8_t* buffer1)
{
  if ((buffer0 == NULL) || (buffer1 == NULL))
 8003444:	b178      	cbz	r0, 8003466 <video_stream_init_buffers+0x22>
 8003446:	b171      	cbz	r1, 8003466 <video_stream_init_buffers+0x22>
    return;
  
  uvc_framebuffer0_ptr = buffer0;
 8003448:	4b07      	ldr	r3, [pc, #28]	; (8003468 <video_stream_init_buffers+0x24>)
  uvc_framebuffer1_ptr = buffer1;
  uvc_curr_framebuffer_ptr = uvc_framebuffer0_ptr;
  uvc_ready_framebuffer_ptr = uvc_framebuffer1_ptr;
  uvc_parsing_initialized = 1;
 800344a:	4a08      	ldr	r2, [pc, #32]	; (800346c <video_stream_init_buffers+0x28>)
  uvc_framebuffer0_ptr = buffer0;
 800344c:	6018      	str	r0, [r3, #0]
  uvc_framebuffer1_ptr = buffer1;
 800344e:	4b08      	ldr	r3, [pc, #32]	; (8003470 <video_stream_init_buffers+0x2c>)
 8003450:	6019      	str	r1, [r3, #0]
  uvc_curr_framebuffer_ptr = uvc_framebuffer0_ptr;
 8003452:	4b08      	ldr	r3, [pc, #32]	; (8003474 <video_stream_init_buffers+0x30>)
 8003454:	6018      	str	r0, [r3, #0]
  uvc_ready_framebuffer_ptr = uvc_framebuffer1_ptr;
 8003456:	4b08      	ldr	r3, [pc, #32]	; (8003478 <video_stream_init_buffers+0x34>)
 8003458:	6019      	str	r1, [r3, #0]
  uvc_parsing_initialized = 1;
 800345a:	2301      	movs	r3, #1
 800345c:	7013      	strb	r3, [r2, #0]
  uvc_parsing_enabled = 1;
 800345e:	4a07      	ldr	r2, [pc, #28]	; (800347c <video_stream_init_buffers+0x38>)
 8003460:	7013      	strb	r3, [r2, #0]
  uvc_parsing_switch_ready = 1;
 8003462:	4a07      	ldr	r2, [pc, #28]	; (8003480 <video_stream_init_buffers+0x3c>)
 8003464:	7013      	strb	r3, [r2, #0]
 8003466:	4770      	bx	lr
 8003468:	20000294 	.word	0x20000294
 800346c:	2000029c 	.word	0x2000029c
 8003470:	20000298 	.word	0x20000298
 8003474:	20000290 	.word	0x20000290
 8003478:	200002a4 	.word	0x200002a4
 800347c:	2000003c 	.word	0x2000003c
 8003480:	2000003d 	.word	0x2000003d

08003484 <video_stream_ready_update>:

// External software call this function after using all data from "uvc_ready_framebuffer_ptr"
void video_stream_ready_update(void)
{
  //"Ready" framebuffer is not used by exteranal software now
  uvc_parsing_switch_ready = 1;
 8003484:	2201      	movs	r2, #1
 8003486:	4b01      	ldr	r3, [pc, #4]	; (800348c <video_stream_ready_update+0x8>)
 8003488:	701a      	strb	r2, [r3, #0]
 800348a:	4770      	bx	lr
 800348c:	2000003d 	.word	0x2000003d

08003490 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8003490:	f200 7344 	addw	r3, r0, #1860	; 0x744
 8003494:	f500 62f0 	add.w	r2, r0, #1920	; 0x780
  uint32_t i = 0U;

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
  {
    phost->Pipes[i] = 0U;
 8003498:	2100      	movs	r1, #0
 800349a:	f843 1b04 	str.w	r1, [r3], #4
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d1fb      	bne.n	800349a <DeInitStateMachine+0xa>
 80034a2:	f500 728e 	add.w	r2, r0, #284	; 0x11c
 80034a6:	f200 511c 	addw	r1, r0, #1308	; 0x51c
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
  {
    phost->device.Data[i] = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	f802 3b01 	strb.w	r3, [r2], #1
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80034b0:	4291      	cmp	r1, r2
 80034b2:	d1fb      	bne.n	80034ac <DeInitStateMachine+0x1c>
  }

  phost->gState = HOST_IDLE;
  phost->EnumState = ENUM_IDLE;
  phost->RequestState = CMD_SEND;
 80034b4:	2201      	movs	r2, #1
  phost->Timer = 0U;

  phost->Control.state = CTRL_SETUP;
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80034b6:	2140      	movs	r1, #64	; 0x40
  phost->gState = HOST_IDLE;
 80034b8:	7003      	strb	r3, [r0, #0]
  phost->EnumState = ENUM_IDLE;
 80034ba:	7043      	strb	r3, [r0, #1]
  phost->RequestState = CMD_SEND;
 80034bc:	7082      	strb	r2, [r0, #2]
  phost->Timer = 0U;
 80034be:	f8c0 3784 	str.w	r3, [r0, #1924]	; 0x784
  phost->Control.state = CTRL_SETUP;
 80034c2:	7602      	strb	r2, [r0, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80034c4:	7181      	strb	r1, [r0, #6]
  phost->Control.errorcount = 0U;
 80034c6:	7643      	strb	r3, [r0, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80034c8:	f880 351c 	strb.w	r3, [r0, #1308]	; 0x51c
  phost->device.speed = USBH_SPEED_FULL;
 80034cc:	f880 251d 	strb.w	r2, [r0, #1309]	; 0x51d
  phost->device.RstCnt = 0U;
 80034d0:	f880 351f 	strb.w	r3, [r0, #1311]	; 0x51f
  phost->device.EnumCnt = 0U;
 80034d4:	f880 351e 	strb.w	r3, [r0, #1310]	; 0x51e

  return USBH_OK;
}
 80034d8:	2000      	movs	r0, #0
 80034da:	4770      	bx	lr

080034dc <USBH_Init>:
{
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	460e      	mov	r6, r1
 80034e0:	b08c      	sub	sp, #48	; 0x30
  if (phost == NULL)
 80034e2:	4605      	mov	r5, r0
 80034e4:	b958      	cbnz	r0, 80034fe <USBH_Init+0x22>
    USBH_ErrLog("Invalid Host handle");
 80034e6:	481f      	ldr	r0, [pc, #124]	; (8003564 <USBH_Init+0x88>)
 80034e8:	f004 f98a 	bl	8007800 <iprintf>
 80034ec:	481e      	ldr	r0, [pc, #120]	; (8003568 <USBH_Init+0x8c>)
 80034ee:	f004 f987 	bl	8007800 <iprintf>
 80034f2:	200a      	movs	r0, #10
 80034f4:	f004 f99c 	bl	8007830 <putchar>
    return USBH_FAIL;
 80034f8:	2002      	movs	r0, #2
}
 80034fa:	b00c      	add	sp, #48	; 0x30
 80034fc:	bd70      	pop	{r4, r5, r6, pc}
  phost->pActiveClass = NULL;
 80034fe:	2400      	movs	r4, #0
  phost->id = id;
 8003500:	f880 278c 	strb.w	r2, [r0, #1932]	; 0x78c
  phost->pActiveClass = NULL;
 8003504:	f8c0 473c 	str.w	r4, [r0, #1852]	; 0x73c
  phost->ClassNumber = 0U;
 8003508:	f8c0 4740 	str.w	r4, [r0, #1856]	; 0x740
  DeInitStateMachine(phost);
 800350c:	f7ff ffc0 	bl	8003490 <DeInitStateMachine>
  phost->device.is_connected = 0U;
 8003510:	f885 4520 	strb.w	r4, [r5, #1312]	; 0x520
  phost->device.PortEnabled = 0U;
 8003514:	f885 4523 	strb.w	r4, [r5, #1315]	; 0x523
  phost->device.is_disconnected = 0U;
 8003518:	f885 4521 	strb.w	r4, [r5, #1313]	; 0x521
  phost->device.is_ReEnumerated = 0U;
 800351c:	f885 4522 	strb.w	r4, [r5, #1314]	; 0x522
  if (pUsrFunc != NULL)
 8003520:	b10e      	cbz	r6, 8003526 <USBH_Init+0x4a>
    phost->pUser = pUsrFunc;
 8003522:	f8c5 6794 	str.w	r6, [r5, #1940]	; 0x794
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8003526:	4c11      	ldr	r4, [pc, #68]	; (800356c <USBH_Init+0x90>)
 8003528:	ae01      	add	r6, sp, #4
 800352a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800352e:	3410      	adds	r4, #16
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 8003530:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 8003534:	2100      	movs	r1, #0
 8003536:	4630      	mov	r0, r6
 8003538:	f000 fef1 	bl	800431e <osMessageCreate>
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800353c:	ae05      	add	r6, sp, #20
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800353e:	f8c5 0798 	str.w	r0, [r5, #1944]	; 0x798
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 8003542:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003544:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8003546:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800354a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800354e:	4629      	mov	r1, r5
 8003550:	a805      	add	r0, sp, #20
 8003552:	f000 feb4 	bl	80042be <osThreadCreate>
 8003556:	f8c5 079c 	str.w	r0, [r5, #1948]	; 0x79c
  USBH_LL_Init(phost);
 800355a:	4628      	mov	r0, r5
 800355c:	f003 ff4c 	bl	80073f8 <USBH_LL_Init>
  return USBH_OK;
 8003560:	2000      	movs	r0, #0
 8003562:	e7ca      	b.n	80034fa <USBH_Init+0x1e>
 8003564:	080089d0 	.word	0x080089d0
 8003568:	08008b14 	.word	0x08008b14
 800356c:	08008988 	.word	0x08008988

08003570 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8003570:	b508      	push	{r3, lr}
  USBH_StatusTypeDef status = USBH_OK;

  if (pclass != NULL)
 8003572:	b1a1      	cbz	r1, 800359e <USBH_RegisterClass+0x2e>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8003574:	f8d0 3740 	ldr.w	r3, [r0, #1856]	; 0x740
 8003578:	b933      	cbnz	r3, 8003588 <USBH_RegisterClass+0x18>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800357a:	2201      	movs	r2, #1
 800357c:	f8c0 1738 	str.w	r1, [r0, #1848]	; 0x738
 8003580:	f8c0 2740 	str.w	r2, [r0, #1856]	; 0x740
      status = USBH_OK;
 8003584:	4618      	mov	r0, r3
 8003586:	bd08      	pop	{r3, pc}
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
 8003588:	4807      	ldr	r0, [pc, #28]	; (80035a8 <USBH_RegisterClass+0x38>)
 800358a:	f004 f939 	bl	8007800 <iprintf>
 800358e:	4807      	ldr	r0, [pc, #28]	; (80035ac <USBH_RegisterClass+0x3c>)
      status = USBH_FAIL;
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
 8003590:	f004 f936 	bl	8007800 <iprintf>
 8003594:	200a      	movs	r0, #10
 8003596:	f004 f94b 	bl	8007830 <putchar>
    status = USBH_FAIL;
 800359a:	2002      	movs	r0, #2
  }

  return status;
}
 800359c:	bd08      	pop	{r3, pc}
    USBH_ErrLog("Invalid Class handle");
 800359e:	4802      	ldr	r0, [pc, #8]	; (80035a8 <USBH_RegisterClass+0x38>)
 80035a0:	f004 f92e 	bl	8007800 <iprintf>
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <USBH_RegisterClass+0x40>)
 80035a6:	e7f3      	b.n	8003590 <USBH_RegisterClass+0x20>
 80035a8:	080089d0 	.word	0x080089d0
 80035ac:	08008e6c 	.word	0x08008e6c
 80035b0:	08008e85 	.word	0x08008e85

080035b4 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80035b4:	b570      	push	{r4, r5, r6, lr}
 80035b6:	2400      	movs	r4, #0
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80035b8:	f890 6547 	ldrb.w	r6, [r0, #1351]	; 0x547
 80035bc:	b2e5      	uxtb	r5, r4
 80035be:	428e      	cmp	r6, r1
 80035c0:	d001      	beq.n	80035c6 <USBH_FindInterface+0x12>
 80035c2:	29ff      	cmp	r1, #255	; 0xff
 80035c4:	d10b      	bne.n	80035de <USBH_FindInterface+0x2a>
 80035c6:	f890 6548 	ldrb.w	r6, [r0, #1352]	; 0x548
 80035ca:	4296      	cmp	r6, r2
 80035cc:	d001      	beq.n	80035d2 <USBH_FindInterface+0x1e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80035ce:	2aff      	cmp	r2, #255	; 0xff
 80035d0:	d105      	bne.n	80035de <USBH_FindInterface+0x2a>
 80035d2:	f890 6549 	ldrb.w	r6, [r0, #1353]	; 0x549
 80035d6:	429e      	cmp	r6, r3
 80035d8:	d006      	beq.n	80035e8 <USBH_FindInterface+0x34>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80035da:	2bff      	cmp	r3, #255	; 0xff
 80035dc:	d004      	beq.n	80035e8 <USBH_FindInterface+0x34>
 80035de:	3401      	adds	r4, #1
 80035e0:	3032      	adds	r0, #50	; 0x32
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80035e2:	2c0a      	cmp	r4, #10
 80035e4:	d1e8      	bne.n	80035b8 <USBH_FindInterface+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 80035e6:	25ff      	movs	r5, #255	; 0xff
}
 80035e8:	4628      	mov	r0, r5
 80035ea:	bd70      	pop	{r4, r5, r6, pc}

080035ec <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 80035ec:	2300      	movs	r3, #0
 80035ee:	b530      	push	{r4, r5, lr}
  pcfg = &phost->device.CfgDesc;

  while (if_ix < USBH_MAX_NUM_INTERFACES)
  {
    pif = &pcfg->Itf_Desc[if_ix];
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 80035f0:	f890 5544 	ldrb.w	r5, [r0, #1348]	; 0x544
 80035f4:	b2dc      	uxtb	r4, r3
 80035f6:	428d      	cmp	r5, r1
 80035f8:	d103      	bne.n	8003602 <USBH_FindInterfaceIndex+0x16>
 80035fa:	f890 5545 	ldrb.w	r5, [r0, #1349]	; 0x545
 80035fe:	4295      	cmp	r5, r2
 8003600:	d004      	beq.n	800360c <USBH_FindInterfaceIndex+0x20>
 8003602:	3301      	adds	r3, #1
 8003604:	3032      	adds	r0, #50	; 0x32
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8003606:	2b0a      	cmp	r3, #10
 8003608:	d1f2      	bne.n	80035f0 <USBH_FindInterfaceIndex+0x4>
    {
      return  if_ix;
    }
    if_ix++;
  }
  return 0xFFU;
 800360a:	24ff      	movs	r4, #255	; 0xff
}
 800360c:	4620      	mov	r0, r4
 800360e:	bd30      	pop	{r4, r5, pc}

08003610 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8003610:	b510      	push	{r4, lr}
 8003612:	4604      	mov	r4, r0
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8003614:	f003 ff18 	bl	8007448 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8003618:	2101      	movs	r1, #1
 800361a:	4620      	mov	r0, r4
 800361c:	f003 ff90 	bl	8007540 <USBH_LL_DriverVBUS>

  return USBH_OK;
}
 8003620:	2000      	movs	r0, #0
 8003622:	bd10      	pop	{r4, pc}

08003624 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8003624:	b570      	push	{r4, r5, r6, lr}
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8003626:	2302      	movs	r3, #2
{
 8003628:	b086      	sub	sp, #24
 800362a:	4604      	mov	r4, r0
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800362c:	f88d 3017 	strb.w	r3, [sp, #23]
  uint8_t idx = 0U;

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8003630:	f890 3521 	ldrb.w	r3, [r0, #1313]	; 0x521
 8003634:	2b01      	cmp	r3, #1
 8003636:	d101      	bne.n	800363c <USBH_Process+0x18>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8003638:	2303      	movs	r3, #3
 800363a:	7003      	strb	r3, [r0, #0]
  }

  switch (phost->gState)
 800363c:	7823      	ldrb	r3, [r4, #0]
 800363e:	2b0b      	cmp	r3, #11
 8003640:	f200 829a 	bhi.w	8003b78 <USBH_Process+0x554>
 8003644:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003648:	002c000c 	.word	0x002c000c
 800364c:	029b005b 	.word	0x029b005b
 8003650:	00910298 	.word	0x00910298
 8003654:	020d0273 	.word	0x020d0273
 8003658:	02270216 	.word	0x02270216
 800365c:	0292023a 	.word	0x0292023a
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8003660:	f894 3520 	ldrb.w	r3, [r4, #1312]	; 0x520
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 8287 	beq.w	8003b78 <USBH_Process+0x554>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800366a:	2501      	movs	r5, #1
        USBH_UsrLog("USB Device Connected");
 800366c:	48b9      	ldr	r0, [pc, #740]	; (8003954 <USBH_Process+0x330>)
 800366e:	f004 f8c7 	bl	8007800 <iprintf>
 8003672:	200a      	movs	r0, #10
 8003674:	f004 f8dc 	bl	8007830 <putchar>
        USBH_Delay(200U);
 8003678:	20c8      	movs	r0, #200	; 0xc8
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800367a:	7025      	strb	r5, [r4, #0]
        USBH_Delay(200U);
 800367c:	f003 ff75 	bl	800756a <USBH_Delay>
        USBH_LL_ResetPort(phost);
 8003680:	4620      	mov	r0, r4
 8003682:	f003 ff0b 	bl	800749c <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8003686:	2200      	movs	r2, #0
        phost->Timeout = 0U;

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003688:	4629      	mov	r1, r5
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800368a:	f8c4 57a0 	str.w	r5, [r4, #1952]	; 0x7a0
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800368e:	f884 251c 	strb.w	r2, [r4, #1308]	; 0x51c
        phost->Timeout = 0U;
 8003692:	f8c4 2788 	str.w	r2, [r4, #1928]	; 0x788
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003696:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
 800369a:	f000 fe55 	bl	8004348 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800369e:	e26b      	b.n	8003b78 <USBH_Process+0x554>
      if (phost->device.PortEnabled == 1U)
 80036a0:	f894 3523 	ldrb.w	r3, [r4, #1315]	; 0x523
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d10c      	bne.n	80036c2 <USBH_Process+0x9e>
        USBH_UsrLog("USB Device Reset Completed");
 80036a8:	48ab      	ldr	r0, [pc, #684]	; (8003958 <USBH_Process+0x334>)
 80036aa:	f004 f8a9 	bl	8007800 <iprintf>
 80036ae:	200a      	movs	r0, #10
 80036b0:	f004 f8be 	bl	8007830 <putchar>
        phost->device.RstCnt = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	f884 351f 	strb.w	r3, [r4, #1311]	; 0x51f
        phost->gState = HOST_DEV_ATTACHED;
 80036ba:	2302      	movs	r3, #2
            phost->gState = HOST_ABORT_STATE;
 80036bc:	7023      	strb	r3, [r4, #0]
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 80036be:	2101      	movs	r1, #1
 80036c0:	e1cb      	b.n	8003a5a <USBH_Process+0x436>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80036c2:	f8d4 3788 	ldr.w	r3, [r4, #1928]	; 0x788
 80036c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036ca:	d911      	bls.n	80036f0 <USBH_Process+0xcc>
          phost->device.RstCnt++;
 80036cc:	f894 351f 	ldrb.w	r3, [r4, #1311]	; 0x51f
 80036d0:	3301      	adds	r3, #1
 80036d2:	b2db      	uxtb	r3, r3
          if (phost->device.RstCnt > 3U)
 80036d4:	2b03      	cmp	r3, #3
          phost->device.RstCnt++;
 80036d6:	f884 351f 	strb.w	r3, [r4, #1311]	; 0x51f
          if (phost->device.RstCnt > 3U)
 80036da:	d907      	bls.n	80036ec <USBH_Process+0xc8>
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
 80036dc:	489f      	ldr	r0, [pc, #636]	; (800395c <USBH_Process+0x338>)
 80036de:	f004 f88f 	bl	8007800 <iprintf>
 80036e2:	200a      	movs	r0, #10
 80036e4:	f004 f8a4 	bl	8007830 <putchar>
            phost->gState = HOST_ABORT_STATE;
 80036e8:	230d      	movs	r3, #13
 80036ea:	e7e7      	b.n	80036bc <USBH_Process+0x98>
            phost->gState = HOST_IDLE;
 80036ec:	2300      	movs	r3, #0
 80036ee:	e7e5      	b.n	80036bc <USBH_Process+0x98>
          phost->Timeout += 10U;
 80036f0:	330a      	adds	r3, #10
          USBH_Delay(10U);
 80036f2:	200a      	movs	r0, #10
          phost->Timeout += 10U;
 80036f4:	f8c4 3788 	str.w	r3, [r4, #1928]	; 0x788
          USBH_Delay(10U);
 80036f8:	f003 ff37 	bl	800756a <USBH_Delay>
 80036fc:	e7df      	b.n	80036be <USBH_Process+0x9a>
      if (phost->pUser != NULL)
 80036fe:	f8d4 3794 	ldr.w	r3, [r4, #1940]	; 0x794
 8003702:	b113      	cbz	r3, 800370a <USBH_Process+0xe6>
        phost->pUser(phost, HOST_USER_CONNECTION);
 8003704:	2104      	movs	r1, #4
 8003706:	4620      	mov	r0, r4
 8003708:	4798      	blx	r3
      USBH_Delay(100U);
 800370a:	2064      	movs	r0, #100	; 0x64
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800370c:	2500      	movs	r5, #0
      USBH_Delay(100U);
 800370e:	f003 ff2c 	bl	800756a <USBH_Delay>
      phost->device.speed = USBH_LL_GetSpeed(phost);
 8003712:	4620      	mov	r0, r4
 8003714:	f003 feb4 	bl	8007480 <USBH_LL_GetSpeed>
      phost->gState = HOST_ENUMERATION;
 8003718:	2305      	movs	r3, #5
      phost->device.speed = USBH_LL_GetSpeed(phost);
 800371a:	f884 051d 	strb.w	r0, [r4, #1309]	; 0x51d
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800371e:	2100      	movs	r1, #0
      phost->gState = HOST_ENUMERATION;
 8003720:	7023      	strb	r3, [r4, #0]
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8003722:	4620      	mov	r0, r4
 8003724:	f000 fd82 	bl	800422c <USBH_AllocPipe>
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8003728:	2180      	movs	r1, #128	; 0x80
      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800372a:	7160      	strb	r0, [r4, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800372c:	4620      	mov	r0, r4
 800372e:	f000 fd7d 	bl	800422c <USBH_AllocPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8003732:	79a2      	ldrb	r2, [r4, #6]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8003734:	4601      	mov	r1, r0
 8003736:	7120      	strb	r0, [r4, #4]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8003738:	9202      	str	r2, [sp, #8]
 800373a:	4620      	mov	r0, r4
 800373c:	f894 251d 	ldrb.w	r2, [r4, #1309]	; 0x51d
 8003740:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
 8003744:	9200      	str	r2, [sp, #0]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	9501      	str	r5, [sp, #4]
 800374a:	f000 fd5b 	bl	8004204 <USBH_OpenPipe>
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800374e:	79a2      	ldrb	r2, [r4, #6]
 8003750:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
 8003754:	4620      	mov	r0, r4
 8003756:	9202      	str	r2, [sp, #8]
 8003758:	f894 251d 	ldrb.w	r2, [r4, #1309]	; 0x51d
 800375c:	7961      	ldrb	r1, [r4, #5]
 800375e:	9200      	str	r2, [sp, #0]
 8003760:	462a      	mov	r2, r5
 8003762:	9501      	str	r5, [sp, #4]
 8003764:	f000 fd4e 	bl	8004204 <USBH_OpenPipe>
 8003768:	e7a9      	b.n	80036be <USBH_Process+0x9a>
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
  USBH_StatusTypeDef Status = USBH_BUSY;
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;

  switch (phost->EnumState)
 800376a:	7863      	ldrb	r3, [r4, #1]
 800376c:	2b07      	cmp	r3, #7
 800376e:	d84e      	bhi.n	800380e <USBH_Process+0x1ea>
 8003770:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003774:	00730008 	.word	0x00730008
 8003778:	00d800a9 	.word	0x00d800a9
 800377c:	010c00df 	.word	0x010c00df
 8003780:	01510131 	.word	0x01510131
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8003784:	2108      	movs	r1, #8
 8003786:	4620      	mov	r0, r4
 8003788:	f000 fbcf 	bl	8003f2a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 800378c:	4606      	mov	r6, r0
 800378e:	2800      	cmp	r0, #0
 8003790:	d13b      	bne.n	800380a <USBH_Process+0x1e6>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8003792:	f894 252d 	ldrb.w	r2, [r4, #1325]	; 0x52d

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8003796:	2501      	movs	r5, #1

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8003798:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
 800379c:	7921      	ldrb	r1, [r4, #4]
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800379e:	71a2      	strb	r2, [r4, #6]
        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80037a0:	7065      	strb	r5, [r4, #1]
        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80037a2:	9202      	str	r2, [sp, #8]
 80037a4:	4620      	mov	r0, r4
 80037a6:	f894 251d 	ldrb.w	r2, [r4, #1309]	; 0x51d
 80037aa:	9601      	str	r6, [sp, #4]
 80037ac:	9200      	str	r2, [sp, #0]
 80037ae:	2280      	movs	r2, #128	; 0x80
 80037b0:	f000 fd28 	bl	8004204 <USBH_OpenPipe>
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80037b4:	79a2      	ldrb	r2, [r4, #6]
 80037b6:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
 80037ba:	4620      	mov	r0, r4
 80037bc:	9202      	str	r2, [sp, #8]
 80037be:	f894 251d 	ldrb.w	r2, [r4, #1309]	; 0x51d
 80037c2:	7961      	ldrb	r1, [r4, #5]
 80037c4:	9200      	str	r2, [sp, #0]
 80037c6:	4632      	mov	r2, r6
 80037c8:	9601      	str	r6, [sp, #4]
 80037ca:	f000 fd1b 	bl	8004204 <USBH_OpenPipe>
      status = USBH_HandleEnum(phost);
 80037ce:	f88d 5017 	strb.w	r5, [sp, #23]
      if (status == USBH_OK)
 80037d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80037d6:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f040 81cc 	bne.w	8003b78 <USBH_Process+0x554>
        USBH_UsrLog("Enumeration done.");
 80037e0:	485f      	ldr	r0, [pc, #380]	; (8003960 <USBH_Process+0x33c>)
 80037e2:	f004 f80d 	bl	8007800 <iprintf>
 80037e6:	200a      	movs	r0, #10
 80037e8:	f004 f822 	bl	8007830 <putchar>
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80037ec:	f894 3537 	ldrb.w	r3, [r4, #1335]	; 0x537
        phost->device.current_interface = 0U;
 80037f0:	f884 5524 	strb.w	r5, [r4, #1316]	; 0x524
        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	f040 812d 	bne.w	8003a54 <USBH_Process+0x430>
          USBH_UsrLog("This device has only 1 configuration.");
 80037fa:	485a      	ldr	r0, [pc, #360]	; (8003964 <USBH_Process+0x340>)
 80037fc:	f004 f800 	bl	8007800 <iprintf>
 8003800:	200a      	movs	r0, #10
 8003802:	f004 f815 	bl	8007830 <putchar>
        phost->gState = HOST_SET_CONFIGURATION;
 8003806:	2308      	movs	r3, #8
 8003808:	e125      	b.n	8003a56 <USBH_Process+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800380a:	2803      	cmp	r0, #3
 800380c:	d001      	beq.n	8003812 <USBH_Process+0x1ee>
  USBH_StatusTypeDef Status = USBH_BUSY;
 800380e:	2501      	movs	r5, #1
 8003810:	e7dd      	b.n	80037ce <USBH_Process+0x1aa>
        USBH_ErrLog("Control error: Get Device Descriptor request failed");
 8003812:	4855      	ldr	r0, [pc, #340]	; (8003968 <USBH_Process+0x344>)
 8003814:	f003 fff4 	bl	8007800 <iprintf>
 8003818:	4854      	ldr	r0, [pc, #336]	; (800396c <USBH_Process+0x348>)
 800381a:	f003 fff1 	bl	8007800 <iprintf>
 800381e:	200a      	movs	r0, #10
 8003820:	f004 f806 	bl	8007830 <putchar>
        phost->device.EnumCnt++;
 8003824:	f894 351e 	ldrb.w	r3, [r4, #1310]	; 0x51e
 8003828:	3301      	adds	r3, #1
 800382a:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 800382c:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 800382e:	f884 351e 	strb.w	r3, [r4, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 8003832:	d907      	bls.n	8003844 <USBH_Process+0x220>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
        phost->device.EnumCnt++;
        if (phost->device.EnumCnt > 3U)
        {
          /* Buggy Device can't complete get device desc request */
          USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8003834:	484e      	ldr	r0, [pc, #312]	; (8003970 <USBH_Process+0x34c>)
 8003836:	f003 ffe3 	bl	8007800 <iprintf>
 800383a:	200a      	movs	r0, #10
 800383c:	f003 fff8 	bl	8007830 <putchar>
          phost->gState = HOST_ABORT_STATE;
 8003840:	230d      	movs	r3, #13
 8003842:	e008      	b.n	8003856 <USBH_Process+0x232>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8003844:	7961      	ldrb	r1, [r4, #5]
 8003846:	4620      	mov	r0, r4
 8003848:	f000 fd08 	bl	800425c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 800384c:	7921      	ldrb	r1, [r4, #4]
 800384e:	4620      	mov	r0, r4
 8003850:	f000 fd04 	bl	800425c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8003854:	2300      	movs	r3, #0
          USBH_FreePipe(phost, phost->Control.pipe_out);
          USBH_FreePipe(phost, phost->Control.pipe_in);

          /* Reset the USB Device */
          phost->EnumState = ENUM_IDLE;
          phost->gState = HOST_IDLE;
 8003856:	7023      	strb	r3, [r4, #0]
 8003858:	e7d9      	b.n	800380e <USBH_Process+0x1ea>
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800385a:	2112      	movs	r1, #18
 800385c:	4620      	mov	r0, r4
 800385e:	f000 fb64 	bl	8003f2a <USBH_Get_DevDesc>
      if (ReqStatus == USBH_OK)
 8003862:	b990      	cbnz	r0, 800388a <USBH_Process+0x266>
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
 8003864:	f8b4 1530 	ldrh.w	r1, [r4, #1328]	; 0x530
 8003868:	4842      	ldr	r0, [pc, #264]	; (8003974 <USBH_Process+0x350>)
 800386a:	f003 ffc9 	bl	8007800 <iprintf>
 800386e:	200a      	movs	r0, #10
 8003870:	f003 ffde 	bl	8007830 <putchar>
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);
 8003874:	f8b4 152e 	ldrh.w	r1, [r4, #1326]	; 0x52e
 8003878:	483f      	ldr	r0, [pc, #252]	; (8003978 <USBH_Process+0x354>)
 800387a:	f003 ffc1 	bl	8007800 <iprintf>
 800387e:	200a      	movs	r0, #10
 8003880:	f003 ffd6 	bl	8007830 <putchar>
        phost->EnumState = ENUM_SET_ADDR;
 8003884:	2302      	movs	r3, #2
                                        phost->device.Data, 0xFFU);
        if (ReqStatus == USBH_OK)
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003886:	7063      	strb	r3, [r4, #1]
 8003888:	e7c1      	b.n	800380e <USBH_Process+0x1ea>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800388a:	2803      	cmp	r0, #3
 800388c:	d1bf      	bne.n	800380e <USBH_Process+0x1ea>
        USBH_ErrLog("Control error: Get Full Device Descriptor request failed");
 800388e:	4836      	ldr	r0, [pc, #216]	; (8003968 <USBH_Process+0x344>)
 8003890:	f003 ffb6 	bl	8007800 <iprintf>
 8003894:	4839      	ldr	r0, [pc, #228]	; (800397c <USBH_Process+0x358>)
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8003896:	f003 ffb3 	bl	8007800 <iprintf>
 800389a:	200a      	movs	r0, #10
 800389c:	f003 ffc8 	bl	8007830 <putchar>
        phost->device.EnumCnt++;
 80038a0:	f894 351e 	ldrb.w	r3, [r4, #1310]	; 0x51e
 80038a4:	3301      	adds	r3, #1
 80038a6:	b2db      	uxtb	r3, r3
        if (phost->device.EnumCnt > 3U)
 80038a8:	2b03      	cmp	r3, #3
        phost->device.EnumCnt++;
 80038aa:	f884 351e 	strb.w	r3, [r4, #1310]	; 0x51e
        if (phost->device.EnumCnt > 3U)
 80038ae:	d8c1      	bhi.n	8003834 <USBH_Process+0x210>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 80038b0:	7961      	ldrb	r1, [r4, #5]
 80038b2:	4620      	mov	r0, r4
 80038b4:	f000 fcd2 	bl	800425c <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 80038b8:	7921      	ldrb	r1, [r4, #4]
 80038ba:	4620      	mov	r0, r4
 80038bc:	f000 fcce 	bl	800425c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80038c0:	2300      	movs	r3, #0
 80038c2:	7063      	strb	r3, [r4, #1]
 80038c4:	e7c7      	b.n	8003856 <USBH_Process+0x232>
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80038c6:	2101      	movs	r1, #1
 80038c8:	4620      	mov	r0, r4
 80038ca:	f000 fc2b 	bl	8004124 <USBH_SetAddress>
      if (ReqStatus == USBH_OK)
 80038ce:	4606      	mov	r6, r0
 80038d0:	b998      	cbnz	r0, 80038fa <USBH_Process+0x2d6>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80038d2:	2501      	movs	r5, #1
        USBH_Delay(2U);
 80038d4:	2002      	movs	r0, #2
 80038d6:	f003 fe48 	bl	800756a <USBH_Delay>
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80038da:	4829      	ldr	r0, [pc, #164]	; (8003980 <USBH_Process+0x35c>)
 80038dc:	4629      	mov	r1, r5
        phost->device.address = USBH_DEVICE_ADDRESS;
 80038de:	f884 551c 	strb.w	r5, [r4, #1308]	; 0x51c
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
 80038e2:	f003 ff8d 	bl	8007800 <iprintf>
 80038e6:	200a      	movs	r0, #10
 80038e8:	f003 ffa2 	bl	8007830 <putchar>
        phost->EnumState = ENUM_GET_CFG_DESC;
 80038ec:	2303      	movs	r3, #3
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80038ee:	7921      	ldrb	r1, [r4, #4]
        phost->EnumState = ENUM_GET_CFG_DESC;
 80038f0:	7063      	strb	r3, [r4, #1]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80038f2:	79a2      	ldrb	r2, [r4, #6]
 80038f4:	f894 351c 	ldrb.w	r3, [r4, #1308]	; 0x51c
 80038f8:	e753      	b.n	80037a2 <USBH_Process+0x17e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80038fa:	2803      	cmp	r0, #3
 80038fc:	d187      	bne.n	800380e <USBH_Process+0x1ea>
        USBH_ErrLog("Control error: Device Set Address request failed");
 80038fe:	481a      	ldr	r0, [pc, #104]	; (8003968 <USBH_Process+0x344>)
 8003900:	f003 ff7e 	bl	8007800 <iprintf>
 8003904:	481f      	ldr	r0, [pc, #124]	; (8003984 <USBH_Process+0x360>)
 8003906:	f003 ff7b 	bl	8007800 <iprintf>
 800390a:	200a      	movs	r0, #10
 800390c:	f003 ff90 	bl	8007830 <putchar>
        USBH_UsrLog("Control error, Device not Responding Please unplug the Device.");
 8003910:	4817      	ldr	r0, [pc, #92]	; (8003970 <USBH_Process+0x34c>)
 8003912:	f003 ff75 	bl	8007800 <iprintf>
 8003916:	200a      	movs	r0, #10
 8003918:	f003 ff8a 	bl	8007830 <putchar>
        phost->gState = HOST_ABORT_STATE;
 800391c:	230d      	movs	r3, #13
 800391e:	7023      	strb	r3, [r4, #0]
        phost->EnumState = ENUM_IDLE;
 8003920:	2300      	movs	r3, #0
 8003922:	e7b0      	b.n	8003886 <USBH_Process+0x262>
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8003924:	2109      	movs	r1, #9
 8003926:	4620      	mov	r0, r4
 8003928:	f000 fb47 	bl	8003fba <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800392c:	b948      	cbnz	r0, 8003942 <USBH_Process+0x31e>
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800392e:	2304      	movs	r3, #4
 8003930:	e7a9      	b.n	8003886 <USBH_Process+0x262>
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8003932:	f8b4 153a 	ldrh.w	r1, [r4, #1338]	; 0x53a
 8003936:	4620      	mov	r0, r4
 8003938:	f000 fb3f 	bl	8003fba <USBH_Get_CfgDesc>
      if (ReqStatus == USBH_OK)
 800393c:	b908      	cbnz	r0, 8003942 <USBH_Process+0x31e>
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800393e:	2305      	movs	r3, #5
 8003940:	e7a1      	b.n	8003886 <USBH_Process+0x262>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003942:	2803      	cmp	r0, #3
 8003944:	f47f af63 	bne.w	800380e <USBH_Process+0x1ea>
        USBH_ErrLog("Control error: Get Device configuration descriptor request failed");
 8003948:	4807      	ldr	r0, [pc, #28]	; (8003968 <USBH_Process+0x344>)
 800394a:	f003 ff59 	bl	8007800 <iprintf>
 800394e:	480e      	ldr	r0, [pc, #56]	; (8003988 <USBH_Process+0x364>)
 8003950:	e7a1      	b.n	8003896 <USBH_Process+0x272>
 8003952:	bf00      	nop
 8003954:	08008b28 	.word	0x08008b28
 8003958:	08008b3d 	.word	0x08008b3d
 800395c:	08008b58 	.word	0x08008b58
 8003960:	08008d34 	.word	0x08008d34
 8003964:	08008d46 	.word	0x08008d46
 8003968:	080089d0 	.word	0x080089d0
 800396c:	08008b84 	.word	0x08008b84
 8003970:	08008bb8 	.word	0x08008bb8
 8003974:	08008bf7 	.word	0x08008bf7
 8003978:	08008c00 	.word	0x08008c00
 800397c:	08008c09 	.word	0x08008c09
 8003980:	08008c42 	.word	0x08008c42
 8003984:	08008c5a 	.word	0x08008c5a
 8003988:	08008c8b 	.word	0x08008c8b
      if (phost->device.DevDesc.iManufacturer != 0U)
 800398c:	f894 5534 	ldrb.w	r5, [r4, #1332]	; 0x534
 8003990:	b1ed      	cbz	r5, 80039ce <USBH_Process+0x3aa>
                                        phost->device.Data, 0xFFU);
 8003992:	f504 768e 	add.w	r6, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8003996:	23ff      	movs	r3, #255	; 0xff
 8003998:	4629      	mov	r1, r5
 800399a:	4620      	mov	r0, r4
 800399c:	4632      	mov	r2, r6
 800399e:	f000 fb9a 	bl	80040d6 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80039a2:	b988      	cbnz	r0, 80039c8 <USBH_Process+0x3a4>
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
 80039a4:	4631      	mov	r1, r6
 80039a6:	488a      	ldr	r0, [pc, #552]	; (8003bd0 <USBH_Process+0x5ac>)
 80039a8:	f003 ff2a 	bl	8007800 <iprintf>
          USBH_UsrLog("Manufacturer : N/A");
 80039ac:	200a      	movs	r0, #10
 80039ae:	f003 ff3f 	bl	8007830 <putchar>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80039b2:	2306      	movs	r3, #6
        {
          USBH_UsrLog("Product : N/A");
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80039b4:	2105      	movs	r1, #5
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80039b6:	7063      	strb	r3, [r4, #1]
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80039b8:	2200      	movs	r2, #0
 80039ba:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 80039be:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 80039c2:	f000 fcc1 	bl	8004348 <osMessagePut>
 80039c6:	e722      	b.n	800380e <USBH_Process+0x1ea>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80039c8:	2803      	cmp	r0, #3
 80039ca:	f47f af20 	bne.w	800380e <USBH_Process+0x1ea>
          USBH_UsrLog("Manufacturer : N/A");
 80039ce:	4881      	ldr	r0, [pc, #516]	; (8003bd4 <USBH_Process+0x5b0>)
 80039d0:	f003 ff16 	bl	8007800 <iprintf>
 80039d4:	e7ea      	b.n	80039ac <USBH_Process+0x388>
      if (phost->device.DevDesc.iProduct != 0U)
 80039d6:	f894 5535 	ldrb.w	r5, [r4, #1333]	; 0x535
 80039da:	b1a5      	cbz	r5, 8003a06 <USBH_Process+0x3e2>
                                        phost->device.Data, 0xFFU);
 80039dc:	f504 768e 	add.w	r6, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80039e0:	23ff      	movs	r3, #255	; 0xff
 80039e2:	4629      	mov	r1, r5
 80039e4:	4620      	mov	r0, r4
 80039e6:	4632      	mov	r2, r6
 80039e8:	f000 fb75 	bl	80040d6 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 80039ec:	b940      	cbnz	r0, 8003a00 <USBH_Process+0x3dc>
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
 80039ee:	4631      	mov	r1, r6
 80039f0:	4879      	ldr	r0, [pc, #484]	; (8003bd8 <USBH_Process+0x5b4>)
 80039f2:	f003 ff05 	bl	8007800 <iprintf>
 80039f6:	200a      	movs	r0, #10
 80039f8:	f003 ff1a 	bl	8007830 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80039fc:	2307      	movs	r3, #7
 80039fe:	e742      	b.n	8003886 <USBH_Process+0x262>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003a00:	2803      	cmp	r0, #3
 8003a02:	f47f af04 	bne.w	800380e <USBH_Process+0x1ea>
          USBH_UsrLog("Product : N/A");
 8003a06:	4875      	ldr	r0, [pc, #468]	; (8003bdc <USBH_Process+0x5b8>)
 8003a08:	f003 fefa 	bl	8007800 <iprintf>
 8003a0c:	200a      	movs	r0, #10
 8003a0e:	f003 ff0f 	bl	8007830 <putchar>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8003a12:	2307      	movs	r3, #7
 8003a14:	e7ce      	b.n	80039b4 <USBH_Process+0x390>
#endif
      }
      break;

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8003a16:	f894 1536 	ldrb.w	r1, [r4, #1334]	; 0x536
 8003a1a:	b199      	cbz	r1, 8003a44 <USBH_Process+0x420>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
                                        phost->device.Data, 0xFFU);
 8003a1c:	f504 768e 	add.w	r6, r4, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8003a20:	23ff      	movs	r3, #255	; 0xff
 8003a22:	4620      	mov	r0, r4
 8003a24:	4632      	mov	r2, r6
 8003a26:	f000 fb56 	bl	80040d6 <USBH_Get_StringDesc>
        if (ReqStatus == USBH_OK)
 8003a2a:	4605      	mov	r5, r0
 8003a2c:	b938      	cbnz	r0, 8003a3e <USBH_Process+0x41a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
 8003a2e:	4631      	mov	r1, r6
 8003a30:	486b      	ldr	r0, [pc, #428]	; (8003be0 <USBH_Process+0x5bc>)
 8003a32:	f003 fee5 	bl	8007800 <iprintf>
 8003a36:	200a      	movs	r0, #10
 8003a38:	f003 fefa 	bl	8007830 <putchar>
 8003a3c:	e6c7      	b.n	80037ce <USBH_Process+0x1aa>
          Status = USBH_OK;
        }
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8003a3e:	2803      	cmp	r0, #3
 8003a40:	f47f aee5 	bne.w	800380e <USBH_Process+0x1ea>
        {
          USBH_UsrLog("Serial Number : N/A");
 8003a44:	4867      	ldr	r0, [pc, #412]	; (8003be4 <USBH_Process+0x5c0>)
          Status = USBH_OK;
 8003a46:	2500      	movs	r5, #0
          USBH_UsrLog("Serial Number : N/A");
 8003a48:	f003 feda 	bl	8007800 <iprintf>
 8003a4c:	200a      	movs	r0, #10
 8003a4e:	f003 feef 	bl	8007830 <putchar>
 8003a52:	e6bc      	b.n	80037ce <USBH_Process+0x1aa>
          phost->gState = HOST_INPUT;
 8003a54:	2307      	movs	r3, #7
 8003a56:	7023      	strb	r3, [r4, #0]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 8003a58:	2105      	movs	r1, #5
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003a5a:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003a5e:	2200      	movs	r2, #0
 8003a60:	e619      	b.n	8003696 <USBH_Process+0x72>
      if (phost->pUser != NULL)
 8003a62:	f8d4 3794 	ldr.w	r3, [r4, #1940]	; 0x794
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 8086 	beq.w	8003b78 <USBH_Process+0x554>
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	4620      	mov	r0, r4
 8003a70:	4798      	blx	r3
 8003a72:	e6c8      	b.n	8003806 <USBH_Process+0x1e2>
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8003a74:	f894 153d 	ldrb.w	r1, [r4, #1341]	; 0x53d
 8003a78:	4620      	mov	r0, r4
 8003a7a:	f000 fb61 	bl	8004140 <USBH_SetCfg>
 8003a7e:	2800      	cmp	r0, #0
 8003a80:	f47f ae1d 	bne.w	80036be <USBH_Process+0x9a>
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8003a84:	2309      	movs	r3, #9
        USBH_UsrLog("Default configuration set.");
 8003a86:	4858      	ldr	r0, [pc, #352]	; (8003be8 <USBH_Process+0x5c4>)
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8003a88:	7023      	strb	r3, [r4, #0]
        USBH_UsrLog("Default configuration set.");
 8003a8a:	f003 feb9 	bl	8007800 <iprintf>
 8003a8e:	200a      	movs	r0, #10
 8003a90:	f003 fece 	bl	8007830 <putchar>
 8003a94:	e613      	b.n	80036be <USBH_Process+0x9a>
      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 8003a96:	f894 353f 	ldrb.w	r3, [r4, #1343]	; 0x53f
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	d50c      	bpl.n	8003ab8 <USBH_Process+0x494>
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4620      	mov	r0, r4
 8003aa2:	f000 fb69 	bl	8004178 <USBH_SetFeature>
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	f47f ae09 	bne.w	80036be <USBH_Process+0x9a>
          USBH_UsrLog("Device remote wakeup enabled");
 8003aac:	484f      	ldr	r0, [pc, #316]	; (8003bec <USBH_Process+0x5c8>)
 8003aae:	f003 fea7 	bl	8007800 <iprintf>
 8003ab2:	200a      	movs	r0, #10
 8003ab4:	f003 febc 	bl	8007830 <putchar>
        phost->gState = HOST_CHECK_CLASS;
 8003ab8:	230a      	movs	r3, #10
 8003aba:	e5ff      	b.n	80036bc <USBH_Process+0x98>
      if (phost->ClassNumber == 0U)
 8003abc:	f8d4 3740 	ldr.w	r3, [r4, #1856]	; 0x740
 8003ac0:	b91b      	cbnz	r3, 8003aca <USBH_Process+0x4a6>
        USBH_UsrLog("No Class has been registered.");
 8003ac2:	484b      	ldr	r0, [pc, #300]	; (8003bf0 <USBH_Process+0x5cc>)
          USBH_UsrLog("No registered class for this device.");
 8003ac4:	f003 fe9c 	bl	8007800 <iprintf>
 8003ac8:	e029      	b.n	8003b1e <USBH_Process+0x4fa>
        phost->pActiveClass = NULL;
 8003aca:	2300      	movs	r3, #0
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003acc:	f894 2547 	ldrb.w	r2, [r4, #1351]	; 0x547
        phost->pActiveClass = NULL;
 8003ad0:	f8c4 373c 	str.w	r3, [r4, #1852]	; 0x73c
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8003ad4:	f8d4 3738 	ldr.w	r3, [r4, #1848]	; 0x738
 8003ad8:	7919      	ldrb	r1, [r3, #4]
 8003ada:	4291      	cmp	r1, r2
            phost->pActiveClass = phost->pClass[idx];
 8003adc:	bf08      	it	eq
 8003ade:	f8c4 373c 	streq.w	r3, [r4, #1852]	; 0x73c
        if (phost->pActiveClass != NULL)
 8003ae2:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003ae6:	b1f3      	cbz	r3, 8003b26 <USBH_Process+0x502>
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	4620      	mov	r0, r4
 8003aec:	4798      	blx	r3
 8003aee:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003af2:	b970      	cbnz	r0, 8003b12 <USBH_Process+0x4ee>
            phost->gState = HOST_CLASS_REQUEST;
 8003af4:	2206      	movs	r2, #6
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	483e      	ldr	r0, [pc, #248]	; (8003bf4 <USBH_Process+0x5d0>)
            phost->gState = HOST_CLASS_REQUEST;
 8003afa:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);
 8003afc:	f003 fe80 	bl	8007800 <iprintf>
 8003b00:	200a      	movs	r0, #10
 8003b02:	f003 fe95 	bl	8007830 <putchar>
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8003b06:	f8d4 3794 	ldr.w	r3, [r4, #1940]	; 0x794
 8003b0a:	2103      	movs	r1, #3
 8003b0c:	4620      	mov	r0, r4
 8003b0e:	4798      	blx	r3
 8003b10:	e7a2      	b.n	8003a58 <USBH_Process+0x434>
            phost->gState = HOST_ABORT_STATE;
 8003b12:	220d      	movs	r2, #13
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8003b14:	6819      	ldr	r1, [r3, #0]
 8003b16:	4838      	ldr	r0, [pc, #224]	; (8003bf8 <USBH_Process+0x5d4>)
            phost->gState = HOST_ABORT_STATE;
 8003b18:	7022      	strb	r2, [r4, #0]
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
 8003b1a:	f003 fe71 	bl	8007800 <iprintf>
          USBH_UsrLog("No registered class for this device.");
 8003b1e:	200a      	movs	r0, #10
 8003b20:	f003 fe86 	bl	8007830 <putchar>
 8003b24:	e798      	b.n	8003a58 <USBH_Process+0x434>
          phost->gState = HOST_ABORT_STATE;
 8003b26:	230d      	movs	r3, #13
          USBH_UsrLog("No registered class for this device.");
 8003b28:	4834      	ldr	r0, [pc, #208]	; (8003bfc <USBH_Process+0x5d8>)
          phost->gState = HOST_ABORT_STATE;
 8003b2a:	7023      	strb	r3, [r4, #0]
 8003b2c:	e7ca      	b.n	8003ac4 <USBH_Process+0x4a0>
      if (phost->pActiveClass != NULL)
 8003b2e:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003b32:	b1a3      	cbz	r3, 8003b5e <USBH_Process+0x53a>
        status = phost->pActiveClass->Requests(phost);
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	4620      	mov	r0, r4
 8003b38:	4798      	blx	r3
 8003b3a:	f88d 0017 	strb.w	r0, [sp, #23]
        if (status == USBH_OK)
 8003b3e:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003b42:	b90b      	cbnz	r3, 8003b48 <USBH_Process+0x524>
          phost->gState = HOST_CLASS;
 8003b44:	230b      	movs	r3, #11
 8003b46:	e786      	b.n	8003a56 <USBH_Process+0x432>
        else if (status == USBH_FAIL)
 8003b48:	f89d 3017 	ldrb.w	r3, [sp, #23]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d183      	bne.n	8003a58 <USBH_Process+0x434>
          phost->gState = HOST_ABORT_STATE;
 8003b50:	230d      	movs	r3, #13
          USBH_ErrLog("Device not responding Please Unplug.");
 8003b52:	482b      	ldr	r0, [pc, #172]	; (8003c00 <USBH_Process+0x5dc>)
          phost->gState = HOST_ABORT_STATE;
 8003b54:	7023      	strb	r3, [r4, #0]
          USBH_ErrLog("Device not responding Please Unplug.");
 8003b56:	f003 fe53 	bl	8007800 <iprintf>
 8003b5a:	482a      	ldr	r0, [pc, #168]	; (8003c04 <USBH_Process+0x5e0>)
 8003b5c:	e7b2      	b.n	8003ac4 <USBH_Process+0x4a0>
        phost->gState = HOST_ABORT_STATE;
 8003b5e:	230d      	movs	r3, #13
        USBH_ErrLog("Invalid Class Driver.");
 8003b60:	4827      	ldr	r0, [pc, #156]	; (8003c00 <USBH_Process+0x5dc>)
        phost->gState = HOST_ABORT_STATE;
 8003b62:	7023      	strb	r3, [r4, #0]
        USBH_ErrLog("Invalid Class Driver.");
 8003b64:	f003 fe4c 	bl	8007800 <iprintf>
 8003b68:	4827      	ldr	r0, [pc, #156]	; (8003c08 <USBH_Process+0x5e4>)
 8003b6a:	e7ab      	b.n	8003ac4 <USBH_Process+0x4a0>
      if (phost->pActiveClass != NULL)
 8003b6c:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003b70:	b113      	cbz	r3, 8003b78 <USBH_Process+0x554>
        phost->pActiveClass->BgndProcess(phost);
 8003b72:	695b      	ldr	r3, [r3, #20]
 8003b74:	4620      	mov	r0, r4
 8003b76:	4798      	blx	r3
}
 8003b78:	2000      	movs	r0, #0
 8003b7a:	b006      	add	sp, #24
 8003b7c:	bd70      	pop	{r4, r5, r6, pc}
      phost->device.is_disconnected = 0U;
 8003b7e:	2500      	movs	r5, #0
      DeInitStateMachine(phost);
 8003b80:	4620      	mov	r0, r4
      phost->device.is_disconnected = 0U;
 8003b82:	f884 5521 	strb.w	r5, [r4, #1313]	; 0x521
      DeInitStateMachine(phost);
 8003b86:	f7ff fc83 	bl	8003490 <DeInitStateMachine>
      if (phost->pActiveClass != NULL)
 8003b8a:	f8d4 373c 	ldr.w	r3, [r4, #1852]	; 0x73c
 8003b8e:	b123      	cbz	r3, 8003b9a <USBH_Process+0x576>
        phost->pActiveClass->DeInit(phost);
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	4620      	mov	r0, r4
 8003b94:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8003b96:	f8c4 573c 	str.w	r5, [r4, #1852]	; 0x73c
      if (phost->pUser != NULL)
 8003b9a:	f8d4 3794 	ldr.w	r3, [r4, #1940]	; 0x794
 8003b9e:	b113      	cbz	r3, 8003ba6 <USBH_Process+0x582>
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8003ba0:	2105      	movs	r1, #5
 8003ba2:	4620      	mov	r0, r4
 8003ba4:	4798      	blx	r3
      USBH_UsrLog("USB Device disconnected");
 8003ba6:	4819      	ldr	r0, [pc, #100]	; (8003c0c <USBH_Process+0x5e8>)
 8003ba8:	f003 fe2a 	bl	8007800 <iprintf>
 8003bac:	200a      	movs	r0, #10
 8003bae:	f003 fe3f 	bl	8007830 <putchar>
      if (phost->device.is_ReEnumerated == 1U)
 8003bb2:	f894 3522 	ldrb.w	r3, [r4, #1314]	; 0x522
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d106      	bne.n	8003bc8 <USBH_Process+0x5a4>
        phost->device.is_ReEnumerated = 0U;
 8003bba:	2300      	movs	r3, #0
        USBH_Start(phost);
 8003bbc:	4620      	mov	r0, r4
        phost->device.is_ReEnumerated = 0U;
 8003bbe:	f884 3522 	strb.w	r3, [r4, #1314]	; 0x522
        USBH_Start(phost);
 8003bc2:	f7ff fd25 	bl	8003610 <USBH_Start>
 8003bc6:	e57a      	b.n	80036be <USBH_Process+0x9a>
        USBH_LL_Start(phost);
 8003bc8:	4620      	mov	r0, r4
 8003bca:	f003 fc3d 	bl	8007448 <USBH_LL_Start>
 8003bce:	e576      	b.n	80036be <USBH_Process+0x9a>
 8003bd0:	08008ccd 	.word	0x08008ccd
 8003bd4:	08008cdf 	.word	0x08008cdf
 8003bd8:	08008cf2 	.word	0x08008cf2
 8003bdc:	08008cff 	.word	0x08008cff
 8003be0:	08008d0d 	.word	0x08008d0d
 8003be4:	08008d20 	.word	0x08008d20
 8003be8:	08008d6c 	.word	0x08008d6c
 8003bec:	08008d87 	.word	0x08008d87
 8003bf0:	08008da4 	.word	0x08008da4
 8003bf4:	08008dc2 	.word	0x08008dc2
 8003bf8:	08008dd4 	.word	0x08008dd4
 8003bfc:	08008df4 	.word	0x08008df4
 8003c00:	080089d0 	.word	0x080089d0
 8003c04:	08008e19 	.word	0x08008e19
 8003c08:	08008e3e 	.word	0x08008e3e
 8003c0c:	08008e54 	.word	0x08008e54

08003c10 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 8003c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c12:	4604      	mov	r4, r0
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c18:	f8d4 1798 	ldr.w	r1, [r4, #1944]	; 0x798
 8003c1c:	a801      	add	r0, sp, #4
 8003c1e:	f000 fbbb 	bl	8004398 <osMessageGet>
    if (event.status == osEventMessage)
 8003c22:	9b01      	ldr	r3, [sp, #4]
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d1f5      	bne.n	8003c14 <USBH_Process_OS+0x4>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 8003c28:	4620      	mov	r0, r4
 8003c2a:	f7ff fcfb 	bl	8003624 <USBH_Process>
 8003c2e:	e7f1      	b.n	8003c14 <USBH_Process_OS+0x4>

08003c30 <USBH_LL_SetTimer>:
  phost->Timer = time;
 8003c30:	f8c0 1784 	str.w	r1, [r0, #1924]	; 0x784
 8003c34:	4770      	bx	lr

08003c36 <USBH_LL_IncTimer>:
  phost->Timer++;
 8003c36:	f8d0 2784 	ldr.w	r2, [r0, #1924]	; 0x784
 8003c3a:	3201      	adds	r2, #1
 8003c3c:	f8c0 2784 	str.w	r2, [r0, #1924]	; 0x784
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8003c40:	7802      	ldrb	r2, [r0, #0]
 8003c42:	2a0b      	cmp	r2, #11
 8003c44:	d104      	bne.n	8003c50 <USBH_LL_IncTimer+0x1a>
 8003c46:	f8d0 373c 	ldr.w	r3, [r0, #1852]	; 0x73c
 8003c4a:	b10b      	cbz	r3, 8003c50 <USBH_LL_IncTimer+0x1a>
    phost->pActiveClass->SOFProcess(phost);
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	4718      	bx	r3
 8003c50:	4770      	bx	lr

08003c52 <USBH_LL_PortEnabled>:
  phost->device.PortEnabled = 1U;
 8003c52:	2101      	movs	r1, #1
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003c54:	2200      	movs	r2, #0
  phost->device.PortEnabled = 1U;
 8003c56:	f880 1523 	strb.w	r1, [r0, #1315]	; 0x523
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003c5a:	f8c0 17a0 	str.w	r1, [r0, #1952]	; 0x7a0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003c5e:	f8d0 0798 	ldr.w	r0, [r0, #1944]	; 0x798
 8003c62:	f000 bb71 	b.w	8004348 <osMessagePut>

08003c66 <USBH_LL_PortDisabled>:
  phost->device.PortEnabled = 0U;
 8003c66:	2300      	movs	r3, #0
 8003c68:	f880 3523 	strb.w	r3, [r0, #1315]	; 0x523
 8003c6c:	4770      	bx	lr

08003c6e <USBH_LL_Connect>:
{
 8003c6e:	b510      	push	{r4, lr}
  phost->device.is_connected = 1U;
 8003c70:	2101      	movs	r1, #1
  phost->device.is_disconnected = 0U;
 8003c72:	2400      	movs	r4, #0
  phost->device.is_connected = 1U;
 8003c74:	f880 1520 	strb.w	r1, [r0, #1312]	; 0x520
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003c78:	4622      	mov	r2, r4
  phost->device.is_disconnected = 0U;
 8003c7a:	f880 4521 	strb.w	r4, [r0, #1313]	; 0x521
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003c7e:	f8c0 17a0 	str.w	r1, [r0, #1952]	; 0x7a0
  phost->device.is_ReEnumerated = 0U;
 8003c82:	f880 4522 	strb.w	r4, [r0, #1314]	; 0x522
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003c86:	f8d0 0798 	ldr.w	r0, [r0, #1944]	; 0x798
 8003c8a:	f000 fb5d 	bl	8004348 <osMessagePut>
}
 8003c8e:	4620      	mov	r0, r4
 8003c90:	bd10      	pop	{r4, pc}

08003c92 <USBH_LL_Disconnect>:
{
 8003c92:	b570      	push	{r4, r5, r6, lr}
  phost->device.is_connected = 0U;
 8003c94:	2500      	movs	r5, #0
  phost->device.is_disconnected = 1U;
 8003c96:	2601      	movs	r6, #1
{
 8003c98:	4604      	mov	r4, r0
  phost->device.is_disconnected = 1U;
 8003c9a:	f880 6521 	strb.w	r6, [r0, #1313]	; 0x521
  phost->device.PortEnabled = 0U;
 8003c9e:	f880 5523 	strb.w	r5, [r0, #1315]	; 0x523
  phost->device.is_connected = 0U;
 8003ca2:	f880 5520 	strb.w	r5, [r0, #1312]	; 0x520
  USBH_LL_Stop(phost);
 8003ca6:	f003 fbdd 	bl	8007464 <USBH_LL_Stop>
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8003caa:	7921      	ldrb	r1, [r4, #4]
 8003cac:	4620      	mov	r0, r4
 8003cae:	f000 fad5 	bl	800425c <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8003cb2:	7961      	ldrb	r1, [r4, #5]
 8003cb4:	4620      	mov	r0, r4
 8003cb6:	f000 fad1 	bl	800425c <USBH_FreePipe>
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003cba:	f8c4 67a0 	str.w	r6, [r4, #1952]	; 0x7a0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003cbe:	462a      	mov	r2, r5
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
 8003cc6:	f000 fb3f 	bl	8004348 <osMessagePut>
}
 8003cca:	4628      	mov	r0, r5
 8003ccc:	bd70      	pop	{r4, r5, r6, pc}

08003cce <USBH_LL_NotifyURBChange>:
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003cce:	2101      	movs	r1, #1

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003cd0:	2200      	movs	r2, #0
{
 8003cd2:	b508      	push	{r3, lr}
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8003cd4:	f8c0 17a0 	str.w	r1, [r0, #1952]	; 0x7a0
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003cd8:	f8d0 0798 	ldr.w	r0, [r0, #1944]	; 0x798
 8003cdc:	f000 fb34 	bl	8004348 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
}
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	bd08      	pop	{r3, pc}

08003ce4 <USBH_GetNextDesc>:
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003ce4:	7802      	ldrb	r2, [r0, #0]
 8003ce6:	880b      	ldrh	r3, [r1, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);

  return (pnext);
}
 8003ce8:	4410      	add	r0, r2
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8003cea:	4413      	add	r3, r2
 8003cec:	800b      	strh	r3, [r1, #0]
}
 8003cee:	4770      	bx	lr

08003cf0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8003cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  USBH_StatusTypeDef status;
  status = USBH_BUSY;

  switch (phost->RequestState)
 8003cf2:	7885      	ldrb	r5, [r0, #2]
{
 8003cf4:	4604      	mov	r4, r0
  switch (phost->RequestState)
 8003cf6:	2d01      	cmp	r5, #1
 8003cf8:	d003      	beq.n	8003d02 <USBH_CtlReq+0x12>
 8003cfa:	2d02      	cmp	r5, #2
 8003cfc:	d011      	beq.n	8003d22 <USBH_CtlReq+0x32>
  status = USBH_BUSY;
 8003cfe:	2501      	movs	r5, #1
      break;

    default:
      break;
  }
  return status;
 8003d00:	e00c      	b.n	8003d1c <USBH_CtlReq+0x2c>
      phost->RequestState = CMD_WAIT;
 8003d02:	2302      	movs	r3, #2
      phost->Control.buff = buff;
 8003d04:	6081      	str	r1, [r0, #8]
      phost->Control.length = length;
 8003d06:	8182      	strh	r2, [r0, #12]
      phost->Control.state = CTRL_SETUP;
 8003d08:	7605      	strb	r5, [r0, #24]
      phost->RequestState = CMD_WAIT;
 8003d0a:	7083      	strb	r3, [r0, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003d0c:	2103      	movs	r1, #3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003d0e:	2200      	movs	r2, #0
 8003d10:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003d14:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003d18:	f000 fb16 	bl	8004348 <osMessagePut>
}
 8003d1c:	4628      	mov	r0, r5
 8003d1e:	b003      	add	sp, #12
 8003d20:	bd30      	pop	{r4, r5, pc}
{
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;

  switch (phost->Control.state)
 8003d22:	7e03      	ldrb	r3, [r0, #24]
 8003d24:	2101      	movs	r1, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	2b0a      	cmp	r3, #10
 8003d2a:	d80e      	bhi.n	8003d4a <USBH_CtlReq+0x5a>
 8003d2c:	e8df f003 	tbb	[pc, r3]
 8003d30:	392f0f06 	.word	0x392f0f06
 8003d34:	8c826156 	.word	0x8c826156
 8003d38:	b0a5      	.short	0xb0a5
 8003d3a:	ba          	.byte	0xba
 8003d3b:	00          	.byte	0x00
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8003d3c:	7942      	ldrb	r2, [r0, #5]
 8003d3e:	f100 0110 	add.w	r1, r0, #16
 8003d42:	f000 fa27 	bl	8004194 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8003d46:	2302      	movs	r3, #2
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8003d48:	7623      	strb	r3, [r4, #24]
        phost->RequestState = CMD_SEND;
 8003d4a:	2501      	movs	r5, #1
 8003d4c:	e7de      	b.n	8003d0c <USBH_CtlReq+0x1c>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003d4e:	7941      	ldrb	r1, [r0, #5]
 8003d50:	f003 fbf2 	bl	8007538 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003d54:	2801      	cmp	r0, #1
 8003d56:	d114      	bne.n	8003d82 <USBH_CtlReq+0x92>
        if (phost->Control.setup.b.wLength.w != 0U)
 8003d58:	8ae2      	ldrh	r2, [r4, #22]
 8003d5a:	f994 3010 	ldrsb.w	r3, [r4, #16]
 8003d5e:	b162      	cbz	r2, 8003d7a <USBH_CtlReq+0x8a>
          if (direction == USB_D2H)
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	da55      	bge.n	8003e10 <USBH_CtlReq+0x120>
            phost->Control.state = CTRL_DATA_IN;
 8003d64:	2303      	movs	r3, #3
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003d66:	2103      	movs	r1, #3
            phost->Control.state = CTRL_STATUS_IN;
 8003d68:	7623      	strb	r3, [r4, #24]
        {
          /* Device error */
          phost->Control.state = CTRL_ERROR;

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003d6a:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
 8003d74:	f000 fae8 	bl	8004348 <osMessagePut>
 8003d78:	e7e7      	b.n	8003d4a <USBH_CtlReq+0x5a>
          if (direction == USB_D2H)
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	da3e      	bge.n	8003dfc <USBH_CtlReq+0x10c>
#endif
#endif
      }
      else if (URB_Status == USBH_URB_NOTREADY)
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8003d7e:	2309      	movs	r3, #9
 8003d80:	e7f1      	b.n	8003d66 <USBH_CtlReq+0x76>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8003d82:	2804      	cmp	r0, #4
 8003d84:	d001      	beq.n	8003d8a <USBH_CtlReq+0x9a>
 8003d86:	2802      	cmp	r0, #2
#endif
#endif
      }
      else
      {
        if (URB_Status == USBH_URB_ERROR)
 8003d88:	d1df      	bne.n	8003d4a <USBH_CtlReq+0x5a>
        {
          phost->Control.state = CTRL_ERROR;
 8003d8a:	230b      	movs	r3, #11
 8003d8c:	e7eb      	b.n	8003d66 <USBH_CtlReq+0x76>
      phost->Control.timer = (uint16_t)phost->Timer;
 8003d8e:	f8d0 3784 	ldr.w	r3, [r0, #1924]	; 0x784
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8003d92:	8982      	ldrh	r2, [r0, #12]
      phost->Control.timer = (uint16_t)phost->Timer;
 8003d94:	81c3      	strh	r3, [r0, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8003d96:	6881      	ldr	r1, [r0, #8]
 8003d98:	7903      	ldrb	r3, [r0, #4]
 8003d9a:	f000 fa23 	bl	80041e4 <USBH_CtlReceiveData>
      phost->Control.state = CTRL_DATA_IN_WAIT;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	e7d2      	b.n	8003d48 <USBH_CtlReq+0x58>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8003da2:	7901      	ldrb	r1, [r0, #4]
 8003da4:	f003 fbc8 	bl	8007538 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003da8:	2801      	cmp	r0, #1
 8003daa:	f04f 0103 	mov.w	r1, #3
 8003dae:	d102      	bne.n	8003db6 <USBH_CtlReq+0xc6>
        phost->Control.state = CTRL_STATUS_OUT;
 8003db0:	2309      	movs	r3, #9
          phost->Control.state = CTRL_ERROR;
 8003db2:	7623      	strb	r3, [r4, #24]
 8003db4:	e7d9      	b.n	8003d6a <USBH_CtlReq+0x7a>
      if (URB_Status == USBH_URB_STALL)
 8003db6:	2805      	cmp	r0, #5
 8003db8:	d10c      	bne.n	8003dd4 <USBH_CtlReq+0xe4>
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003dba:	2503      	movs	r5, #3
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003dbc:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
 8003dc6:	f000 fabf 	bl	8004348 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	70a3      	strb	r3, [r4, #2]
        phost->Control.state = CTRL_IDLE;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	7623      	strb	r3, [r4, #24]
 8003dd2:	e79b      	b.n	8003d0c <USBH_CtlReq+0x1c>
        if (URB_Status == USBH_URB_ERROR)
 8003dd4:	2804      	cmp	r0, #4
 8003dd6:	d1b8      	bne.n	8003d4a <USBH_CtlReq+0x5a>
          phost->Control.state = CTRL_ERROR;
 8003dd8:	230b      	movs	r3, #11
 8003dda:	e7ea      	b.n	8003db2 <USBH_CtlReq+0xc2>
      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8003ddc:	7943      	ldrb	r3, [r0, #5]
 8003dde:	8982      	ldrh	r2, [r0, #12]
 8003de0:	9100      	str	r1, [sp, #0]
 8003de2:	6881      	ldr	r1, [r0, #8]
 8003de4:	f000 f9e7 	bl	80041b6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8003de8:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
 8003dec:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8003dee:	2306      	movs	r3, #6
 8003df0:	e7aa      	b.n	8003d48 <USBH_CtlReq+0x58>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003df2:	7941      	ldrb	r1, [r0, #5]
 8003df4:	f003 fba0 	bl	8007538 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003df8:	2801      	cmp	r0, #1
 8003dfa:	d101      	bne.n	8003e00 <USBH_CtlReq+0x110>
            phost->Control.state = CTRL_STATUS_IN;
 8003dfc:	2307      	movs	r3, #7
 8003dfe:	e7b2      	b.n	8003d66 <USBH_CtlReq+0x76>
      else if (URB_Status == USBH_URB_STALL)
 8003e00:	2805      	cmp	r0, #5
 8003e02:	d103      	bne.n	8003e0c <USBH_CtlReq+0x11c>
        phost->Control.state = CTRL_STALLED;
 8003e04:	230c      	movs	r3, #12
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003e06:	2103      	movs	r1, #3
        phost->Control.state = CTRL_STALLED;
 8003e08:	7623      	strb	r3, [r4, #24]
 8003e0a:	e7d6      	b.n	8003dba <USBH_CtlReq+0xca>
      else if (URB_Status == USBH_URB_NOTREADY)
 8003e0c:	2802      	cmp	r0, #2
 8003e0e:	d101      	bne.n	8003e14 <USBH_CtlReq+0x124>
        phost->Control.state = CTRL_DATA_OUT;
 8003e10:	2305      	movs	r3, #5
 8003e12:	e7a8      	b.n	8003d66 <USBH_CtlReq+0x76>
        if (URB_Status == USBH_URB_ERROR)
 8003e14:	2804      	cmp	r0, #4
 8003e16:	d198      	bne.n	8003d4a <USBH_CtlReq+0x5a>
          phost->Control.state = CTRL_ERROR;
 8003e18:	230b      	movs	r3, #11
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003e1a:	2103      	movs	r1, #3
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
          phost->Control.state = CTRL_ERROR;
 8003e22:	7623      	strb	r3, [r4, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003e24:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e28:	f000 fa8e 	bl	8004348 <osMessagePut>
        phost->RequestState = CMD_SEND;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	2502      	movs	r5, #2
 8003e30:	70a3      	strb	r3, [r4, #2]
 8003e32:	e76b      	b.n	8003d0c <USBH_CtlReq+0x1c>
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8003e34:	2200      	movs	r2, #0
 8003e36:	7903      	ldrb	r3, [r0, #4]
 8003e38:	4611      	mov	r1, r2
 8003e3a:	f000 f9d3 	bl	80041e4 <USBH_CtlReceiveData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8003e3e:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
 8003e42:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8003e44:	2308      	movs	r3, #8
 8003e46:	e77f      	b.n	8003d48 <USBH_CtlReq+0x58>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8003e48:	7901      	ldrb	r1, [r0, #4]
 8003e4a:	f003 fb75 	bl	8007538 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003e4e:	2801      	cmp	r0, #1
 8003e50:	d10b      	bne.n	8003e6a <USBH_CtlReq+0x17a>
        phost->Control.state = CTRL_COMPLETE;
 8003e52:	230d      	movs	r3, #13
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003e54:	2103      	movs	r1, #3
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e56:	2200      	movs	r2, #0
 8003e58:	f8d4 0798 	ldr.w	r0, [r4, #1944]	; 0x798
        phost->Control.state = CTRL_COMPLETE;
 8003e5c:	7623      	strb	r3, [r4, #24]
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e5e:	2500      	movs	r5, #0
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 8003e60:	f8c4 17a0 	str.w	r1, [r4, #1952]	; 0x7a0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8003e64:	f000 fa70 	bl	8004348 <osMessagePut>
 8003e68:	e7af      	b.n	8003dca <USBH_CtlReq+0xda>
      else if (URB_Status == USBH_URB_ERROR)
 8003e6a:	2804      	cmp	r0, #4
 8003e6c:	f04f 0103 	mov.w	r1, #3
 8003e70:	d0b2      	beq.n	8003dd8 <USBH_CtlReq+0xe8>
        if (URB_Status == USBH_URB_STALL)
 8003e72:	2805      	cmp	r0, #5
 8003e74:	f47f af69 	bne.w	8003d4a <USBH_CtlReq+0x5a>
 8003e78:	e79f      	b.n	8003dba <USBH_CtlReq+0xca>
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	7943      	ldrb	r3, [r0, #5]
 8003e7e:	9100      	str	r1, [sp, #0]
 8003e80:	4611      	mov	r1, r2
 8003e82:	f000 f998 	bl	80041b6 <USBH_CtlSendData>
      phost->Control.timer = (uint16_t)phost->Timer;
 8003e86:	f8d4 3784 	ldr.w	r3, [r4, #1924]	; 0x784
 8003e8a:	81e3      	strh	r3, [r4, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8003e8c:	230a      	movs	r3, #10
 8003e8e:	e75b      	b.n	8003d48 <USBH_CtlReq+0x58>
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8003e90:	7941      	ldrb	r1, [r0, #5]
 8003e92:	f003 fb51 	bl	8007538 <USBH_LL_GetURBState>
      if (URB_Status == USBH_URB_DONE)
 8003e96:	2801      	cmp	r0, #1
 8003e98:	d0db      	beq.n	8003e52 <USBH_CtlReq+0x162>
      else if (URB_Status == USBH_URB_NOTREADY)
 8003e9a:	2802      	cmp	r0, #2
 8003e9c:	f43f af6f 	beq.w	8003d7e <USBH_CtlReq+0x8e>
        if (URB_Status == USBH_URB_ERROR)
 8003ea0:	2804      	cmp	r0, #4
 8003ea2:	e771      	b.n	8003d88 <USBH_CtlReq+0x98>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8003ea4:	7e43      	ldrb	r3, [r0, #25]
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	2b02      	cmp	r3, #2
 8003eac:	7643      	strb	r3, [r0, #25]
 8003eae:	d803      	bhi.n	8003eb8 <USBH_CtlReq+0x1c8>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	7603      	strb	r3, [r0, #24]
        phost->RequestState = CMD_SEND;
 8003eb4:	7083      	strb	r3, [r0, #2]
 8003eb6:	e748      	b.n	8003d4a <USBH_CtlReq+0x5a>
      }
      else
      {
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
        phost->Control.errorcount = 0U;
 8003eb8:	2500      	movs	r5, #0
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8003eba:	f8d0 3794 	ldr.w	r3, [r0, #1940]	; 0x794
 8003ebe:	2106      	movs	r1, #6
 8003ec0:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8003ec2:	7665      	strb	r5, [r4, #25]
        USBH_ErrLog("Control error: Device not responding");
 8003ec4:	4809      	ldr	r0, [pc, #36]	; (8003eec <USBH_CtlReq+0x1fc>)
 8003ec6:	f003 fc9b 	bl	8007800 <iprintf>
 8003eca:	4809      	ldr	r0, [pc, #36]	; (8003ef0 <USBH_CtlReq+0x200>)
 8003ecc:	f003 fc98 	bl	8007800 <iprintf>
 8003ed0:	200a      	movs	r0, #10
 8003ed2:	f003 fcad 	bl	8007830 <putchar>

        /* Free control pipes */
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8003ed6:	7961      	ldrb	r1, [r4, #5]
 8003ed8:	4620      	mov	r0, r4
 8003eda:	f000 f9bf 	bl	800425c <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8003ede:	7921      	ldrb	r1, [r4, #4]
 8003ee0:	4620      	mov	r0, r4
 8003ee2:	f000 f9bb 	bl	800425c <USBH_FreePipe>

        phost->gState = HOST_IDLE;
 8003ee6:	7025      	strb	r5, [r4, #0]
 8003ee8:	e7a0      	b.n	8003e2c <USBH_CtlReq+0x13c>
 8003eea:	bf00      	nop
 8003eec:	080089d0 	.word	0x080089d0
 8003ef0:	08008ea6 	.word	0x08008ea6

08003ef4 <USBH_GetDescriptor>:
{
 8003ef4:	b430      	push	{r4, r5}
  if (phost->RequestState == CMD_SEND)
 8003ef6:	7884      	ldrb	r4, [r0, #2]
{
 8003ef8:	f8bd 5008 	ldrh.w	r5, [sp, #8]
  if (phost->RequestState == CMD_SEND)
 8003efc:	2c01      	cmp	r4, #1
 8003efe:	d10f      	bne.n	8003f20 <USBH_GetDescriptor+0x2c>
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003f00:	f061 047f 	orn	r4, r1, #127	; 0x7f
    phost->Control.setup.b.wValue.w = value_idx;
 8003f04:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003f06:	2106      	movs	r1, #6
    phost->Control.setup.b.wLength.w = length;
 8003f08:	82c5      	strh	r5, [r0, #22]
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8003f0a:	7404      	strb	r4, [r0, #16]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8003f0c:	f402 447f 	and.w	r4, r2, #65280	; 0xff00
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8003f10:	7441      	strb	r1, [r0, #17]
    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8003f12:	f5b4 7f40 	cmp.w	r4, #768	; 0x300
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8003f16:	bf0c      	ite	eq
 8003f18:	f240 4209 	movweq	r2, #1033	; 0x409
      phost->Control.setup.b.wIndex.w = 0U;
 8003f1c:	2200      	movne	r2, #0
 8003f1e:	8282      	strh	r2, [r0, #20]
  return USBH_CtlReq(phost, buff, length);
 8003f20:	462a      	mov	r2, r5
 8003f22:	4619      	mov	r1, r3
}
 8003f24:	bc30      	pop	{r4, r5}
  return USBH_CtlReq(phost, buff, length);
 8003f26:	f7ff bee3 	b.w	8003cf0 <USBH_CtlReq>

08003f2a <USBH_Get_DevDesc>:
{
 8003f2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if ((status = USBH_GetDescriptor(phost,
 8003f2c:	f500 738e 	add.w	r3, r0, #284	; 0x11c
 8003f30:	460d      	mov	r5, r1
 8003f32:	9100      	str	r1, [sp, #0]
 8003f34:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f38:	2100      	movs	r1, #0
{
 8003f3a:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost,
 8003f3c:	f7ff ffda 	bl	8003ef4 <USBH_GetDescriptor>
 8003f40:	bbc8      	cbnz	r0, 8003fb6 <USBH_Get_DevDesc+0x8c>
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8003f42:	f894 311c 	ldrb.w	r3, [r4, #284]	; 0x11c
  if (length > 8U)
 8003f46:	2d08      	cmp	r5, #8
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8003f48:	f884 3526 	strb.w	r3, [r4, #1318]	; 0x526
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8003f4c:	f894 311d 	ldrb.w	r3, [r4, #285]	; 0x11d
 8003f50:	f884 3527 	strb.w	r3, [r4, #1319]	; 0x527
  dev_desc->bcdUSB             = LE16(buf +  2);
 8003f54:	f8b4 311e 	ldrh.w	r3, [r4, #286]	; 0x11e
 8003f58:	f8a4 3528 	strh.w	r3, [r4, #1320]	; 0x528
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8003f5c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
 8003f60:	f884 352a 	strb.w	r3, [r4, #1322]	; 0x52a
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8003f64:	f894 3121 	ldrb.w	r3, [r4, #289]	; 0x121
 8003f68:	f884 352b 	strb.w	r3, [r4, #1323]	; 0x52b
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8003f6c:	f894 3122 	ldrb.w	r3, [r4, #290]	; 0x122
 8003f70:	f884 352c 	strb.w	r3, [r4, #1324]	; 0x52c
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8003f74:	f894 3123 	ldrb.w	r3, [r4, #291]	; 0x123
 8003f78:	f884 352d 	strb.w	r3, [r4, #1325]	; 0x52d
  if (length > 8U)
 8003f7c:	d91b      	bls.n	8003fb6 <USBH_Get_DevDesc+0x8c>
    dev_desc->idVendor           = LE16(buf +  8);
 8003f7e:	f8b4 3124 	ldrh.w	r3, [r4, #292]	; 0x124
 8003f82:	f8a4 352e 	strh.w	r3, [r4, #1326]	; 0x52e
    dev_desc->idProduct          = LE16(buf + 10);
 8003f86:	f8b4 3126 	ldrh.w	r3, [r4, #294]	; 0x126
 8003f8a:	f8a4 3530 	strh.w	r3, [r4, #1328]	; 0x530
    dev_desc->bcdDevice          = LE16(buf + 12);
 8003f8e:	f8b4 3128 	ldrh.w	r3, [r4, #296]	; 0x128
 8003f92:	f8a4 3532 	strh.w	r3, [r4, #1330]	; 0x532
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8003f96:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8003f9a:	f884 3534 	strb.w	r3, [r4, #1332]	; 0x534
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8003f9e:	f894 312b 	ldrb.w	r3, [r4, #299]	; 0x12b
 8003fa2:	f884 3535 	strb.w	r3, [r4, #1333]	; 0x535
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8003fa6:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
 8003faa:	f884 3536 	strb.w	r3, [r4, #1334]	; 0x536
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8003fae:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 8003fb2:	f884 3537 	strb.w	r3, [r4, #1335]	; 0x537
}
 8003fb6:	b003      	add	sp, #12
 8003fb8:	bd30      	pop	{r4, r5, pc}

08003fba <USBH_Get_CfgDesc>:
{
 8003fba:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8003fbe:	f100 051c 	add.w	r5, r0, #28
{
 8003fc2:	460e      	mov	r6, r1
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8003fc4:	9100      	str	r1, [sp, #0]
 8003fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fca:	462b      	mov	r3, r5
 8003fcc:	2100      	movs	r1, #0
{
 8003fce:	4604      	mov	r4, r0
  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8003fd0:	f7ff ff90 	bl	8003ef4 <USBH_GetDescriptor>
 8003fd4:	bb48      	cbnz	r0, 800402a <USBH_Get_CfgDesc+0x70>
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8003fd6:	7f23      	ldrb	r3, [r4, #28]
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8003fd8:	2e09      	cmp	r6, #9
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8003fda:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8003fde:	f884 3538 	strb.w	r3, [r4, #1336]	; 0x538
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8003fe2:	7f63      	ldrb	r3, [r4, #29]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 8003fe4:	f8a4 e53a 	strh.w	lr, [r4, #1338]	; 0x53a
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8003fe8:	f884 3539 	strb.w	r3, [r4, #1337]	; 0x539
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8003fec:	f894 3020 	ldrb.w	r3, [r4, #32]
 8003ff0:	f884 353c 	strb.w	r3, [r4, #1340]	; 0x53c
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8003ff4:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8003ff8:	f884 353d 	strb.w	r3, [r4, #1341]	; 0x53d
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8003ffc:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8004000:	f884 353e 	strb.w	r3, [r4, #1342]	; 0x53e
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8004004:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8004008:	f884 353f 	strb.w	r3, [r4, #1343]	; 0x53f
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800400c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8004010:	f884 3540 	strb.w	r3, [r4, #1344]	; 0x540
  if (length > USB_CONFIGURATION_DESC_SIZE)
 8004014:	d909      	bls.n	800402a <USBH_Get_CfgDesc+0x70>
 8004016:	4627      	mov	r7, r4
 8004018:	462b      	mov	r3, r5
 800401a:	4606      	mov	r6, r0
 800401c:	2209      	movs	r2, #9
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800401e:	f04f 0c32 	mov.w	ip, #50	; 0x32
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8004022:	2e0a      	cmp	r6, #10
 8004024:	d001      	beq.n	800402a <USBH_Get_CfgDesc+0x70>
 8004026:	4596      	cmp	lr, r2
 8004028:	d802      	bhi.n	8004030 <USBH_Get_CfgDesc+0x76>
}
 800402a:	b003      	add	sp, #12
 800402c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004030:	7819      	ldrb	r1, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8004032:	440b      	add	r3, r1
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004034:	440a      	add	r2, r1
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 8004036:	7859      	ldrb	r1, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004038:	b292      	uxth	r2, r2
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800403a:	2904      	cmp	r1, #4
 800403c:	d1f1      	bne.n	8004022 <USBH_Get_CfgDesc+0x68>
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800403e:	7819      	ldrb	r1, [r3, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8004040:	fb0c f806 	mul.w	r8, ip, r6
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8004044:	f887 1542 	strb.w	r1, [r7, #1346]	; 0x542
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8004048:	7859      	ldrb	r1, [r3, #1]
 800404a:	f887 1543 	strb.w	r1, [r7, #1347]	; 0x543
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800404e:	7899      	ldrb	r1, [r3, #2]
 8004050:	f887 1544 	strb.w	r1, [r7, #1348]	; 0x544
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8004054:	78d9      	ldrb	r1, [r3, #3]
 8004056:	f887 1545 	strb.w	r1, [r7, #1349]	; 0x545
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800405a:	7919      	ldrb	r1, [r3, #4]
 800405c:	f887 1546 	strb.w	r1, [r7, #1350]	; 0x546
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8004060:	7959      	ldrb	r1, [r3, #5]
 8004062:	f887 1547 	strb.w	r1, [r7, #1351]	; 0x547
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8004066:	7999      	ldrb	r1, [r3, #6]
 8004068:	f887 1548 	strb.w	r1, [r7, #1352]	; 0x548
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800406c:	79d9      	ldrb	r1, [r3, #7]
 800406e:	f887 1549 	strb.w	r1, [r7, #1353]	; 0x549
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8004072:	7a19      	ldrb	r1, [r3, #8]
 8004074:	f887 154a 	strb.w	r1, [r7, #1354]	; 0x54a
        ep_ix = 0U;
 8004078:	2100      	movs	r1, #0
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800407a:	f897 5546 	ldrb.w	r5, [r7, #1350]	; 0x546
 800407e:	428d      	cmp	r5, r1
 8004080:	d802      	bhi.n	8004088 <USBH_Get_CfgDesc+0xce>
 8004082:	3601      	adds	r6, #1
 8004084:	3732      	adds	r7, #50	; 0x32
 8004086:	e7cc      	b.n	8004022 <USBH_Get_CfgDesc+0x68>
 8004088:	4596      	cmp	lr, r2
 800408a:	d9fa      	bls.n	8004082 <USBH_Get_CfgDesc+0xc8>
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800408c:	781d      	ldrb	r5, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800408e:	442b      	add	r3, r5
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004090:	442a      	add	r2, r5
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004092:	785d      	ldrb	r5, [r3, #1]
  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8004094:	b292      	uxth	r2, r2
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 8004096:	2d05      	cmp	r5, #5
 8004098:	d1ef      	bne.n	800407a <USBH_Get_CfgDesc+0xc0>
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800409a:	1c4d      	adds	r5, r1, #1
 800409c:	f893 9000 	ldrb.w	r9, [r3]
 80040a0:	eb08 01c5 	add.w	r1, r8, r5, lsl #3
 80040a4:	4421      	add	r1, r4
 80040a6:	f881 9544 	strb.w	r9, [r1, #1348]	; 0x544
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80040aa:	f893 9001 	ldrb.w	r9, [r3, #1]
 80040ae:	f881 9545 	strb.w	r9, [r1, #1349]	; 0x545
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80040b2:	f893 9002 	ldrb.w	r9, [r3, #2]
 80040b6:	f881 9546 	strb.w	r9, [r1, #1350]	; 0x546
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80040ba:	f893 9003 	ldrb.w	r9, [r3, #3]
 80040be:	f881 9547 	strb.w	r9, [r1, #1351]	; 0x547
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80040c2:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 80040c6:	f8a1 9548 	strh.w	r9, [r1, #1352]	; 0x548
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80040ca:	f893 9006 	ldrb.w	r9, [r3, #6]
 80040ce:	f881 954a 	strb.w	r9, [r1, #1354]	; 0x54a
            ep_ix++;
 80040d2:	b2e9      	uxtb	r1, r5
 80040d4:	e7d1      	b.n	800407a <USBH_Get_CfgDesc+0xc0>

080040d6 <USBH_Get_StringDesc>:
{
 80040d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
                                   phost->device.Data, length)) == USBH_OK)
 80040d8:	f500 758e 	add.w	r5, r0, #284	; 0x11c
{
 80040dc:	4614      	mov	r4, r2
 80040de:	461f      	mov	r7, r3
  if ((status = USBH_GetDescriptor(phost,
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	f441 7240 	orr.w	r2, r1, #768	; 0x300
 80040e6:	462b      	mov	r3, r5
 80040e8:	2100      	movs	r1, #0
{
 80040ea:	4606      	mov	r6, r0
  if ((status = USBH_GetDescriptor(phost,
 80040ec:	f7ff ff02 	bl	8003ef4 <USBH_GetDescriptor>
 80040f0:	b978      	cbnz	r0, 8004112 <USBH_Get_StringDesc+0x3c>
  if (psrc[1] == USB_DESC_TYPE_STRING)
 80040f2:	f896 311d 	ldrb.w	r3, [r6, #285]	; 0x11d
 80040f6:	2b03      	cmp	r3, #3
 80040f8:	d10b      	bne.n	8004112 <USBH_Get_StringDesc+0x3c>
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80040fa:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
    for (idx = 0U; idx < strlength; idx += 2U)
 80040fe:	4602      	mov	r2, r0
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8004100:	3b02      	subs	r3, #2
 8004102:	42bb      	cmp	r3, r7
 8004104:	bf28      	it	cs
 8004106:	463b      	movcs	r3, r7
 8004108:	b29b      	uxth	r3, r3
    for (idx = 0U; idx < strlength; idx += 2U)
 800410a:	4293      	cmp	r3, r2
 800410c:	d803      	bhi.n	8004116 <USBH_Get_StringDesc+0x40>
    *pdest = 0U; /* mark end of string */
 800410e:	2300      	movs	r3, #0
 8004110:	7023      	strb	r3, [r4, #0]
}
 8004112:	b003      	add	sp, #12
 8004114:	bdf0      	pop	{r4, r5, r6, r7, pc}
      *pdest =  psrc[idx];
 8004116:	18a9      	adds	r1, r5, r2
    for (idx = 0U; idx < strlength; idx += 2U)
 8004118:	3202      	adds	r2, #2
      *pdest =  psrc[idx];
 800411a:	7889      	ldrb	r1, [r1, #2]
    for (idx = 0U; idx < strlength; idx += 2U)
 800411c:	b292      	uxth	r2, r2
      *pdest =  psrc[idx];
 800411e:	f804 1b01 	strb.w	r1, [r4], #1
 8004122:	e7f2      	b.n	800410a <USBH_Get_StringDesc+0x34>

08004124 <USBH_SetAddress>:
  if (phost->RequestState == CMD_SEND)
 8004124:	7883      	ldrb	r3, [r0, #2]
 8004126:	2b01      	cmp	r3, #1
 8004128:	d106      	bne.n	8004138 <USBH_SetAddress+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800412a:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800412c:	2205      	movs	r2, #5
    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800412e:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8004130:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8004132:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8004134:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004136:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004138:	2200      	movs	r2, #0
 800413a:	4611      	mov	r1, r2
 800413c:	f7ff bdd8 	b.w	8003cf0 <USBH_CtlReq>

08004140 <USBH_SetCfg>:
  if (phost->RequestState == CMD_SEND)
 8004140:	7883      	ldrb	r3, [r0, #2]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d106      	bne.n	8004154 <USBH_SetCfg+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004146:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8004148:	2209      	movs	r2, #9
    phost->Control.setup.b.wValue.w = cfg_idx;
 800414a:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800414c:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800414e:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8004150:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8004152:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004154:	2200      	movs	r2, #0
 8004156:	4611      	mov	r1, r2
 8004158:	f7ff bdca 	b.w	8003cf0 <USBH_CtlReq>

0800415c <USBH_SetInterface>:
  if (phost->RequestState == CMD_SEND)
 800415c:	7883      	ldrb	r3, [r0, #2]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d106      	bne.n	8004170 <USBH_SetInterface+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8004162:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8004164:	230b      	movs	r3, #11
    phost->Control.setup.b.wValue.w = altSetting;
 8004166:	8242      	strh	r2, [r0, #18]
    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 8004168:	7443      	strb	r3, [r0, #17]
    phost->Control.setup.b.wLength.w = 0U;
 800416a:	2300      	movs	r3, #0
    phost->Control.setup.b.wIndex.w = ep_num;
 800416c:	8281      	strh	r1, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800416e:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 8004170:	2200      	movs	r2, #0
 8004172:	4611      	mov	r1, r2
 8004174:	f7ff bdbc 	b.w	8003cf0 <USBH_CtlReq>

08004178 <USBH_SetFeature>:
  if (phost->RequestState == CMD_SEND)
 8004178:	7883      	ldrb	r3, [r0, #2]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d106      	bne.n	800418c <USBH_SetFeature+0x14>
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800417e:	2300      	movs	r3, #0
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004180:	2203      	movs	r2, #3
    phost->Control.setup.b.wValue.w = wValue;
 8004182:	8241      	strh	r1, [r0, #18]
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8004184:	7403      	strb	r3, [r0, #16]
    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8004186:	7442      	strb	r2, [r0, #17]
    phost->Control.setup.b.wIndex.w = 0U;
 8004188:	8283      	strh	r3, [r0, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800418a:	82c3      	strh	r3, [r0, #22]
  return USBH_CtlReq(phost, 0U, 0U);
 800418c:	2200      	movs	r2, #0
 800418e:	4611      	mov	r1, r2
 8004190:	f7ff bdae 	b.w	8003cf0 <USBH_CtlReq>

08004194 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8004194:	b530      	push	{r4, r5, lr}

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8004196:	2308      	movs	r3, #8
{
 8004198:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800419a:	2400      	movs	r4, #0
{
 800419c:	4615      	mov	r5, r2
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800419e:	9302      	str	r3, [sp, #8]
 80041a0:	9101      	str	r1, [sp, #4]
 80041a2:	4623      	mov	r3, r4
 80041a4:	9403      	str	r4, [sp, #12]
 80041a6:	4622      	mov	r2, r4
 80041a8:	9400      	str	r4, [sp, #0]
 80041aa:	4629      	mov	r1, r5
 80041ac:	f003 f9aa 	bl	8007504 <USBH_LL_SubmitURB>
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
}
 80041b0:	4620      	mov	r0, r4
 80041b2:	b005      	add	sp, #20
 80041b4:	bd30      	pop	{r4, r5, pc}

080041b6 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80041b6:	b530      	push	{r4, r5, lr}
  if (phost->device.speed != USBH_SPEED_HIGH)
 80041b8:	f890 551d 	ldrb.w	r5, [r0, #1309]	; 0x51d
{
 80041bc:	b085      	sub	sp, #20
 80041be:	461c      	mov	r4, r3
  if (phost->device.speed != USBH_SPEED_HIGH)
 80041c0:	2d00      	cmp	r5, #0
{
 80041c2:	f89d 3020 	ldrb.w	r3, [sp, #32]
  {
    do_ping = 0U;
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80041c6:	9202      	str	r2, [sp, #8]
    do_ping = 0U;
 80041c8:	bf18      	it	ne
 80041ca:	2300      	movne	r3, #0
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80041cc:	9101      	str	r1, [sp, #4]
 80041ce:	4621      	mov	r1, r4
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	2301      	movs	r3, #1
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	2300      	movs	r3, #0
 80041d8:	461a      	mov	r2, r3
 80041da:	f003 f993 	bl	8007504 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
}
 80041de:	2000      	movs	r0, #0
 80041e0:	b005      	add	sp, #20
 80041e2:	bd30      	pop	{r4, r5, pc}

080041e4 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80041e4:	b530      	push	{r4, r5, lr}
 80041e6:	b085      	sub	sp, #20
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80041e8:	2400      	movs	r4, #0
{
 80041ea:	461d      	mov	r5, r3
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80041ec:	9202      	str	r2, [sp, #8]
 80041ee:	2201      	movs	r2, #1
 80041f0:	9101      	str	r1, [sp, #4]
 80041f2:	4623      	mov	r3, r4
 80041f4:	9403      	str	r4, [sp, #12]
 80041f6:	4629      	mov	r1, r5
 80041f8:	9200      	str	r2, [sp, #0]
 80041fa:	f003 f983 	bl	8007504 <USBH_LL_SubmitURB>
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;

}
 80041fe:	4620      	mov	r0, r4
 8004200:	b005      	add	sp, #20
 8004202:	bd30      	pop	{r4, r5, pc}

08004204 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8004204:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8004206:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800420a:	9402      	str	r4, [sp, #8]
 800420c:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8004210:	9401      	str	r4, [sp, #4]
 8004212:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8004216:	9400      	str	r4, [sp, #0]
 8004218:	f003 f94e 	bl	80074b8 <USBH_LL_OpenPipe>

  return USBH_OK;
}
 800421c:	2000      	movs	r0, #0
 800421e:	b004      	add	sp, #16
 8004220:	bd10      	pop	{r4, pc}

08004222 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8004222:	b508      	push	{r3, lr}
  USBH_LL_ClosePipe(phost, pipe_num);
 8004224:	f003 f960 	bl	80074e8 <USBH_LL_ClosePipe>

  return USBH_OK;
}
 8004228:	2000      	movs	r0, #0
 800422a:	bd08      	pop	{r3, pc}

0800422c <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800422c:	f200 7244 	addw	r2, r0, #1860	; 0x744
 8004230:	2300      	movs	r3, #0
 8004232:	b530      	push	{r4, r5, lr}
{
  uint8_t idx = 0U;

  for (idx = 0U ; idx < 11U ; idx++)
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8004234:	f852 5b04 	ldr.w	r5, [r2], #4
 8004238:	b2dc      	uxtb	r4, r3
 800423a:	042d      	lsls	r5, r5, #16
 800423c:	d408      	bmi.n	8004250 <USBH_AllocPipe+0x24>
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 800423e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004242:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
    {
      return (uint16_t)idx;
 8004246:	b2a3      	uxth	r3, r4
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8004248:	f8c0 1744 	str.w	r1, [r0, #1860]	; 0x744
}
 800424c:	b2d8      	uxtb	r0, r3
 800424e:	bd30      	pop	{r4, r5, pc}
 8004250:	3301      	adds	r3, #1
  for (idx = 0U ; idx < 11U ; idx++)
 8004252:	2b0b      	cmp	r3, #11
 8004254:	d1ee      	bne.n	8004234 <USBH_AllocPipe+0x8>
    }
  }

  return 0xFFFFU;
 8004256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800425a:	e7f7      	b.n	800424c <USBH_AllocPipe+0x20>

0800425c <USBH_FreePipe>:
  if (idx < 11U)
 800425c:	290a      	cmp	r1, #10
 800425e:	bf9f      	itttt	ls
 8004260:	eb00 0081 	addls.w	r0, r0, r1, lsl #2
    phost->Pipes[idx] &= 0x7FFFU;
 8004264:	f8d0 3744 	ldrls.w	r3, [r0, #1860]	; 0x744
 8004268:	f3c3 030e 	ubfxls	r3, r3, #0, #15
 800426c:	f8c0 3744 	strls.w	r3, [r0, #1860]	; 0x744
}
 8004270:	2000      	movs	r0, #0
 8004272:	4770      	bx	lr

08004274 <FATFS_LinkDriverEx>:
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
  uint8_t ret = 1;
  uint8_t DiskNum = 0;

  if(disk.nbr < _VOLUMES)
 8004274:	4b0f      	ldr	r3, [pc, #60]	; (80042b4 <FATFS_LinkDriverEx+0x40>)
{
 8004276:	b530      	push	{r4, r5, lr}
  if(disk.nbr < _VOLUMES)
 8004278:	7a5d      	ldrb	r5, [r3, #9]
 800427a:	f005 04ff 	and.w	r4, r5, #255	; 0xff
 800427e:	b9b5      	cbnz	r5, 80042ae <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004280:	7a5d      	ldrb	r5, [r3, #9]
 8004282:	555c      	strb	r4, [r3, r5]
    disk.drv[disk.nbr] = drv;
 8004284:	7a5d      	ldrb	r5, [r3, #9]
 8004286:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800428a:	6068      	str	r0, [r5, #4]
    disk.lun[disk.nbr] = lun;
 800428c:	7a58      	ldrb	r0, [r3, #9]
 800428e:	4418      	add	r0, r3
 8004290:	7202      	strb	r2, [r0, #8]
    DiskNum = disk.nbr++;
 8004292:	7a5a      	ldrb	r2, [r3, #9]
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	1c50      	adds	r0, r2, #1
    path[0] = DiskNum + '0';
 8004298:	3230      	adds	r2, #48	; 0x30
    DiskNum = disk.nbr++;
 800429a:	b2c0      	uxtb	r0, r0
 800429c:	7258      	strb	r0, [r3, #9]
    path[1] = ':';
 800429e:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 80042a0:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
    path[3] = 0;
 80042a2:	4620      	mov	r0, r4
    path[1] = ':';
 80042a4:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 80042a6:	232f      	movs	r3, #47	; 0x2f
    path[3] = 0;
 80042a8:	70cc      	strb	r4, [r1, #3]
    path[2] = '/';
 80042aa:	708b      	strb	r3, [r1, #2]
 80042ac:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 80042ae:	2001      	movs	r0, #1
    ret = 0;
  }

  return ret;
}
 80042b0:	bd30      	pop	{r4, r5, pc}
 80042b2:	bf00      	nop
 80042b4:	200002a8 	.word	0x200002a8

080042b8 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 80042b8:	2200      	movs	r2, #0
 80042ba:	f7ff bfdb 	b.w	8004274 <FATFS_LinkDriverEx>

080042be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80042be:	b570      	push	{r4, r5, r6, lr}
 80042c0:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042c2:	6946      	ldr	r6, [r0, #20]
{
 80042c4:	460b      	mov	r3, r1
 80042c6:	b086      	sub	sp, #24
 80042c8:	6840      	ldr	r0, [r0, #4]
 80042ca:	6829      	ldr	r1, [r5, #0]
 80042cc:	692a      	ldr	r2, [r5, #16]
 80042ce:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80042d2:	b176      	cbz	r6, 80042f2 <osThreadCreate+0x34>
 80042d4:	69ad      	ldr	r5, [r5, #24]
 80042d6:	b165      	cbz	r5, 80042f2 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80042d8:	2c84      	cmp	r4, #132	; 0x84
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042da:	9502      	str	r5, [sp, #8]
    fpriority += (priority - osPriorityIdle);
 80042dc:	bf14      	ite	ne
 80042de:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042e0:	2400      	moveq	r4, #0
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042e2:	e88d 0050 	stmia.w	sp, {r4, r6}
 80042e6:	f000 ff7a 	bl	80051de <xTaskCreateStatic>
 80042ea:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80042ec:	9805      	ldr	r0, [sp, #20]
}
 80042ee:	b006      	add	sp, #24
 80042f0:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80042f2:	2c84      	cmp	r4, #132	; 0x84
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042f4:	ad05      	add	r5, sp, #20
 80042f6:	b292      	uxth	r2, r2
    fpriority += (priority - osPriorityIdle);
 80042f8:	bf14      	ite	ne
 80042fa:	3403      	addne	r4, #3
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80042fc:	2400      	moveq	r4, #0
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80042fe:	e88d 0030 	stmia.w	sp, {r4, r5}
 8004302:	f000 ffa1 	bl	8005248 <xTaskCreate>
 8004306:	2801      	cmp	r0, #1
 8004308:	d0f0      	beq.n	80042ec <osThreadCreate+0x2e>
      return NULL;
 800430a:	2000      	movs	r0, #0
 800430c:	e7ef      	b.n	80042ee <osThreadCreate+0x30>

0800430e <osDelay>:
osStatus osDelay (uint32_t millisec)
{
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800430e:	2800      	cmp	r0, #0
 8004310:	bf08      	it	eq
 8004312:	2001      	moveq	r0, #1
{
 8004314:	b508      	push	{r3, lr}
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004316:	f001 f947 	bl	80055a8 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800431a:	2000      	movs	r0, #0
 800431c:	bd08      	pop	{r3, pc}

0800431e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800431e:	b507      	push	{r0, r1, r2, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004320:	6882      	ldr	r2, [r0, #8]
 8004322:	b14a      	cbz	r2, 8004338 <osMessageCreate+0x1a>
 8004324:	68c3      	ldr	r3, [r0, #12]
 8004326:	b13b      	cbz	r3, 8004338 <osMessageCreate+0x1a>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004328:	2100      	movs	r1, #0
 800432a:	9100      	str	r1, [sp, #0]
 800432c:	c803      	ldmia	r0, {r0, r1}
 800432e:	f000 fb73 	bl	8004a18 <xQueueGenericCreateStatic>
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004332:	b003      	add	sp, #12
 8004334:	f85d fb04 	ldr.w	pc, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004338:	2200      	movs	r2, #0
 800433a:	c803      	ldmia	r0, {r0, r1}
}
 800433c:	b003      	add	sp, #12
 800433e:	f85d eb04 	ldr.w	lr, [sp], #4
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004342:	f000 bbbd 	b.w	8004ac0 <xQueueGenericCreate>
	...

08004348 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  portBASE_TYPE taskWoken = pdFALSE;
 800434a:	2400      	movs	r4, #0
{
 800434c:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800434e:	9403      	str	r4, [sp, #12]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
 8004350:	42a2      	cmp	r2, r4
 8004352:	bf08      	it	eq
 8004354:	2201      	moveq	r2, #1
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004356:	f3ef 8305 	mrs	r3, IPSR
  }
  
  if (inHandlerMode()) {
 800435a:	b1ab      	cbz	r3, 8004388 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800435c:	4623      	mov	r3, r4
 800435e:	aa03      	add	r2, sp, #12
 8004360:	a901      	add	r1, sp, #4
 8004362:	f000 fc91 	bl	8004c88 <xQueueGenericSendFromISR>
 8004366:	2801      	cmp	r0, #1
 8004368:	d002      	beq.n	8004370 <osMessagePut+0x28>
      return osErrorOS;
 800436a:	20ff      	movs	r0, #255	; 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800436c:	b004      	add	sp, #16
 800436e:	bd10      	pop	{r4, pc}
    portEND_SWITCHING_ISR(taskWoken);
 8004370:	9b03      	ldr	r3, [sp, #12]
 8004372:	b13b      	cbz	r3, 8004384 <osMessagePut+0x3c>
 8004374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <osMessagePut+0x4c>)
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	f3bf 8f6f 	isb	sy
  return osOK;
 8004384:	2000      	movs	r0, #0
 8004386:	e7f1      	b.n	800436c <osMessagePut+0x24>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004388:	a901      	add	r1, sp, #4
 800438a:	f000 fbbf 	bl	8004b0c <xQueueGenericSend>
 800438e:	2801      	cmp	r0, #1
 8004390:	d1eb      	bne.n	800436a <osMessagePut+0x22>
 8004392:	e7f7      	b.n	8004384 <osMessagePut+0x3c>
 8004394:	e000ed04 	.word	0xe000ed04

08004398 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004398:	b5f0      	push	{r4, r5, r6, r7, lr}
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800439a:	2600      	movs	r6, #0
{
 800439c:	b085      	sub	sp, #20
 800439e:	4604      	mov	r4, r0
 80043a0:	4617      	mov	r7, r2
 80043a2:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 80043a4:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 80043a6:	9602      	str	r6, [sp, #8]
 80043a8:	ad01      	add	r5, sp, #4
  
  if (queue_id == NULL) {
 80043aa:	b911      	cbnz	r1, 80043b2 <osMessageGet+0x1a>
    event.status = osErrorParameter;
 80043ac:	2380      	movs	r3, #128	; 0x80
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	e016      	b.n	80043e0 <osMessageGet+0x48>
  taskWoken = pdFALSE;
 80043b2:	9600      	str	r6, [sp, #0]
 80043b4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 80043b8:	b1cb      	cbz	r3, 80043ee <osMessageGet+0x56>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80043ba:	466a      	mov	r2, sp
 80043bc:	a902      	add	r1, sp, #8
 80043be:	f000 fd77 	bl	8004eb0 <xQueueReceiveFromISR>
 80043c2:	2801      	cmp	r0, #1
      event.status = osEventMessage;
 80043c4:	bf0a      	itet	eq
 80043c6:	2310      	moveq	r3, #16
      event.status = osOK;
 80043c8:	9601      	strne	r6, [sp, #4]
      event.status = osEventMessage;
 80043ca:	9301      	streq	r3, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80043cc:	9b00      	ldr	r3, [sp, #0]
 80043ce:	b13b      	cbz	r3, 80043e0 <osMessageGet+0x48>
 80043d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d4:	4b0c      	ldr	r3, [pc, #48]	; (8004408 <osMessageGet+0x70>)
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
    }
  }
  
  return event;
 80043e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80043e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80043e8:	4620      	mov	r0, r4
 80043ea:	b005      	add	sp, #20
 80043ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80043ee:	a902      	add	r1, sp, #8
 80043f0:	f000 fcb4 	bl	8004d5c <xQueueReceive>
 80043f4:	2801      	cmp	r0, #1
 80043f6:	d101      	bne.n	80043fc <osMessageGet+0x64>
      event.status = osEventMessage;
 80043f8:	2310      	movs	r3, #16
 80043fa:	e7d8      	b.n	80043ae <osMessageGet+0x16>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80043fc:	2f00      	cmp	r7, #0
 80043fe:	bf0c      	ite	eq
 8004400:	2300      	moveq	r3, #0
 8004402:	2340      	movne	r3, #64	; 0x40
 8004404:	e7d3      	b.n	80043ae <osMessageGet+0x16>
 8004406:	bf00      	nop
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800440c:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004410:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004414:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004416:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004418:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800441a:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800441c:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800441e:	6003      	str	r3, [r0, #0]
 8004420:	4770      	bx	lr

08004422 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	6103      	str	r3, [r0, #16]
 8004426:	4770      	bx	lr

08004428 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8004428:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800442a:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800442c:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800442e:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004434:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004436:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004438:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800443a:	3301      	adds	r3, #1
 800443c:	6003      	str	r3, [r0, #0]
 800443e:	4770      	bx	lr

08004440 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004440:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004442:	1c53      	adds	r3, r2, #1
{
 8004444:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 8004446:	d10a      	bne.n	800445e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004448:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800444e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004450:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8004452:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 8004454:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 8004456:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8004458:	3301      	adds	r3, #1
 800445a:	6003      	str	r3, [r0, #0]
 800445c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800445e:	f100 0308 	add.w	r3, r0, #8
 8004462:	685c      	ldr	r4, [r3, #4]
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	42aa      	cmp	r2, r5
 8004468:	d3ef      	bcc.n	800444a <vListInsert+0xa>
 800446a:	4623      	mov	r3, r4
 800446c:	e7f9      	b.n	8004462 <vListInsert+0x22>

0800446e <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800446e:	6841      	ldr	r1, [r0, #4]
 8004470:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 8004472:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004474:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004476:	6882      	ldr	r2, [r0, #8]
 8004478:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800447a:	6859      	ldr	r1, [r3, #4]
 800447c:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800447e:	bf08      	it	eq
 8004480:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004482:	2200      	movs	r2, #0
 8004484:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	3a01      	subs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800448c:	6818      	ldr	r0, [r3, #0]
}
 800448e:	4770      	bx	lr

08004490 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0;
 8004490:	2300      	movs	r3, #0
{
 8004492:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 8004494:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004496:	4b0f      	ldr	r3, [pc, #60]	; (80044d4 <prvTaskExitError+0x44>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	3301      	adds	r3, #1
 800449c:	d00a      	beq.n	80044b4 <prvTaskExitError+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	b672      	cpsid	i
 80044a4:	f383 8811 	msr	BASEPRI, r3
 80044a8:	f3bf 8f6f 	isb	sy
 80044ac:	f3bf 8f4f 	dsb	sy
 80044b0:	b662      	cpsie	i
 80044b2:	e7fe      	b.n	80044b2 <prvTaskExitError+0x22>
 80044b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b8:	b672      	cpsid	i
 80044ba:	f383 8811 	msr	BASEPRI, r3
 80044be:	f3bf 8f6f 	isb	sy
 80044c2:	f3bf 8f4f 	dsb	sy
 80044c6:	b662      	cpsie	i
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80044c8:	9b01      	ldr	r3, [sp, #4]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0fc      	beq.n	80044c8 <prvTaskExitError+0x38>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80044ce:	b002      	add	sp, #8
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000040 	.word	0x20000040

080044d8 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044dc:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044e0:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80044e4:	3844      	subs	r0, #68	; 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044e6:	6403      	str	r3, [r0, #64]	; 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044e8:	4b03      	ldr	r3, [pc, #12]	; (80044f8 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044ea:	63c1      	str	r1, [r0, #60]	; 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044ec:	6383      	str	r3, [r0, #56]	; 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80044ee:	f06f 0302 	mvn.w	r3, #2
 80044f2:	6203      	str	r3, [r0, #32]
}
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	08004491 	.word	0x08004491
 80044fc:	00000000 	.word	0x00000000

08004500 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004500:	4b07      	ldr	r3, [pc, #28]	; (8004520 <pxCurrentTCBConst2>)
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	6808      	ldr	r0, [r1, #0]
 8004506:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800450a:	f380 8809 	msr	PSP, r0
 800450e:	f3bf 8f6f 	isb	sy
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8811 	msr	BASEPRI, r0
 800451a:	4770      	bx	lr
 800451c:	f3af 8000 	nop.w

08004520 <pxCurrentTCBConst2>:
 8004520:	20003ed4 	.word	0x20003ed4

08004524 <vPortEnterCritical>:
 8004524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004528:	b672      	cpsid	i
 800452a:	f383 8811 	msr	BASEPRI, r3
 800452e:	f3bf 8f6f 	isb	sy
 8004532:	f3bf 8f4f 	dsb	sy
 8004536:	b662      	cpsie	i
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004538:	4a0b      	ldr	r2, [pc, #44]	; (8004568 <vPortEnterCritical+0x44>)
 800453a:	6813      	ldr	r3, [r2, #0]
 800453c:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800453e:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8004540:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8004542:	d10f      	bne.n	8004564 <vPortEnterCritical+0x40>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <vPortEnterCritical+0x48>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f013 0fff 	tst.w	r3, #255	; 0xff
 800454c:	d00a      	beq.n	8004564 <vPortEnterCritical+0x40>
 800454e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004552:	b672      	cpsid	i
 8004554:	f383 8811 	msr	BASEPRI, r3
 8004558:	f3bf 8f6f 	isb	sy
 800455c:	f3bf 8f4f 	dsb	sy
 8004560:	b662      	cpsie	i
 8004562:	e7fe      	b.n	8004562 <vPortEnterCritical+0x3e>
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20000040 	.word	0x20000040
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <vPortExitCritical>:
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8004570:	4a09      	ldr	r2, [pc, #36]	; (8004598 <vPortExitCritical+0x28>)
 8004572:	6813      	ldr	r3, [r2, #0]
 8004574:	b953      	cbnz	r3, 800458c <vPortExitCritical+0x1c>
 8004576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800457a:	b672      	cpsid	i
 800457c:	f383 8811 	msr	BASEPRI, r3
 8004580:	f3bf 8f6f 	isb	sy
 8004584:	f3bf 8f4f 	dsb	sy
 8004588:	b662      	cpsie	i
 800458a:	e7fe      	b.n	800458a <vPortExitCritical+0x1a>
	uxCriticalNesting--;
 800458c:	3b01      	subs	r3, #1
 800458e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004590:	b90b      	cbnz	r3, 8004596 <vPortExitCritical+0x26>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	4770      	bx	lr
 8004598:	20000040 	.word	0x20000040
 800459c:	00000000 	.word	0x00000000

080045a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80045a0:	f3ef 8009 	mrs	r0, PSP
 80045a4:	f3bf 8f6f 	isb	sy
 80045a8:	4b15      	ldr	r3, [pc, #84]	; (8004600 <pxCurrentTCBConst>)
 80045aa:	681a      	ldr	r2, [r3, #0]
 80045ac:	f01e 0f10 	tst.w	lr, #16
 80045b0:	bf08      	it	eq
 80045b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80045b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ba:	6010      	str	r0, [r2, #0]
 80045bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80045c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80045c4:	b672      	cpsid	i
 80045c6:	f380 8811 	msr	BASEPRI, r0
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	b662      	cpsie	i
 80045d4:	f001 f80e 	bl	80055f4 <vTaskSwitchContext>
 80045d8:	f04f 0000 	mov.w	r0, #0
 80045dc:	f380 8811 	msr	BASEPRI, r0
 80045e0:	bc09      	pop	{r0, r3}
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	6808      	ldr	r0, [r1, #0]
 80045e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045ea:	f01e 0f10 	tst.w	lr, #16
 80045ee:	bf08      	it	eq
 80045f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80045f4:	f380 8809 	msr	PSP, r0
 80045f8:	f3bf 8f6f 	isb	sy
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <pxCurrentTCBConst>:
 8004600:	20003ed4 	.word	0x20003ed4

08004604 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004604:	b508      	push	{r3, lr}
	__asm volatile
 8004606:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460a:	b672      	cpsid	i
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	b662      	cpsie	i
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800461a:	f000 feb7 	bl	800538c <xTaskIncrementTick>
 800461e:	b118      	cbz	r0, 8004628 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004624:	4b02      	ldr	r3, [pc, #8]	; (8004630 <xPortSysTickHandler+0x2c>)
 8004626:	601a      	str	r2, [r3, #0]
	__asm volatile
 8004628:	2300      	movs	r3, #0
 800462a:	f383 8811 	msr	BASEPRI, r3
 800462e:	bd08      	pop	{r3, pc}
 8004630:	e000ed04 	.word	0xe000ed04

08004634 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004634:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d910      	bls.n	800465e <vPortValidateInterruptPriority+0x2a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800463c:	4a12      	ldr	r2, [pc, #72]	; (8004688 <vPortValidateInterruptPriority+0x54>)
 800463e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004640:	4a12      	ldr	r2, [pc, #72]	; (800468c <vPortValidateInterruptPriority+0x58>)
 8004642:	7812      	ldrb	r2, [r2, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d90a      	bls.n	800465e <vPortValidateInterruptPriority+0x2a>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800464c:	b672      	cpsid	i
 800464e:	f383 8811 	msr	BASEPRI, r3
 8004652:	f3bf 8f6f 	isb	sy
 8004656:	f3bf 8f4f 	dsb	sy
 800465a:	b662      	cpsie	i
 800465c:	e7fe      	b.n	800465c <vPortValidateInterruptPriority+0x28>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <vPortValidateInterruptPriority+0x5c>)
 8004660:	4a0c      	ldr	r2, [pc, #48]	; (8004694 <vPortValidateInterruptPriority+0x60>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6812      	ldr	r2, [r2, #0]
 8004666:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800466a:	4293      	cmp	r3, r2
 800466c:	d90a      	bls.n	8004684 <vPortValidateInterruptPriority+0x50>
 800466e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004672:	b672      	cpsid	i
 8004674:	f383 8811 	msr	BASEPRI, r3
 8004678:	f3bf 8f6f 	isb	sy
 800467c:	f3bf 8f4f 	dsb	sy
 8004680:	b662      	cpsie	i
 8004682:	e7fe      	b.n	8004682 <vPortValidateInterruptPriority+0x4e>
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	e000e3f0 	.word	0xe000e3f0
 800468c:	200002b4 	.word	0x200002b4
 8004690:	e000ed0c 	.word	0xe000ed0c
 8004694:	200002b8 	.word	0x200002b8

08004698 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004698:	4b0f      	ldr	r3, [pc, #60]	; (80046d8 <prvInsertBlockIntoFreeList+0x40>)
{
 800469a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	4282      	cmp	r2, r0
 80046a0:	d318      	bcc.n	80046d4 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046a2:	685c      	ldr	r4, [r3, #4]
 80046a4:	1919      	adds	r1, r3, r4
 80046a6:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046a8:	bf01      	itttt	eq
 80046aa:	6841      	ldreq	r1, [r0, #4]
 80046ac:	4618      	moveq	r0, r3
 80046ae:	1909      	addeq	r1, r1, r4
 80046b0:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046b2:	6844      	ldr	r4, [r0, #4]
 80046b4:	1901      	adds	r1, r0, r4
 80046b6:	428a      	cmp	r2, r1
 80046b8:	d107      	bne.n	80046ca <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ba:	4908      	ldr	r1, [pc, #32]	; (80046dc <prvInsertBlockIntoFreeList+0x44>)
 80046bc:	6809      	ldr	r1, [r1, #0]
 80046be:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046c0:	bf1f      	itttt	ne
 80046c2:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046c4:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046c6:	1909      	addne	r1, r1, r4
 80046c8:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80046ca:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046cc:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046ce:	bf18      	it	ne
 80046d0:	6018      	strne	r0, [r3, #0]
 80046d2:	bd10      	pop	{r4, pc}
 80046d4:	4613      	mov	r3, r2
 80046d6:	e7e1      	b.n	800469c <prvInsertBlockIntoFreeList+0x4>
 80046d8:	20003ecc 	.word	0x20003ecc
 80046dc:	200002bc 	.word	0x200002bc

080046e0 <pvPortMalloc>:
{
 80046e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046e4:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80046e6:	f000 fe49 	bl	800537c <vTaskSuspendAll>
		if( pxEnd == NULL )
 80046ea:	4940      	ldr	r1, [pc, #256]	; (80047ec <pvPortMalloc+0x10c>)
 80046ec:	4d40      	ldr	r5, [pc, #256]	; (80047f0 <pvPortMalloc+0x110>)
 80046ee:	680b      	ldr	r3, [r1, #0]
 80046f0:	bb0b      	cbnz	r3, 8004736 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80046f2:	4a40      	ldr	r2, [pc, #256]	; (80047f4 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80046f4:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80046f6:	4e40      	ldr	r6, [pc, #256]	; (80047f8 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80046f8:	bf1b      	ittet	ne
 80046fa:	1dd0      	addne	r0, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80046fc:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004700:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004704:	f020 0007 	bicne.w	r0, r0, #7
 8004708:	bf1c      	itt	ne
 800470a:	4602      	movne	r2, r0
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800470c:	1a1b      	subne	r3, r3, r0
	xStart.xBlockSize = ( size_t ) 0;
 800470e:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004710:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004712:	6032      	str	r2, [r6, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004714:	6070      	str	r0, [r6, #4]
	uxAddress -= xHeapStructSize;
 8004716:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004718:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800471c:	6018      	str	r0, [r3, #0]
	pxEnd->xBlockSize = 0;
 800471e:	6058      	str	r0, [r3, #4]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004720:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 8004722:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004724:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004726:	4b35      	ldr	r3, [pc, #212]	; (80047fc <pvPortMalloc+0x11c>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004728:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800472a:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800472c:	4b34      	ldr	r3, [pc, #208]	; (8004800 <pvPortMalloc+0x120>)
 800472e:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004730:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004734:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004736:	682f      	ldr	r7, [r5, #0]
 8004738:	4227      	tst	r7, r4
 800473a:	d116      	bne.n	800476a <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 800473c:	2c00      	cmp	r4, #0
 800473e:	d042      	beq.n	80047c6 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 8004740:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004744:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004746:	bf1c      	itt	ne
 8004748:	f023 0307 	bicne.w	r3, r3, #7
 800474c:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800474e:	b163      	cbz	r3, 800476a <pvPortMalloc+0x8a>
 8004750:	4a2b      	ldr	r2, [pc, #172]	; (8004800 <pvPortMalloc+0x120>)
 8004752:	6816      	ldr	r6, [r2, #0]
 8004754:	4690      	mov	r8, r2
 8004756:	42b3      	cmp	r3, r6
 8004758:	d807      	bhi.n	800476a <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 800475a:	4a27      	ldr	r2, [pc, #156]	; (80047f8 <pvPortMalloc+0x118>)
 800475c:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800475e:	6868      	ldr	r0, [r5, #4]
 8004760:	4283      	cmp	r3, r0
 8004762:	d804      	bhi.n	800476e <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8004764:	6809      	ldr	r1, [r1, #0]
 8004766:	428d      	cmp	r5, r1
 8004768:	d107      	bne.n	800477a <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 800476a:	2400      	movs	r4, #0
 800476c:	e02b      	b.n	80047c6 <pvPortMalloc+0xe6>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800476e:	682c      	ldr	r4, [r5, #0]
 8004770:	2c00      	cmp	r4, #0
 8004772:	d0f7      	beq.n	8004764 <pvPortMalloc+0x84>
 8004774:	462a      	mov	r2, r5
 8004776:	4625      	mov	r5, r4
 8004778:	e7f1      	b.n	800475e <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800477a:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800477c:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800477e:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004780:	1ac2      	subs	r2, r0, r3
 8004782:	2a10      	cmp	r2, #16
 8004784:	d911      	bls.n	80047aa <pvPortMalloc+0xca>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004786:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004788:	0741      	lsls	r1, r0, #29
 800478a:	d00a      	beq.n	80047a2 <pvPortMalloc+0xc2>
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	b672      	cpsid	i
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	b662      	cpsie	i
 80047a0:	e7fe      	b.n	80047a0 <pvPortMalloc+0xc0>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80047a2:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80047a4:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80047a6:	f7ff ff77 	bl	8004698 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047aa:	686b      	ldr	r3, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80047ac:	3408      	adds	r4, #8
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047ae:	4913      	ldr	r1, [pc, #76]	; (80047fc <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b0:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047b2:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047b4:	6808      	ldr	r0, [r1, #0]
					pxBlock->pxNextFreeBlock = NULL;
 80047b6:	2300      	movs	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80047b8:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80047bc:	4286      	cmp	r6, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80047be:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80047c0:	602b      	str	r3, [r5, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80047c2:	bf38      	it	cc
 80047c4:	600e      	strcc	r6, [r1, #0]
	( void ) xTaskResumeAll();
 80047c6:	f000 fe75 	bl	80054b4 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80047ca:	0763      	lsls	r3, r4, #29
 80047cc:	d00a      	beq.n	80047e4 <pvPortMalloc+0x104>
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	b672      	cpsid	i
 80047d4:	f383 8811 	msr	BASEPRI, r3
 80047d8:	f3bf 8f6f 	isb	sy
 80047dc:	f3bf 8f4f 	dsb	sy
 80047e0:	b662      	cpsie	i
 80047e2:	e7fe      	b.n	80047e2 <pvPortMalloc+0x102>
}
 80047e4:	4620      	mov	r0, r4
 80047e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ea:	bf00      	nop
 80047ec:	200002bc 	.word	0x200002bc
 80047f0:	20003ec0 	.word	0x20003ec0
 80047f4:	200002c0 	.word	0x200002c0
 80047f8:	20003ecc 	.word	0x20003ecc
 80047fc:	20003ec8 	.word	0x20003ec8
 8004800:	20003ec4 	.word	0x20003ec4

08004804 <vPortFree>:
{
 8004804:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004806:	4604      	mov	r4, r0
 8004808:	2800      	cmp	r0, #0
 800480a:	d032      	beq.n	8004872 <vPortFree+0x6e>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800480c:	4a19      	ldr	r2, [pc, #100]	; (8004874 <vPortFree+0x70>)
 800480e:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	4213      	tst	r3, r2
 8004816:	d10a      	bne.n	800482e <vPortFree+0x2a>
 8004818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481c:	b672      	cpsid	i
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	b662      	cpsie	i
 800482c:	e7fe      	b.n	800482c <vPortFree+0x28>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800482e:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004832:	b151      	cbz	r1, 800484a <vPortFree+0x46>
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	b672      	cpsid	i
 800483a:	f383 8811 	msr	BASEPRI, r3
 800483e:	f3bf 8f6f 	isb	sy
 8004842:	f3bf 8f4f 	dsb	sy
 8004846:	b662      	cpsie	i
 8004848:	e7fe      	b.n	8004848 <vPortFree+0x44>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800484a:	ea23 0302 	bic.w	r3, r3, r2
 800484e:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004852:	f000 fd93 	bl	800537c <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004856:	4a08      	ldr	r2, [pc, #32]	; (8004878 <vPortFree+0x74>)
 8004858:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800485c:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004860:	6811      	ldr	r1, [r2, #0]
 8004862:	440b      	add	r3, r1
 8004864:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004866:	f7ff ff17 	bl	8004698 <prvInsertBlockIntoFreeList>
}
 800486a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800486e:	f000 be21 	b.w	80054b4 <xTaskResumeAll>
 8004872:	bd10      	pop	{r4, pc}
 8004874:	20003ec0 	.word	0x20003ec0
 8004878:	20003ec4 	.word	0x20003ec4

0800487c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800487c:	b510      	push	{r4, lr}
 800487e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004880:	f7ff fe50 	bl	8004524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004884:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004886:	f7ff fe73 	bl	8004570 <vPortExitCritical>

	return xReturn;
}
 800488a:	fab4 f084 	clz	r0, r4
 800488e:	0940      	lsrs	r0, r0, #5
 8004890:	bd10      	pop	{r4, pc}

08004892 <prvCopyDataToQueue>:
{
 8004892:	b570      	push	{r4, r5, r6, lr}
 8004894:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004896:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8004898:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800489a:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800489c:	b942      	cbnz	r2, 80048b0 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800489e:	6805      	ldr	r5, [r0, #0]
 80048a0:	b99d      	cbnz	r5, 80048ca <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048a2:	6880      	ldr	r0, [r0, #8]
 80048a4:	f000 ffa4 	bl	80057f0 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048a8:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80048aa:	3601      	adds	r6, #1
 80048ac:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80048b0:	b96d      	cbnz	r5, 80048ce <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048b2:	6840      	ldr	r0, [r0, #4]
 80048b4:	f002 fee5 	bl	8007682 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048b8:	6863      	ldr	r3, [r4, #4]
 80048ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80048bc:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048be:	68a2      	ldr	r2, [r4, #8]
 80048c0:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80048c2:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048c4:	d301      	bcc.n	80048ca <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c6:	6823      	ldr	r3, [r4, #0]
 80048c8:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 80048ca:	2000      	movs	r0, #0
 80048cc:	e7ed      	b.n	80048aa <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80048ce:	68c0      	ldr	r0, [r0, #12]
 80048d0:	f002 fed7 	bl	8007682 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80048d6:	68e2      	ldr	r2, [r4, #12]
 80048d8:	425b      	negs	r3, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048da:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048dc:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80048de:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80048e0:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80048e2:	bf3e      	ittt	cc
 80048e4:	68a2      	ldrcc	r2, [r4, #8]
 80048e6:	189b      	addcc	r3, r3, r2
 80048e8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80048ea:	2d02      	cmp	r5, #2
 80048ec:	d1ed      	bne.n	80048ca <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80048ee:	b10e      	cbz	r6, 80048f4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80048f0:	3e01      	subs	r6, #1
 80048f2:	e7ea      	b.n	80048ca <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80048f4:	4630      	mov	r0, r6
 80048f6:	e7d8      	b.n	80048aa <prvCopyDataToQueue+0x18>

080048f8 <prvCopyDataFromQueue>:
{
 80048f8:	4603      	mov	r3, r0
 80048fa:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80048fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80048fe:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004900:	b162      	cbz	r2, 800491c <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004902:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004904:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004906:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004908:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800490a:	60d9      	str	r1, [r3, #12]
}
 800490c:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004910:	bf24      	itt	cs
 8004912:	6819      	ldrcs	r1, [r3, #0]
 8004914:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004916:	68d9      	ldr	r1, [r3, #12]
 8004918:	f002 beb3 	b.w	8007682 <memcpy>
}
 800491c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004920:	4770      	bx	lr

08004922 <prvUnlockQueue>:
{
 8004922:	b570      	push	{r4, r5, r6, lr}
 8004924:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8004926:	f7ff fdfd 	bl	8004524 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800492a:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800492e:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8004932:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004934:	2d00      	cmp	r5, #0
 8004936:	dc14      	bgt.n	8004962 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8004938:	23ff      	movs	r3, #255	; 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800493a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800493e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8004942:	f7ff fe15 	bl	8004570 <vPortExitCritical>
	taskENTER_CRITICAL();
 8004946:	f7ff fded 	bl	8004524 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800494a:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
 800494e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004950:	2d00      	cmp	r5, #0
 8004952:	dc12      	bgt.n	800497a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8004954:	23ff      	movs	r3, #255	; 0xff
 8004956:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800495a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800495e:	f7ff be07 	b.w	8004570 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004962:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004964:	2b00      	cmp	r3, #0
 8004966:	d0e7      	beq.n	8004938 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004968:	4630      	mov	r0, r6
 800496a:	f000 fe9b 	bl	80056a4 <xTaskRemoveFromEventList>
 800496e:	b108      	cbz	r0, 8004974 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8004970:	f000 ff28 	bl	80057c4 <vTaskMissedYield>
 8004974:	3d01      	subs	r5, #1
 8004976:	b26d      	sxtb	r5, r5
 8004978:	e7dc      	b.n	8004934 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800497a:	6923      	ldr	r3, [r4, #16]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0e9      	beq.n	8004954 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004980:	4630      	mov	r0, r6
 8004982:	f000 fe8f 	bl	80056a4 <xTaskRemoveFromEventList>
 8004986:	b108      	cbz	r0, 800498c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8004988:	f000 ff1c 	bl	80057c4 <vTaskMissedYield>
 800498c:	3d01      	subs	r5, #1
 800498e:	b26d      	sxtb	r5, r5
 8004990:	e7de      	b.n	8004950 <prvUnlockQueue+0x2e>
	...

08004994 <xQueueGenericReset>:
{
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8004998:	4604      	mov	r4, r0
 800499a:	b950      	cbnz	r0, 80049b2 <xQueueGenericReset+0x1e>
 800499c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049a0:	b672      	cpsid	i
 80049a2:	f383 8811 	msr	BASEPRI, r3
 80049a6:	f3bf 8f6f 	isb	sy
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	b662      	cpsie	i
 80049b0:	e7fe      	b.n	80049b0 <xQueueGenericReset+0x1c>
	taskENTER_CRITICAL();
 80049b2:	f7ff fdb7 	bl	8004524 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80049b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80049ba:	6822      	ldr	r2, [r4, #0]
 80049bc:	4343      	muls	r3, r0
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049be:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c0:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c2:	1a1b      	subs	r3, r3, r0
 80049c4:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049c6:	60a1      	str	r1, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049c8:	2100      	movs	r1, #0
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ca:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049cc:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80049ce:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 80049d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049d4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80049d8:	b995      	cbnz	r5, 8004a00 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049da:	6923      	ldr	r3, [r4, #16]
 80049dc:	b163      	cbz	r3, 80049f8 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049de:	f104 0010 	add.w	r0, r4, #16
 80049e2:	f000 fe5f 	bl	80056a4 <xTaskRemoveFromEventList>
 80049e6:	b138      	cbz	r0, 80049f8 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80049e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ec:	4b09      	ldr	r3, [pc, #36]	; (8004a14 <xQueueGenericReset+0x80>)
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80049f8:	f7ff fdba 	bl	8004570 <vPortExitCritical>
}
 80049fc:	2001      	movs	r0, #1
 80049fe:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a00:	f104 0010 	add.w	r0, r4, #16
 8004a04:	f7ff fd02 	bl	800440c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a08:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004a0c:	f7ff fcfe 	bl	800440c <vListInitialise>
 8004a10:	e7f2      	b.n	80049f8 <xQueueGenericReset+0x64>
 8004a12:	bf00      	nop
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueGenericCreateStatic>:
	{
 8004a18:	b513      	push	{r0, r1, r4, lr}
 8004a1a:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a1c:	b950      	cbnz	r0, 8004a34 <xQueueGenericCreateStatic+0x1c>
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	b672      	cpsid	i
 8004a24:	f383 8811 	msr	BASEPRI, r3
 8004a28:	f3bf 8f6f 	isb	sy
 8004a2c:	f3bf 8f4f 	dsb	sy
 8004a30:	b662      	cpsie	i
 8004a32:	e7fe      	b.n	8004a32 <xQueueGenericCreateStatic+0x1a>
		configASSERT( pxStaticQueue != NULL );
 8004a34:	b953      	cbnz	r3, 8004a4c <xQueueGenericCreateStatic+0x34>
 8004a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3a:	b672      	cpsid	i
 8004a3c:	f383 8811 	msr	BASEPRI, r3
 8004a40:	f3bf 8f6f 	isb	sy
 8004a44:	f3bf 8f4f 	dsb	sy
 8004a48:	b662      	cpsie	i
 8004a4a:	e7fe      	b.n	8004a4a <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a4c:	b15a      	cbz	r2, 8004a66 <xQueueGenericCreateStatic+0x4e>
 8004a4e:	bb09      	cbnz	r1, 8004a94 <xQueueGenericCreateStatic+0x7c>
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	b672      	cpsid	i
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	b662      	cpsie	i
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericCreateStatic+0x4c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a66:	b1a9      	cbz	r1, 8004a94 <xQueueGenericCreateStatic+0x7c>
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	b672      	cpsid	i
 8004a6e:	f383 8811 	msr	BASEPRI, r3
 8004a72:	f3bf 8f6f 	isb	sy
 8004a76:	f3bf 8f4f 	dsb	sy
 8004a7a:	b662      	cpsie	i
 8004a7c:	e7fe      	b.n	8004a7c <xQueueGenericCreateStatic+0x64>
 8004a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a82:	b672      	cpsid	i
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	b662      	cpsie	i
 8004a92:	e7fe      	b.n	8004a92 <xQueueGenericCreateStatic+0x7a>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004a94:	2348      	movs	r3, #72	; 0x48
 8004a96:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004a98:	9b01      	ldr	r3, [sp, #4]
 8004a9a:	2b48      	cmp	r3, #72	; 0x48
 8004a9c:	d1ef      	bne.n	8004a7e <xQueueGenericCreateStatic+0x66>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004a9e:	2900      	cmp	r1, #0
 8004aa0:	bf08      	it	eq
 8004aa2:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004aa4:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aa6:	2301      	movs	r3, #1
	pxNewQueue->uxLength = uxQueueLength;
 8004aa8:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aaa:	6421      	str	r1, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004aac:	4620      	mov	r0, r4
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aae:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab2:	4619      	mov	r1, r3
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ab4:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ab6:	f7ff ff6d 	bl	8004994 <xQueueGenericReset>
	}
 8004aba:	4620      	mov	r0, r4
 8004abc:	b002      	add	sp, #8
 8004abe:	bd10      	pop	{r4, pc}

08004ac0 <xQueueGenericCreate>:
	{
 8004ac0:	b570      	push	{r4, r5, r6, lr}
 8004ac2:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	b950      	cbnz	r0, 8004ade <xQueueGenericCreate+0x1e>
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	b672      	cpsid	i
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	b662      	cpsie	i
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericCreate+0x1c>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ade:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004ae0:	3048      	adds	r0, #72	; 0x48
 8004ae2:	f7ff fdfd 	bl	80046e0 <pvPortMalloc>
		if( pxNewQueue != NULL )
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	b150      	cbz	r0, 8004b00 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004aea:	2300      	movs	r3, #0
 8004aec:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8004af0:	b945      	cbnz	r5, 8004b04 <xQueueGenericCreate+0x44>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004af2:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
 8004af4:	63e6      	str	r6, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004af6:	2101      	movs	r1, #1
	pxNewQueue->uxItemSize = uxItemSize;
 8004af8:	6425      	str	r5, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004afa:	4620      	mov	r0, r4
 8004afc:	f7ff ff4a 	bl	8004994 <xQueueGenericReset>
	}
 8004b00:	4620      	mov	r0, r4
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b04:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b08:	6003      	str	r3, [r0, #0]
 8004b0a:	e7f3      	b.n	8004af4 <xQueueGenericCreate+0x34>

08004b0c <xQueueGenericSend>:
{
 8004b0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b10:	4689      	mov	r9, r1
 8004b12:	9201      	str	r2, [sp, #4]
 8004b14:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004b16:	4604      	mov	r4, r0
 8004b18:	b950      	cbnz	r0, 8004b30 <xQueueGenericSend+0x24>
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	b672      	cpsid	i
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	b662      	cpsie	i
 8004b2e:	e7fe      	b.n	8004b2e <xQueueGenericSend+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b30:	2900      	cmp	r1, #0
 8004b32:	f040 808c 	bne.w	8004c4e <xQueueGenericSend+0x142>
 8004b36:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	f000 8088 	beq.w	8004c4e <xQueueGenericSend+0x142>
 8004b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b42:	b672      	cpsid	i
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	b662      	cpsie	i
 8004b52:	e7fe      	b.n	8004b52 <xQueueGenericSend+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b54:	9e01      	ldr	r6, [sp, #4]
 8004b56:	2e00      	cmp	r6, #0
 8004b58:	f000 8084 	beq.w	8004c64 <xQueueGenericSend+0x158>
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	b672      	cpsid	i
 8004b62:	f383 8811 	msr	BASEPRI, r3
 8004b66:	f3bf 8f6f 	isb	sy
 8004b6a:	f3bf 8f4f 	dsb	sy
 8004b6e:	b662      	cpsie	i
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericSend+0x64>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b72:	9d01      	ldr	r5, [sp, #4]
 8004b74:	b91d      	cbnz	r5, 8004b7e <xQueueGenericSend+0x72>
					taskEXIT_CRITICAL();
 8004b76:	f7ff fcfb 	bl	8004570 <vPortExitCritical>
			return errQUEUE_FULL;
 8004b7a:	2000      	movs	r0, #0
 8004b7c:	e058      	b.n	8004c30 <xQueueGenericSend+0x124>
				else if( xEntryTimeSet == pdFALSE )
 8004b7e:	b916      	cbnz	r6, 8004b86 <xQueueGenericSend+0x7a>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b80:	a802      	add	r0, sp, #8
 8004b82:	f000 fdd3 	bl	800572c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004b86:	f7ff fcf3 	bl	8004570 <vPortExitCritical>
		vTaskSuspendAll();
 8004b8a:	f000 fbf7 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b8e:	f7ff fcc9 	bl	8004524 <vPortEnterCritical>
 8004b92:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004b96:	2bff      	cmp	r3, #255	; 0xff
 8004b98:	d101      	bne.n	8004b9e <xQueueGenericSend+0x92>
 8004b9a:	f884 8044 	strb.w	r8, [r4, #68]	; 0x44
 8004b9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004ba2:	2bff      	cmp	r3, #255	; 0xff
 8004ba4:	d101      	bne.n	8004baa <xQueueGenericSend+0x9e>
 8004ba6:	f884 8045 	strb.w	r8, [r4, #69]	; 0x45
 8004baa:	f7ff fce1 	bl	8004570 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bae:	a901      	add	r1, sp, #4
 8004bb0:	a802      	add	r0, sp, #8
 8004bb2:	f000 fdc7 	bl	8005744 <xTaskCheckForTimeOut>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d143      	bne.n	8004c42 <xQueueGenericSend+0x136>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004bba:	f7ff fcb3 	bl	8004524 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004bbe:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8004bc0:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8004bc2:	f7ff fcd5 	bl	8004570 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bc6:	42ae      	cmp	r6, r5
 8004bc8:	d135      	bne.n	8004c36 <xQueueGenericSend+0x12a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bca:	9901      	ldr	r1, [sp, #4]
 8004bcc:	f104 0010 	add.w	r0, r4, #16
 8004bd0:	f000 fd4c 	bl	800566c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7ff fea4 	bl	8004922 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004bda:	f000 fc6b 	bl	80054b4 <xTaskResumeAll>
 8004bde:	b938      	cbnz	r0, 8004bf0 <xQueueGenericSend+0xe4>
					portYIELD_WITHIN_API();
 8004be0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004be4:	f8ca 3000 	str.w	r3, [sl]
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004bf2:	f7ff fc97 	bl	8004524 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004bf6:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004bf8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d301      	bcc.n	8004c02 <xQueueGenericSend+0xf6>
 8004bfe:	2f02      	cmp	r7, #2
 8004c00:	d1b7      	bne.n	8004b72 <xQueueGenericSend+0x66>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c02:	463a      	mov	r2, r7
 8004c04:	4649      	mov	r1, r9
 8004c06:	4620      	mov	r0, r4
 8004c08:	f7ff fe43 	bl	8004892 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004c0e:	b11b      	cbz	r3, 8004c18 <xQueueGenericSend+0x10c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c10:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004c14:	f000 fd46 	bl	80056a4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8004c18:	b138      	cbz	r0, 8004c2a <xQueueGenericSend+0x11e>
						queueYIELD_IF_USING_PREEMPTION();
 8004c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <xQueueGenericSend+0x178>)
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	f3bf 8f4f 	dsb	sy
 8004c26:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004c2a:	f7ff fca1 	bl	8004570 <vPortExitCritical>
				return pdPASS;
 8004c2e:	2001      	movs	r0, #1
}
 8004c30:	b004      	add	sp, #16
 8004c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8004c36:	4620      	mov	r0, r4
 8004c38:	f7ff fe73 	bl	8004922 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c3c:	f000 fc3a 	bl	80054b4 <xTaskResumeAll>
 8004c40:	e7d6      	b.n	8004bf0 <xQueueGenericSend+0xe4>
			prvUnlockQueue( pxQueue );
 8004c42:	4620      	mov	r0, r4
 8004c44:	f7ff fe6d 	bl	8004922 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c48:	f000 fc34 	bl	80054b4 <xTaskResumeAll>
 8004c4c:	e795      	b.n	8004b7a <xQueueGenericSend+0x6e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c4e:	2f02      	cmp	r7, #2
 8004c50:	d102      	bne.n	8004c58 <xQueueGenericSend+0x14c>
 8004c52:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004c54:	2b01      	cmp	r3, #1
 8004c56:	d10a      	bne.n	8004c6e <xQueueGenericSend+0x162>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004c58:	f000 fdba 	bl	80057d0 <xTaskGetSchedulerState>
 8004c5c:	2800      	cmp	r0, #0
 8004c5e:	f43f af79 	beq.w	8004b54 <xQueueGenericSend+0x48>
 8004c62:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004c64:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8004c68:	f8df a018 	ldr.w	sl, [pc, #24]	; 8004c84 <xQueueGenericSend+0x178>
 8004c6c:	e7c1      	b.n	8004bf2 <xQueueGenericSend+0xe6>
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	b672      	cpsid	i
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	b662      	cpsie	i
 8004c82:	e7fe      	b.n	8004c82 <xQueueGenericSend+0x176>
 8004c84:	e000ed04 	.word	0xe000ed04

08004c88 <xQueueGenericSendFromISR>:
{
 8004c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c8c:	4688      	mov	r8, r1
 8004c8e:	4691      	mov	r9, r2
 8004c90:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8004c92:	4604      	mov	r4, r0
 8004c94:	b950      	cbnz	r0, 8004cac <xQueueGenericSendFromISR+0x24>
 8004c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c9a:	b672      	cpsid	i
 8004c9c:	f383 8811 	msr	BASEPRI, r3
 8004ca0:	f3bf 8f6f 	isb	sy
 8004ca4:	f3bf 8f4f 	dsb	sy
 8004ca8:	b662      	cpsie	i
 8004caa:	e7fe      	b.n	8004caa <xQueueGenericSendFromISR+0x22>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004cac:	bb19      	cbnz	r1, 8004cf6 <xQueueGenericSendFromISR+0x6e>
 8004cae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004cb0:	b30b      	cbz	r3, 8004cf6 <xQueueGenericSendFromISR+0x6e>
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	b672      	cpsid	i
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	b662      	cpsie	i
 8004cc6:	e7fe      	b.n	8004cc6 <xQueueGenericSendFromISR+0x3e>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cc8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004ccc:	f000 fcea 	bl	80056a4 <xTaskRemoveFromEventList>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d036      	beq.n	8004d42 <xQueueGenericSendFromISR+0xba>
							if( pxHigherPriorityTaskWoken != NULL )
 8004cd4:	f1b9 0f00 	cmp.w	r9, #0
 8004cd8:	d033      	beq.n	8004d42 <xQueueGenericSendFromISR+0xba>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004cda:	2001      	movs	r0, #1
 8004cdc:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8004ce0:	f386 8811 	msr	BASEPRI, r6
}
 8004ce4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ce8:	3501      	adds	r5, #1
 8004cea:	b26d      	sxtb	r5, r5
 8004cec:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8004cf0:	e027      	b.n	8004d42 <xQueueGenericSendFromISR+0xba>
			xReturn = errQUEUE_FULL;
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	e7f4      	b.n	8004ce0 <xQueueGenericSendFromISR+0x58>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004cf6:	2f02      	cmp	r7, #2
 8004cf8:	d102      	bne.n	8004d00 <xQueueGenericSendFromISR+0x78>
 8004cfa:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d122      	bne.n	8004d46 <xQueueGenericSendFromISR+0xbe>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d00:	f7ff fc98 	bl	8004634 <vPortValidateInterruptPriority>
	__asm volatile
 8004d04:	f3ef 8611 	mrs	r6, BASEPRI
 8004d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0c:	b672      	cpsid	i
 8004d0e:	f383 8811 	msr	BASEPRI, r3
 8004d12:	f3bf 8f6f 	isb	sy
 8004d16:	f3bf 8f4f 	dsb	sy
 8004d1a:	b662      	cpsie	i
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d1c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004d1e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d301      	bcc.n	8004d28 <xQueueGenericSendFromISR+0xa0>
 8004d24:	2f02      	cmp	r7, #2
 8004d26:	d1e4      	bne.n	8004cf2 <xQueueGenericSendFromISR+0x6a>
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d28:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d2c:	463a      	mov	r2, r7
 8004d2e:	4641      	mov	r1, r8
 8004d30:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d32:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d34:	f7ff fdad 	bl	8004892 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8004d38:	1c6b      	adds	r3, r5, #1
 8004d3a:	d1d5      	bne.n	8004ce8 <xQueueGenericSendFromISR+0x60>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d3c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1c2      	bne.n	8004cc8 <xQueueGenericSendFromISR+0x40>
			xReturn = pdPASS;
 8004d42:	2001      	movs	r0, #1
 8004d44:	e7cc      	b.n	8004ce0 <xQueueGenericSendFromISR+0x58>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	b672      	cpsid	i
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	b662      	cpsie	i
 8004d5a:	e7fe      	b.n	8004d5a <xQueueGenericSendFromISR+0xd2>

08004d5c <xQueueReceive>:
{
 8004d5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d60:	b085      	sub	sp, #20
 8004d62:	4688      	mov	r8, r1
	configASSERT( ( pxQueue ) );
 8004d64:	4604      	mov	r4, r0
{
 8004d66:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8004d68:	b950      	cbnz	r0, 8004d80 <xQueueReceive+0x24>
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	b672      	cpsid	i
 8004d70:	f383 8811 	msr	BASEPRI, r3
 8004d74:	f3bf 8f6f 	isb	sy
 8004d78:	f3bf 8f4f 	dsb	sy
 8004d7c:	b662      	cpsie	i
 8004d7e:	e7fe      	b.n	8004d7e <xQueueReceive+0x22>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d80:	2900      	cmp	r1, #0
 8004d82:	f040 808a 	bne.w	8004e9a <xQueueReceive+0x13e>
 8004d86:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 8086 	beq.w	8004e9a <xQueueReceive+0x13e>
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	b672      	cpsid	i
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	b662      	cpsie	i
 8004da2:	e7fe      	b.n	8004da2 <xQueueReceive+0x46>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004da4:	9e01      	ldr	r6, [sp, #4]
 8004da6:	2e00      	cmp	r6, #0
 8004da8:	d07c      	beq.n	8004ea4 <xQueueReceive+0x148>
 8004daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dae:	b672      	cpsid	i
 8004db0:	f383 8811 	msr	BASEPRI, r3
 8004db4:	f3bf 8f6f 	isb	sy
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	b662      	cpsie	i
 8004dbe:	e7fe      	b.n	8004dbe <xQueueReceive+0x62>
				if( xTicksToWait == ( TickType_t ) 0 )
 8004dc0:	9d01      	ldr	r5, [sp, #4]
 8004dc2:	b91d      	cbnz	r5, 8004dcc <xQueueReceive+0x70>
					taskEXIT_CRITICAL();
 8004dc4:	f7ff fbd4 	bl	8004570 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e052      	b.n	8004e72 <xQueueReceive+0x116>
				else if( xEntryTimeSet == pdFALSE )
 8004dcc:	b916      	cbnz	r6, 8004dd4 <xQueueReceive+0x78>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004dce:	a802      	add	r0, sp, #8
 8004dd0:	f000 fcac 	bl	800572c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8004dd4:	f7ff fbcc 	bl	8004570 <vPortExitCritical>
		vTaskSuspendAll();
 8004dd8:	f000 fad0 	bl	800537c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ddc:	f7ff fba2 	bl	8004524 <vPortEnterCritical>
 8004de0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004de4:	2bff      	cmp	r3, #255	; 0xff
 8004de6:	d101      	bne.n	8004dec <xQueueReceive+0x90>
 8004de8:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
 8004dec:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004df0:	2bff      	cmp	r3, #255	; 0xff
 8004df2:	d101      	bne.n	8004df8 <xQueueReceive+0x9c>
 8004df4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004df8:	f7ff fbba 	bl	8004570 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004dfc:	a901      	add	r1, sp, #4
 8004dfe:	a802      	add	r0, sp, #8
 8004e00:	f000 fca0 	bl	8005744 <xTaskCheckForTimeOut>
 8004e04:	2800      	cmp	r0, #0
 8004e06:	d13d      	bne.n	8004e84 <xQueueReceive+0x128>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e08:	4620      	mov	r0, r4
 8004e0a:	f7ff fd37 	bl	800487c <prvIsQueueEmpty>
 8004e0e:	b398      	cbz	r0, 8004e78 <xQueueReceive+0x11c>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004e10:	9901      	ldr	r1, [sp, #4]
 8004e12:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004e16:	f000 fc29 	bl	800566c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004e1a:	4620      	mov	r0, r4
 8004e1c:	f7ff fd81 	bl	8004922 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004e20:	f000 fb48 	bl	80054b4 <xTaskResumeAll>
 8004e24:	b938      	cbnz	r0, 8004e36 <xQueueReceive+0xda>
					portYIELD_WITHIN_API();
 8004e26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004e2a:	f8c9 3000 	str.w	r3, [r9]
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8004e38:	f7ff fb74 	bl	8004524 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e3c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e3e:	2d00      	cmp	r5, #0
 8004e40:	d0be      	beq.n	8004dc0 <xQueueReceive+0x64>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e42:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004e44:	4641      	mov	r1, r8
 8004e46:	4620      	mov	r0, r4
 8004e48:	f7ff fd56 	bl	80048f8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004e4c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	b163      	cbz	r3, 8004e6c <xQueueReceive+0x110>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e52:	f104 0010 	add.w	r0, r4, #16
 8004e56:	f000 fc25 	bl	80056a4 <xTaskRemoveFromEventList>
 8004e5a:	b138      	cbz	r0, 8004e6c <xQueueReceive+0x110>
						queueYIELD_IF_USING_PREEMPTION();
 8004e5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e60:	4b12      	ldr	r3, [pc, #72]	; (8004eac <xQueueReceive+0x150>)
 8004e62:	601a      	str	r2, [r3, #0]
 8004e64:	f3bf 8f4f 	dsb	sy
 8004e68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8004e6c:	f7ff fb80 	bl	8004570 <vPortExitCritical>
				return pdPASS;
 8004e70:	2001      	movs	r0, #1
}
 8004e72:	b005      	add	sp, #20
 8004e74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8004e78:	4620      	mov	r0, r4
 8004e7a:	f7ff fd52 	bl	8004922 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004e7e:	f000 fb19 	bl	80054b4 <xTaskResumeAll>
 8004e82:	e7d8      	b.n	8004e36 <xQueueReceive+0xda>
			prvUnlockQueue( pxQueue );
 8004e84:	4620      	mov	r0, r4
 8004e86:	f7ff fd4c 	bl	8004922 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004e8a:	f000 fb13 	bl	80054b4 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e8e:	4620      	mov	r0, r4
 8004e90:	f7ff fcf4 	bl	800487c <prvIsQueueEmpty>
 8004e94:	2800      	cmp	r0, #0
 8004e96:	d0ce      	beq.n	8004e36 <xQueueReceive+0xda>
 8004e98:	e796      	b.n	8004dc8 <xQueueReceive+0x6c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e9a:	f000 fc99 	bl	80057d0 <xTaskGetSchedulerState>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d080      	beq.n	8004da4 <xQueueReceive+0x48>
 8004ea2:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8004ea4:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 8004ea6:	f8df 9004 	ldr.w	r9, [pc, #4]	; 8004eac <xQueueReceive+0x150>
 8004eaa:	e7c5      	b.n	8004e38 <xQueueReceive+0xdc>
 8004eac:	e000ed04 	.word	0xe000ed04

08004eb0 <xQueueReceiveFromISR>:
{
 8004eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004eb4:	4689      	mov	r9, r1
 8004eb6:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8004eb8:	4605      	mov	r5, r0
 8004eba:	b950      	cbnz	r0, 8004ed2 <xQueueReceiveFromISR+0x22>
 8004ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec0:	b672      	cpsid	i
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	b662      	cpsie	i
 8004ed0:	e7fe      	b.n	8004ed0 <xQueueReceiveFromISR+0x20>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ed2:	bb81      	cbnz	r1, 8004f36 <xQueueReceiveFromISR+0x86>
 8004ed4:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004ed6:	b373      	cbz	r3, 8004f36 <xQueueReceiveFromISR+0x86>
 8004ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004edc:	b672      	cpsid	i
 8004ede:	f383 8811 	msr	BASEPRI, r3
 8004ee2:	f3bf 8f6f 	isb	sy
 8004ee6:	f3bf 8f4f 	dsb	sy
 8004eea:	b662      	cpsie	i
 8004eec:	e7fe      	b.n	8004eec <xQueueReceiveFromISR+0x3c>
			const int8_t cRxLock = pxQueue->cRxLock;
 8004eee:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ef2:	4649      	mov	r1, r9
 8004ef4:	4628      	mov	r0, r5
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004ef6:	3c01      	subs	r4, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 8004ef8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004efa:	f7ff fcfd 	bl	80048f8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004efe:	63ac      	str	r4, [r5, #56]	; 0x38
			if( cRxLock == queueUNLOCKED )
 8004f00:	1c73      	adds	r3, r6, #1
 8004f02:	d113      	bne.n	8004f2c <xQueueReceiveFromISR+0x7c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f04:	692b      	ldr	r3, [r5, #16]
 8004f06:	b90b      	cbnz	r3, 8004f0c <xQueueReceiveFromISR+0x5c>
			xReturn = pdPASS;
 8004f08:	2001      	movs	r0, #1
 8004f0a:	e00b      	b.n	8004f24 <xQueueReceiveFromISR+0x74>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f0c:	f105 0010 	add.w	r0, r5, #16
 8004f10:	f000 fbc8 	bl	80056a4 <xTaskRemoveFromEventList>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0f7      	beq.n	8004f08 <xQueueReceiveFromISR+0x58>
						if( pxHigherPriorityTaskWoken != NULL )
 8004f18:	f1b8 0f00 	cmp.w	r8, #0
 8004f1c:	d0f4      	beq.n	8004f08 <xQueueReceiveFromISR+0x58>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004f1e:	2001      	movs	r0, #1
 8004f20:	f8c8 0000 	str.w	r0, [r8]
	__asm volatile
 8004f24:	f387 8811 	msr	BASEPRI, r7
}
 8004f28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004f2c:	3601      	adds	r6, #1
 8004f2e:	b276      	sxtb	r6, r6
 8004f30:	f885 6044 	strb.w	r6, [r5, #68]	; 0x44
 8004f34:	e7e8      	b.n	8004f08 <xQueueReceiveFromISR+0x58>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f36:	f7ff fb7d 	bl	8004634 <vPortValidateInterruptPriority>
	__asm volatile
 8004f3a:	f3ef 8711 	mrs	r7, BASEPRI
 8004f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f42:	b672      	cpsid	i
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	b662      	cpsie	i
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f52:	6bac      	ldr	r4, [r5, #56]	; 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f54:	2c00      	cmp	r4, #0
 8004f56:	d1ca      	bne.n	8004eee <xQueueReceiveFromISR+0x3e>
			xReturn = pdFAIL;
 8004f58:	4620      	mov	r0, r4
 8004f5a:	e7e3      	b.n	8004f24 <xQueueReceiveFromISR+0x74>

08004f5c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f60:	4606      	mov	r6, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004f62:	f7ff fadf 	bl	8004524 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004f66:	4b2d      	ldr	r3, [pc, #180]	; (800501c <prvAddNewTaskToReadyList+0xc0>)
		if( pxCurrentTCB == NULL )
 8004f68:	4c2d      	ldr	r4, [pc, #180]	; (8005020 <prvAddNewTaskToReadyList+0xc4>)
		uxCurrentNumberOfTasks++;
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	4f2d      	ldr	r7, [pc, #180]	; (8005024 <prvAddNewTaskToReadyList+0xc8>)
 8004f6e:	3201      	adds	r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004f72:	6825      	ldr	r5, [r4, #0]
 8004f74:	2d00      	cmp	r5, #0
 8004f76:	d145      	bne.n	8005004 <prvAddNewTaskToReadyList+0xa8>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004f78:	6026      	str	r6, [r4, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	d11c      	bne.n	8004fba <prvAddNewTaskToReadyList+0x5e>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004f80:	1978      	adds	r0, r7, r5
 8004f82:	3514      	adds	r5, #20
 8004f84:	f7ff fa42 	bl	800440c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004f88:	2d8c      	cmp	r5, #140	; 0x8c
 8004f8a:	d1f9      	bne.n	8004f80 <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004f8c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8005050 <prvAddNewTaskToReadyList+0xf4>
	vListInitialise( &xDelayedTaskList2 );
 8004f90:	4d25      	ldr	r5, [pc, #148]	; (8005028 <prvAddNewTaskToReadyList+0xcc>)
	vListInitialise( &xDelayedTaskList1 );
 8004f92:	4640      	mov	r0, r8
 8004f94:	f7ff fa3a 	bl	800440c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f7ff fa37 	bl	800440c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004f9e:	4823      	ldr	r0, [pc, #140]	; (800502c <prvAddNewTaskToReadyList+0xd0>)
 8004fa0:	f7ff fa34 	bl	800440c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004fa4:	4822      	ldr	r0, [pc, #136]	; (8005030 <prvAddNewTaskToReadyList+0xd4>)
 8004fa6:	f7ff fa31 	bl	800440c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004faa:	4822      	ldr	r0, [pc, #136]	; (8005034 <prvAddNewTaskToReadyList+0xd8>)
 8004fac:	f7ff fa2e 	bl	800440c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004fb0:	4b21      	ldr	r3, [pc, #132]	; (8005038 <prvAddNewTaskToReadyList+0xdc>)
 8004fb2:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004fb6:	4b21      	ldr	r3, [pc, #132]	; (800503c <prvAddNewTaskToReadyList+0xe0>)
 8004fb8:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8004fba:	4a21      	ldr	r2, [pc, #132]	; (8005040 <prvAddNewTaskToReadyList+0xe4>)
		prvAddTaskToReadyList( pxNewTCB );
 8004fbc:	4921      	ldr	r1, [pc, #132]	; (8005044 <prvAddNewTaskToReadyList+0xe8>)
		uxTaskNumber++;
 8004fbe:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004fc0:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8004fc2:	3301      	adds	r3, #1
 8004fc4:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
 8004fca:	4093      	lsls	r3, r2
 8004fcc:	4303      	orrs	r3, r0
 8004fce:	2014      	movs	r0, #20
 8004fd0:	600b      	str	r3, [r1, #0]
 8004fd2:	1d31      	adds	r1, r6, #4
 8004fd4:	fb00 7002 	mla	r0, r0, r2, r7
 8004fd8:	f7ff fa26 	bl	8004428 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8004fdc:	f7ff fac8 	bl	8004570 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8004fe0:	4b19      	ldr	r3, [pc, #100]	; (8005048 <prvAddNewTaskToReadyList+0xec>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	b163      	cbz	r3, 8005000 <prvAddNewTaskToReadyList+0xa4>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004fe6:	6823      	ldr	r3, [r4, #0]
 8004fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fea:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d207      	bcs.n	8005000 <prvAddNewTaskToReadyList+0xa4>
			taskYIELD_IF_USING_PREEMPTION();
 8004ff0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff4:	4b15      	ldr	r3, [pc, #84]	; (800504c <prvAddNewTaskToReadyList+0xf0>)
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	f3bf 8f4f 	dsb	sy
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8005004:	4b10      	ldr	r3, [pc, #64]	; (8005048 <prvAddNewTaskToReadyList+0xec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1d6      	bne.n	8004fba <prvAddNewTaskToReadyList+0x5e>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8005012:	429a      	cmp	r2, r3
 8005014:	d8d1      	bhi.n	8004fba <prvAddNewTaskToReadyList+0x5e>
					pxCurrentTCB = pxNewTCB;
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	e7cf      	b.n	8004fba <prvAddNewTaskToReadyList+0x5e>
 800501a:	bf00      	nop
 800501c:	20003f6c 	.word	0x20003f6c
 8005020:	20003ed4 	.word	0x20003ed4
 8005024:	20003ee0 	.word	0x20003ee0
 8005028:	20003f98 	.word	0x20003f98
 800502c:	20003fb4 	.word	0x20003fb4
 8005030:	20003fe0 	.word	0x20003fe0
 8005034:	20003fcc 	.word	0x20003fcc
 8005038:	20003ed8 	.word	0x20003ed8
 800503c:	20003edc 	.word	0x20003edc
 8005040:	20003f7c 	.word	0x20003f7c
 8005044:	20003f80 	.word	0x20003f80
 8005048:	20003fc8 	.word	0x20003fc8
 800504c:	e000ed04 	.word	0xe000ed04
 8005050:	20003f84 	.word	0x20003f84

08005054 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005054:	4a06      	ldr	r2, [pc, #24]	; (8005070 <prvResetNextTaskUnblockTime+0x1c>)
 8005056:	6813      	ldr	r3, [r2, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	4b06      	ldr	r3, [pc, #24]	; (8005074 <prvResetNextTaskUnblockTime+0x20>)
 800505c:	b919      	cbnz	r1, 8005066 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800505e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005062:	601a      	str	r2, [r3, #0]
 8005064:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800506a:	68d2      	ldr	r2, [r2, #12]
 800506c:	6852      	ldr	r2, [r2, #4]
 800506e:	e7f8      	b.n	8005062 <prvResetNextTaskUnblockTime+0xe>
 8005070:	20003ed8 	.word	0x20003ed8
 8005074:	20003fac 	.word	0x20003fac

08005078 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800507c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800507e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8005082:	4680      	mov	r8, r0
 8005084:	4699      	mov	r9, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005086:	3a01      	subs	r2, #1
 8005088:	6b26      	ldr	r6, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800508a:	9f09      	ldr	r7, [sp, #36]	; 0x24
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800508c:	eb06 0682 	add.w	r6, r6, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005090:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 8005094:	b391      	cbz	r1, 80050fc <prvInitialiseNewTask.isra.2+0x84>
 8005096:	1e4b      	subs	r3, r1, #1
 8005098:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800509c:	310f      	adds	r1, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800509e:	7858      	ldrb	r0, [r3, #1]
 80050a0:	f802 0b01 	strb.w	r0, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 80050a4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80050a8:	b108      	cbz	r0, 80050ae <prvInitialiseNewTask.isra.2+0x36>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80050aa:	428b      	cmp	r3, r1
 80050ac:	d1f7      	bne.n	800509e <prvInitialiseNewTask.isra.2+0x26>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80050ae:	2300      	movs	r3, #0
 80050b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050b4:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 80050b6:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ba:	1d20      	adds	r0, r4, #4
 80050bc:	2d06      	cmp	r5, #6
		pxNewTCB->uxMutexesHeld = 0;
 80050be:	f8c4 a048 	str.w	sl, [r4, #72]	; 0x48
 80050c2:	bf28      	it	cs
 80050c4:	2506      	movcs	r5, #6
	pxNewTCB->uxPriority = uxPriority;
 80050c6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80050c8:	6465      	str	r5, [r4, #68]	; 0x44
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ca:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80050ce:	f7ff f9a8 	bl	8004422 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80050d2:	f104 0018 	add.w	r0, r4, #24
 80050d6:	f7ff f9a4 	bl	8004422 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80050da:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80050de:	6124      	str	r4, [r4, #16]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050e0:	464a      	mov	r2, r9
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050e2:	61a5      	str	r5, [r4, #24]
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050e4:	4641      	mov	r1, r8
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80050e6:	6264      	str	r4, [r4, #36]	; 0x24
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050e8:	4630      	mov	r0, r6
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80050ea:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050ee:	f7ff f9f3 	bl	80044d8 <pxPortInitialiseStack>
 80050f2:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80050f4:	b107      	cbz	r7, 80050f8 <prvInitialiseNewTask.isra.2+0x80>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050f6:	603c      	str	r4, [r7, #0]
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80050fc:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 8005100:	e7d8      	b.n	80050b4 <prvInitialiseNewTask.isra.2+0x3c>

08005102 <prvDeleteTCB>:
	{
 8005102:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005104:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
	{
 8005108:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800510a:	b93b      	cbnz	r3, 800511c <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800510c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800510e:	f7ff fb79 	bl	8004804 <vPortFree>
				vPortFree( pxTCB );
 8005112:	4620      	mov	r0, r4
	}
 8005114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8005118:	f7ff bb74 	b.w	8004804 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800511c:	2b01      	cmp	r3, #1
 800511e:	d0f9      	beq.n	8005114 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005120:	2b02      	cmp	r3, #2
 8005122:	d00a      	beq.n	800513a <prvDeleteTCB+0x38>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	b672      	cpsid	i
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	b662      	cpsie	i
 8005138:	e7fe      	b.n	8005138 <prvDeleteTCB+0x36>
 800513a:	bd10      	pop	{r4, pc}

0800513c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800513c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800513e:	4b1b      	ldr	r3, [pc, #108]	; (80051ac <prvAddCurrentTaskToDelayedList+0x70>)
{
 8005140:	4604      	mov	r4, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005142:	4e1b      	ldr	r6, [pc, #108]	; (80051b0 <prvAddCurrentTaskToDelayedList+0x74>)
{
 8005144:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 8005146:	681d      	ldr	r5, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005148:	6830      	ldr	r0, [r6, #0]
 800514a:	3004      	adds	r0, #4
 800514c:	f7ff f98f 	bl	800446e <uxListRemove>
 8005150:	4633      	mov	r3, r6
 8005152:	b940      	cbnz	r0, 8005166 <prvAddCurrentTaskToDelayedList+0x2a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005154:	6831      	ldr	r1, [r6, #0]
 8005156:	2001      	movs	r0, #1
 8005158:	4e16      	ldr	r6, [pc, #88]	; (80051b4 <prvAddCurrentTaskToDelayedList+0x78>)
 800515a:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800515c:	6832      	ldr	r2, [r6, #0]
 800515e:	4088      	lsls	r0, r1
 8005160:	ea22 0200 	bic.w	r2, r2, r0
 8005164:	6032      	str	r2, [r6, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005166:	1c62      	adds	r2, r4, #1
 8005168:	d107      	bne.n	800517a <prvAddCurrentTaskToDelayedList+0x3e>
 800516a:	b137      	cbz	r7, 800517a <prvAddCurrentTaskToDelayedList+0x3e>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800516c:	6819      	ldr	r1, [r3, #0]
 800516e:	4812      	ldr	r0, [pc, #72]	; (80051b8 <prvAddCurrentTaskToDelayedList+0x7c>)
 8005170:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005172:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005176:	f7ff b957 	b.w	8004428 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800517a:	442c      	add	r4, r5
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800517c:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 800517e:	42a5      	cmp	r5, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005180:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 8005182:	d907      	bls.n	8005194 <prvAddCurrentTaskToDelayedList+0x58>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005184:	4a0d      	ldr	r2, [pc, #52]	; (80051bc <prvAddCurrentTaskToDelayedList+0x80>)
 8005186:	6810      	ldr	r0, [r2, #0]
 8005188:	6819      	ldr	r1, [r3, #0]
}
 800518a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800518e:	3104      	adds	r1, #4
 8005190:	f7ff b956 	b.w	8004440 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005194:	4a0a      	ldr	r2, [pc, #40]	; (80051c0 <prvAddCurrentTaskToDelayedList+0x84>)
 8005196:	6810      	ldr	r0, [r2, #0]
 8005198:	6819      	ldr	r1, [r3, #0]
 800519a:	3104      	adds	r1, #4
 800519c:	f7ff f950 	bl	8004440 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80051a0:	4b08      	ldr	r3, [pc, #32]	; (80051c4 <prvAddCurrentTaskToDelayedList+0x88>)
 80051a2:	681a      	ldr	r2, [r3, #0]
 80051a4:	4294      	cmp	r4, r2
 80051a6:	d200      	bcs.n	80051aa <prvAddCurrentTaskToDelayedList+0x6e>
					xNextTaskUnblockTime = xTimeToWake;
 80051a8:	601c      	str	r4, [r3, #0]
 80051aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051ac:	20003ff4 	.word	0x20003ff4
 80051b0:	20003ed4 	.word	0x20003ed4
 80051b4:	20003f80 	.word	0x20003f80
 80051b8:	20003fcc 	.word	0x20003fcc
 80051bc:	20003edc 	.word	0x20003edc
 80051c0:	20003ed8 	.word	0x20003ed8
 80051c4:	20003fac 	.word	0x20003fac

080051c8 <prvTaskIsTaskSuspended.part.0>:
 80051c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051cc:	b672      	cpsid	i
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	b662      	cpsie	i
 80051dc:	e7fe      	b.n	80051dc <prvTaskIsTaskSuspended.part.0+0x14>

080051de <xTaskCreateStatic>:
	{
 80051de:	b570      	push	{r4, r5, r6, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80051e4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 80051e6:	b90d      	cbnz	r5, 80051ec <xTaskCreateStatic+0xe>
 80051e8:	f7ff ffee 	bl	80051c8 <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 80051ec:	b954      	cbnz	r4, 8005204 <xTaskCreateStatic+0x26>
 80051ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f2:	b672      	cpsid	i
 80051f4:	f383 8811 	msr	BASEPRI, r3
 80051f8:	f3bf 8f6f 	isb	sy
 80051fc:	f3bf 8f4f 	dsb	sy
 8005200:	b662      	cpsie	i
 8005202:	e7fe      	b.n	8005202 <xTaskCreateStatic+0x24>
			volatile size_t xSize = sizeof( StaticTask_t );
 8005204:	2654      	movs	r6, #84	; 0x54
 8005206:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005208:	9e05      	ldr	r6, [sp, #20]
 800520a:	2e54      	cmp	r6, #84	; 0x54
 800520c:	d00a      	beq.n	8005224 <xTaskCreateStatic+0x46>
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	b672      	cpsid	i
 8005214:	f383 8811 	msr	BASEPRI, r3
 8005218:	f3bf 8f6f 	isb	sy
 800521c:	f3bf 8f4f 	dsb	sy
 8005220:	b662      	cpsie	i
 8005222:	e7fe      	b.n	8005222 <xTaskCreateStatic+0x44>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005224:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005226:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005228:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800522a:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800522e:	ad04      	add	r5, sp, #16
 8005230:	9402      	str	r4, [sp, #8]
 8005232:	9501      	str	r5, [sp, #4]
 8005234:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005236:	9500      	str	r5, [sp, #0]
 8005238:	f7ff ff1e 	bl	8005078 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 800523c:	4620      	mov	r0, r4
 800523e:	f7ff fe8d 	bl	8004f5c <prvAddNewTaskToReadyList>
	}
 8005242:	9804      	ldr	r0, [sp, #16]
 8005244:	b006      	add	sp, #24
 8005246:	bd70      	pop	{r4, r5, r6, pc}

08005248 <xTaskCreate>:
	{
 8005248:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800524c:	4607      	mov	r7, r0
 800524e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005250:	0090      	lsls	r0, r2, #2
	{
 8005252:	4688      	mov	r8, r1
 8005254:	4616      	mov	r6, r2
 8005256:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005258:	f7ff fa42 	bl	80046e0 <pvPortMalloc>
			if( pxStack != NULL )
 800525c:	4605      	mov	r5, r0
 800525e:	b1e8      	cbz	r0, 800529c <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005260:	2054      	movs	r0, #84	; 0x54
 8005262:	f7ff fa3d 	bl	80046e0 <pvPortMalloc>
				if( pxNewTCB != NULL )
 8005266:	4604      	mov	r4, r0
 8005268:	b1a8      	cbz	r0, 8005296 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800526a:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800526c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800526e:	4632      	mov	r2, r6
 8005270:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005272:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005276:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005278:	9002      	str	r0, [sp, #8]
 800527a:	4638      	mov	r0, r7
 800527c:	9301      	str	r3, [sp, #4]
 800527e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005280:	9300      	str	r3, [sp, #0]
 8005282:	464b      	mov	r3, r9
 8005284:	f7ff fef8 	bl	8005078 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005288:	4620      	mov	r0, r4
 800528a:	f7ff fe67 	bl	8004f5c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800528e:	2001      	movs	r0, #1
	}
 8005290:	b005      	add	sp, #20
 8005292:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8005296:	4628      	mov	r0, r5
 8005298:	f7ff fab4 	bl	8004804 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800529c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80052a0:	e7f6      	b.n	8005290 <xTaskCreate+0x48>
	...

080052a4 <vTaskDelete>:
	{
 80052a4:	b570      	push	{r4, r5, r6, lr}
 80052a6:	4604      	mov	r4, r0
 80052a8:	4d2a      	ldr	r5, [pc, #168]	; (8005354 <vTaskDelete+0xb0>)
		taskENTER_CRITICAL();
 80052aa:	f7ff f93b 	bl	8004524 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80052ae:	b904      	cbnz	r4, 80052b2 <vTaskDelete+0xe>
 80052b0:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052b2:	1d26      	adds	r6, r4, #4
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff f8da 	bl	800446e <uxListRemove>
 80052ba:	b960      	cbnz	r0, 80052d6 <vTaskDelete+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80052bc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80052be:	2114      	movs	r1, #20
 80052c0:	4b25      	ldr	r3, [pc, #148]	; (8005358 <vTaskDelete+0xb4>)
 80052c2:	4341      	muls	r1, r0
 80052c4:	585b      	ldr	r3, [r3, r1]
 80052c6:	b933      	cbnz	r3, 80052d6 <vTaskDelete+0x32>
 80052c8:	4924      	ldr	r1, [pc, #144]	; (800535c <vTaskDelete+0xb8>)
 80052ca:	2201      	movs	r2, #1
 80052cc:	680b      	ldr	r3, [r1, #0]
 80052ce:	4082      	lsls	r2, r0
 80052d0:	ea23 0302 	bic.w	r3, r3, r2
 80052d4:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80052d8:	b11b      	cbz	r3, 80052e2 <vTaskDelete+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80052da:	f104 0018 	add.w	r0, r4, #24
 80052de:	f7ff f8c6 	bl	800446e <uxListRemove>
			uxTaskNumber++;
 80052e2:	4a1f      	ldr	r2, [pc, #124]	; (8005360 <vTaskDelete+0xbc>)
 80052e4:	6813      	ldr	r3, [r2, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	6013      	str	r3, [r2, #0]
			if( pxTCB == pxCurrentTCB )
 80052ea:	682b      	ldr	r3, [r5, #0]
 80052ec:	429c      	cmp	r4, r3
 80052ee:	d11d      	bne.n	800532c <vTaskDelete+0x88>
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80052f0:	4631      	mov	r1, r6
 80052f2:	481c      	ldr	r0, [pc, #112]	; (8005364 <vTaskDelete+0xc0>)
 80052f4:	f7ff f898 	bl	8004428 <vListInsertEnd>
				++uxDeletedTasksWaitingCleanUp;
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <vTaskDelete+0xc4>)
 80052fa:	6813      	ldr	r3, [r2, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	6013      	str	r3, [r2, #0]
		taskEXIT_CRITICAL();
 8005300:	f7ff f936 	bl	8004570 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8005304:	4b19      	ldr	r3, [pc, #100]	; (800536c <vTaskDelete+0xc8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	b313      	cbz	r3, 8005350 <vTaskDelete+0xac>
			if( pxTCB == pxCurrentTCB )
 800530a:	682b      	ldr	r3, [r5, #0]
 800530c:	429c      	cmp	r4, r3
 800530e:	d11f      	bne.n	8005350 <vTaskDelete+0xac>
				configASSERT( uxSchedulerSuspended == 0 );
 8005310:	4b17      	ldr	r3, [pc, #92]	; (8005370 <vTaskDelete+0xcc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b1a3      	cbz	r3, 8005340 <vTaskDelete+0x9c>
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	b672      	cpsid	i
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	b662      	cpsie	i
 800532a:	e7fe      	b.n	800532a <vTaskDelete+0x86>
				--uxCurrentNumberOfTasks;
 800532c:	4a11      	ldr	r2, [pc, #68]	; (8005374 <vTaskDelete+0xd0>)
				prvDeleteTCB( pxTCB );
 800532e:	4620      	mov	r0, r4
				--uxCurrentNumberOfTasks;
 8005330:	6813      	ldr	r3, [r2, #0]
 8005332:	3b01      	subs	r3, #1
 8005334:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005336:	f7ff fee4 	bl	8005102 <prvDeleteTCB>
				prvResetNextTaskUnblockTime();
 800533a:	f7ff fe8b 	bl	8005054 <prvResetNextTaskUnblockTime>
 800533e:	e7df      	b.n	8005300 <vTaskDelete+0x5c>
				portYIELD_WITHIN_API();
 8005340:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <vTaskDelete+0xd4>)
 8005346:	601a      	str	r2, [r3, #0]
 8005348:	f3bf 8f4f 	dsb	sy
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	bd70      	pop	{r4, r5, r6, pc}
 8005352:	bf00      	nop
 8005354:	20003ed4 	.word	0x20003ed4
 8005358:	20003ee0 	.word	0x20003ee0
 800535c:	20003f80 	.word	0x20003f80
 8005360:	20003f7c 	.word	0x20003f7c
 8005364:	20003fe0 	.word	0x20003fe0
 8005368:	20003f70 	.word	0x20003f70
 800536c:	20003fc8 	.word	0x20003fc8
 8005370:	20003f78 	.word	0x20003f78
 8005374:	20003f6c 	.word	0x20003f6c
 8005378:	e000ed04 	.word	0xe000ed04

0800537c <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800537c:	4a02      	ldr	r2, [pc, #8]	; (8005388 <vTaskSuspendAll+0xc>)
 800537e:	6813      	ldr	r3, [r2, #0]
 8005380:	3301      	adds	r3, #1
 8005382:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20003f78 	.word	0x20003f78

0800538c <xTaskIncrementTick>:
{
 800538c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005390:	4b3d      	ldr	r3, [pc, #244]	; (8005488 <xTaskIncrementTick+0xfc>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d16f      	bne.n	8005478 <xTaskIncrementTick+0xec>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005398:	4b3c      	ldr	r3, [pc, #240]	; (800548c <xTaskIncrementTick+0x100>)
 800539a:	681c      	ldr	r4, [r3, #0]
 800539c:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800539e:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80053a0:	b9cc      	cbnz	r4, 80053d6 <xTaskIncrementTick+0x4a>
			taskSWITCH_DELAYED_LISTS();
 80053a2:	4b3b      	ldr	r3, [pc, #236]	; (8005490 <xTaskIncrementTick+0x104>)
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	b152      	cbz	r2, 80053c0 <xTaskIncrementTick+0x34>
 80053aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ae:	b672      	cpsid	i
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	b662      	cpsie	i
 80053be:	e7fe      	b.n	80053be <xTaskIncrementTick+0x32>
 80053c0:	4a34      	ldr	r2, [pc, #208]	; (8005494 <xTaskIncrementTick+0x108>)
 80053c2:	6819      	ldr	r1, [r3, #0]
 80053c4:	6810      	ldr	r0, [r2, #0]
 80053c6:	6018      	str	r0, [r3, #0]
 80053c8:	6011      	str	r1, [r2, #0]
 80053ca:	4a33      	ldr	r2, [pc, #204]	; (8005498 <xTaskIncrementTick+0x10c>)
 80053cc:	6813      	ldr	r3, [r2, #0]
 80053ce:	3301      	adds	r3, #1
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	f7ff fe3f 	bl	8005054 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053d6:	4d31      	ldr	r5, [pc, #196]	; (800549c <xTaskIncrementTick+0x110>)
 80053d8:	f04f 0b00 	mov.w	fp, #0
 80053dc:	4f30      	ldr	r7, [pc, #192]	; (80054a0 <xTaskIncrementTick+0x114>)
 80053de:	682b      	ldr	r3, [r5, #0]
 80053e0:	429c      	cmp	r4, r3
 80053e2:	d30a      	bcc.n	80053fa <xTaskIncrementTick+0x6e>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053e4:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8005490 <xTaskIncrementTick+0x104>
					prvAddTaskToReadyList( pxTCB );
 80053e8:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 80054b0 <xTaskIncrementTick+0x124>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053ec:	f8da 2000 	ldr.w	r2, [sl]
 80053f0:	6812      	ldr	r2, [r2, #0]
 80053f2:	b9a2      	cbnz	r2, 800541e <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053f8:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <xTaskIncrementTick+0x118>)
 80053fe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005400:	2214      	movs	r2, #20
 8005402:	434a      	muls	r2, r1
 8005404:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8005406:	2a02      	cmp	r2, #2
 8005408:	bf28      	it	cs
 800540a:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 800540e:	4a26      	ldr	r2, [pc, #152]	; (80054a8 <xTaskIncrementTick+0x11c>)
 8005410:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8005412:	2a00      	cmp	r2, #0
}
 8005414:	bf0c      	ite	eq
 8005416:	4658      	moveq	r0, fp
 8005418:	2001      	movne	r0, #1
 800541a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800541e:	f8da 2000 	ldr.w	r2, [sl]
 8005422:	68d2      	ldr	r2, [r2, #12]
 8005424:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005426:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8005428:	428c      	cmp	r4, r1
 800542a:	d201      	bcs.n	8005430 <xTaskIncrementTick+0xa4>
						xNextTaskUnblockTime = xItemValue;
 800542c:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800542e:	e7e4      	b.n	80053fa <xTaskIncrementTick+0x6e>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005430:	f106 0804 	add.w	r8, r6, #4
 8005434:	4640      	mov	r0, r8
 8005436:	f7ff f81a 	bl	800446e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800543a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800543c:	b119      	cbz	r1, 8005446 <xTaskIncrementTick+0xba>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800543e:	f106 0018 	add.w	r0, r6, #24
 8005442:	f7ff f814 	bl	800446e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005446:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8005448:	2201      	movs	r2, #1
 800544a:	f8d9 3000 	ldr.w	r3, [r9]
 800544e:	f04f 0e14 	mov.w	lr, #20
 8005452:	fa02 f100 	lsl.w	r1, r2, r0
 8005456:	4319      	orrs	r1, r3
 8005458:	4b12      	ldr	r3, [pc, #72]	; (80054a4 <xTaskIncrementTick+0x118>)
 800545a:	f8c9 1000 	str.w	r1, [r9]
 800545e:	4641      	mov	r1, r8
 8005460:	fb0e 3000 	mla	r0, lr, r0, r3
 8005464:	f7fe ffe0 	bl	8004428 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005468:	6838      	ldr	r0, [r7, #0]
 800546a:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 800546c:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800546e:	4291      	cmp	r1, r2
 8005470:	bf28      	it	cs
 8005472:	f04f 0b01 	movcs.w	fp, #1
 8005476:	e7b9      	b.n	80053ec <xTaskIncrementTick+0x60>
		++uxPendedTicks;
 8005478:	4a0c      	ldr	r2, [pc, #48]	; (80054ac <xTaskIncrementTick+0x120>)
BaseType_t xSwitchRequired = pdFALSE;
 800547a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800547e:	6813      	ldr	r3, [r2, #0]
 8005480:	3301      	adds	r3, #1
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	e7c3      	b.n	800540e <xTaskIncrementTick+0x82>
 8005486:	bf00      	nop
 8005488:	20003f78 	.word	0x20003f78
 800548c:	20003ff4 	.word	0x20003ff4
 8005490:	20003ed8 	.word	0x20003ed8
 8005494:	20003edc 	.word	0x20003edc
 8005498:	20003fb0 	.word	0x20003fb0
 800549c:	20003fac 	.word	0x20003fac
 80054a0:	20003ed4 	.word	0x20003ed4
 80054a4:	20003ee0 	.word	0x20003ee0
 80054a8:	20003ff8 	.word	0x20003ff8
 80054ac:	20003f74 	.word	0x20003f74
 80054b0:	20003f80 	.word	0x20003f80

080054b4 <xTaskResumeAll>:
{
 80054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 80054b8:	4c32      	ldr	r4, [pc, #200]	; (8005584 <xTaskResumeAll+0xd0>)
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	b953      	cbnz	r3, 80054d4 <xTaskResumeAll+0x20>
 80054be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054c2:	b672      	cpsid	i
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	b662      	cpsie	i
 80054d2:	e7fe      	b.n	80054d2 <xTaskResumeAll+0x1e>
	taskENTER_CRITICAL();
 80054d4:	f7ff f826 	bl	8004524 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80054d8:	6823      	ldr	r3, [r4, #0]
 80054da:	3b01      	subs	r3, #1
 80054dc:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054de:	6824      	ldr	r4, [r4, #0]
 80054e0:	b12c      	cbz	r4, 80054ee <xTaskResumeAll+0x3a>
BaseType_t xAlreadyYielded = pdFALSE;
 80054e2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80054e4:	f7ff f844 	bl	8004570 <vPortExitCritical>
}
 80054e8:	4620      	mov	r0, r4
 80054ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80054ee:	4b26      	ldr	r3, [pc, #152]	; (8005588 <xTaskResumeAll+0xd4>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d0f5      	beq.n	80054e2 <xTaskResumeAll+0x2e>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80054f6:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 80055a0 <xTaskResumeAll+0xec>
					prvAddTaskToReadyList( pxTCB );
 80054fa:	4f24      	ldr	r7, [pc, #144]	; (800558c <xTaskResumeAll+0xd8>)
 80054fc:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 80055a4 <xTaskResumeAll+0xf0>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005500:	f8d9 3000 	ldr.w	r3, [r9]
 8005504:	b9e3      	cbnz	r3, 8005540 <xTaskResumeAll+0x8c>
				if( pxTCB != NULL )
 8005506:	b10c      	cbz	r4, 800550c <xTaskResumeAll+0x58>
					prvResetNextTaskUnblockTime();
 8005508:	f7ff fda4 	bl	8005054 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800550c:	4d20      	ldr	r5, [pc, #128]	; (8005590 <xTaskResumeAll+0xdc>)
 800550e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005510:	b144      	cbz	r4, 8005524 <xTaskResumeAll+0x70>
								xYieldPending = pdTRUE;
 8005512:	4e20      	ldr	r6, [pc, #128]	; (8005594 <xTaskResumeAll+0xe0>)
 8005514:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 8005516:	f7ff ff39 	bl	800538c <xTaskIncrementTick>
 800551a:	b100      	cbz	r0, 800551e <xTaskResumeAll+0x6a>
								xYieldPending = pdTRUE;
 800551c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800551e:	3c01      	subs	r4, #1
 8005520:	d1f9      	bne.n	8005516 <xTaskResumeAll+0x62>
						uxPendedTicks = 0;
 8005522:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8005524:	4b1b      	ldr	r3, [pc, #108]	; (8005594 <xTaskResumeAll+0xe0>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d0da      	beq.n	80054e2 <xTaskResumeAll+0x2e>
					taskYIELD_IF_USING_PREEMPTION();
 800552c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005530:	4b19      	ldr	r3, [pc, #100]	; (8005598 <xTaskResumeAll+0xe4>)
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	f3bf 8f4f 	dsb	sy
 8005538:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800553c:	2401      	movs	r4, #1
 800553e:	e7d1      	b.n	80054e4 <xTaskResumeAll+0x30>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005540:	f8d9 300c 	ldr.w	r3, [r9, #12]
					prvAddTaskToReadyList( pxTCB );
 8005544:	2501      	movs	r5, #1
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005546:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005548:	1d26      	adds	r6, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800554a:	f104 0018 	add.w	r0, r4, #24
 800554e:	f7fe ff8e 	bl	800446e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005552:	4630      	mov	r0, r6
 8005554:	f7fe ff8b 	bl	800446e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005558:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800555a:	6839      	ldr	r1, [r7, #0]
 800555c:	2014      	movs	r0, #20
 800555e:	fa05 f302 	lsl.w	r3, r5, r2
 8005562:	fb00 8002 	mla	r0, r0, r2, r8
 8005566:	430b      	orrs	r3, r1
 8005568:	4631      	mov	r1, r6
 800556a:	603b      	str	r3, [r7, #0]
 800556c:	f7fe ff5c 	bl	8004428 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <xTaskResumeAll+0xe8>)
 8005572:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005578:	429a      	cmp	r2, r3
 800557a:	d3c1      	bcc.n	8005500 <xTaskResumeAll+0x4c>
						xYieldPending = pdTRUE;
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <xTaskResumeAll+0xe0>)
 800557e:	601d      	str	r5, [r3, #0]
 8005580:	e7be      	b.n	8005500 <xTaskResumeAll+0x4c>
 8005582:	bf00      	nop
 8005584:	20003f78 	.word	0x20003f78
 8005588:	20003f6c 	.word	0x20003f6c
 800558c:	20003f80 	.word	0x20003f80
 8005590:	20003f74 	.word	0x20003f74
 8005594:	20003ff8 	.word	0x20003ff8
 8005598:	e000ed04 	.word	0xe000ed04
 800559c:	20003ed4 	.word	0x20003ed4
 80055a0:	20003fb4 	.word	0x20003fb4
 80055a4:	20003ee0 	.word	0x20003ee0

080055a8 <vTaskDelay>:
	{
 80055a8:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80055aa:	b940      	cbnz	r0, 80055be <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80055ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <vTaskDelay+0x44>)
 80055b2:	601a      	str	r2, [r3, #0]
 80055b4:	f3bf 8f4f 	dsb	sy
 80055b8:	f3bf 8f6f 	isb	sy
 80055bc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80055be:	4b0c      	ldr	r3, [pc, #48]	; (80055f0 <vTaskDelay+0x48>)
 80055c0:	6819      	ldr	r1, [r3, #0]
 80055c2:	b151      	cbz	r1, 80055da <vTaskDelay+0x32>
 80055c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c8:	b672      	cpsid	i
 80055ca:	f383 8811 	msr	BASEPRI, r3
 80055ce:	f3bf 8f6f 	isb	sy
 80055d2:	f3bf 8f4f 	dsb	sy
 80055d6:	b662      	cpsie	i
 80055d8:	e7fe      	b.n	80055d8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80055da:	f7ff fecf 	bl	800537c <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80055de:	f7ff fdad 	bl	800513c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80055e2:	f7ff ff67 	bl	80054b4 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0e0      	beq.n	80055ac <vTaskDelay+0x4>
 80055ea:	bd08      	pop	{r3, pc}
 80055ec:	e000ed04 	.word	0xe000ed04
 80055f0:	20003f78 	.word	0x20003f78

080055f4 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055f4:	4b18      	ldr	r3, [pc, #96]	; (8005658 <vTaskSwitchContext+0x64>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	4b18      	ldr	r3, [pc, #96]	; (800565c <vTaskSwitchContext+0x68>)
{
 80055fa:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055fc:	b112      	cbz	r2, 8005604 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80055fe:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8005604:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005606:	4b16      	ldr	r3, [pc, #88]	; (8005660 <vTaskSwitchContext+0x6c>)
 8005608:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800560a:	fab3 f383 	clz	r3, r3
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2214      	movs	r2, #20
 8005612:	4914      	ldr	r1, [pc, #80]	; (8005664 <vTaskSwitchContext+0x70>)
 8005614:	f1c3 031f 	rsb	r3, r3, #31
 8005618:	435a      	muls	r2, r3
 800561a:	588c      	ldr	r4, [r1, r2]
 800561c:	1888      	adds	r0, r1, r2
 800561e:	b954      	cbnz	r4, 8005636 <vTaskSwitchContext+0x42>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005624:	b672      	cpsid	i
 8005626:	f383 8811 	msr	BASEPRI, r3
 800562a:	f3bf 8f6f 	isb	sy
 800562e:	f3bf 8f4f 	dsb	sy
 8005632:	b662      	cpsie	i
 8005634:	e7fe      	b.n	8005634 <vTaskSwitchContext+0x40>
 8005636:	6844      	ldr	r4, [r0, #4]
 8005638:	3208      	adds	r2, #8
 800563a:	6864      	ldr	r4, [r4, #4]
 800563c:	440a      	add	r2, r1
 800563e:	4294      	cmp	r4, r2
 8005640:	6044      	str	r4, [r0, #4]
 8005642:	bf04      	itt	eq
 8005644:	6862      	ldreq	r2, [r4, #4]
 8005646:	6042      	streq	r2, [r0, #4]
 8005648:	2214      	movs	r2, #20
 800564a:	fb02 1303 	mla	r3, r2, r3, r1
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <vTaskSwitchContext+0x74>)
 8005654:	e7d4      	b.n	8005600 <vTaskSwitchContext+0xc>
 8005656:	bf00      	nop
 8005658:	20003f78 	.word	0x20003f78
 800565c:	20003ff8 	.word	0x20003ff8
 8005660:	20003f80 	.word	0x20003f80
 8005664:	20003ee0 	.word	0x20003ee0
 8005668:	20003ed4 	.word	0x20003ed4

0800566c <vTaskPlaceOnEventList>:
{
 800566c:	b510      	push	{r4, lr}
 800566e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8005670:	b950      	cbnz	r0, 8005688 <vTaskPlaceOnEventList+0x1c>
 8005672:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005676:	b672      	cpsid	i
 8005678:	f383 8811 	msr	BASEPRI, r3
 800567c:	f3bf 8f6f 	isb	sy
 8005680:	f3bf 8f4f 	dsb	sy
 8005684:	b662      	cpsie	i
 8005686:	e7fe      	b.n	8005686 <vTaskPlaceOnEventList+0x1a>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <vTaskPlaceOnEventList+0x34>)
 800568a:	6819      	ldr	r1, [r3, #0]
 800568c:	3118      	adds	r1, #24
 800568e:	f7fe fed7 	bl	8004440 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005692:	4620      	mov	r0, r4
 8005694:	2101      	movs	r1, #1
}
 8005696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800569a:	f7ff bd4f 	b.w	800513c <prvAddCurrentTaskToDelayedList>
 800569e:	bf00      	nop
 80056a0:	20003ed4 	.word	0x20003ed4

080056a4 <xTaskRemoveFromEventList>:
{
 80056a4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056a6:	68c3      	ldr	r3, [r0, #12]
 80056a8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80056aa:	b954      	cbnz	r4, 80056c2 <xTaskRemoveFromEventList+0x1e>
 80056ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b0:	b672      	cpsid	i
 80056b2:	f383 8811 	msr	BASEPRI, r3
 80056b6:	f3bf 8f6f 	isb	sy
 80056ba:	f3bf 8f4f 	dsb	sy
 80056be:	b662      	cpsie	i
 80056c0:	e7fe      	b.n	80056c0 <xTaskRemoveFromEventList+0x1c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80056c2:	f104 0518 	add.w	r5, r4, #24
 80056c6:	4628      	mov	r0, r5
 80056c8:	f7fe fed1 	bl	800446e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056cc:	4b11      	ldr	r3, [pc, #68]	; (8005714 <xTaskRemoveFromEventList+0x70>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	b9db      	cbnz	r3, 800570a <xTaskRemoveFromEventList+0x66>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80056d2:	1d25      	adds	r5, r4, #4
 80056d4:	4628      	mov	r0, r5
 80056d6:	f7fe feca 	bl	800446e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80056da:	490f      	ldr	r1, [pc, #60]	; (8005718 <xTaskRemoveFromEventList+0x74>)
 80056dc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056de:	2301      	movs	r3, #1
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	4093      	lsls	r3, r2
 80056e4:	4303      	orrs	r3, r0
 80056e6:	2014      	movs	r0, #20
 80056e8:	600b      	str	r3, [r1, #0]
 80056ea:	4629      	mov	r1, r5
 80056ec:	4b0b      	ldr	r3, [pc, #44]	; (800571c <xTaskRemoveFromEventList+0x78>)
 80056ee:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80056f2:	f7fe fe99 	bl	8004428 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <xTaskRemoveFromEventList+0x7c>)
 80056f8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	429a      	cmp	r2, r3
 8005700:	d906      	bls.n	8005710 <xTaskRemoveFromEventList+0x6c>
		xYieldPending = pdTRUE;
 8005702:	2001      	movs	r0, #1
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <xTaskRemoveFromEventList+0x80>)
 8005706:	6018      	str	r0, [r3, #0]
 8005708:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800570a:	4629      	mov	r1, r5
 800570c:	4806      	ldr	r0, [pc, #24]	; (8005728 <xTaskRemoveFromEventList+0x84>)
 800570e:	e7f0      	b.n	80056f2 <xTaskRemoveFromEventList+0x4e>
		xReturn = pdFALSE;
 8005710:	2000      	movs	r0, #0
}
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	20003f78 	.word	0x20003f78
 8005718:	20003f80 	.word	0x20003f80
 800571c:	20003ee0 	.word	0x20003ee0
 8005720:	20003ed4 	.word	0x20003ed4
 8005724:	20003ff8 	.word	0x20003ff8
 8005728:	20003fb4 	.word	0x20003fb4

0800572c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800572c:	4b03      	ldr	r3, [pc, #12]	; (800573c <vTaskInternalSetTimeOutState+0x10>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005732:	4b03      	ldr	r3, [pc, #12]	; (8005740 <vTaskInternalSetTimeOutState+0x14>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6043      	str	r3, [r0, #4]
 8005738:	4770      	bx	lr
 800573a:	bf00      	nop
 800573c:	20003fb0 	.word	0x20003fb0
 8005740:	20003ff4 	.word	0x20003ff4

08005744 <xTaskCheckForTimeOut>:
{
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8005748:	4605      	mov	r5, r0
 800574a:	b950      	cbnz	r0, 8005762 <xTaskCheckForTimeOut+0x1e>
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	b672      	cpsid	i
 8005752:	f383 8811 	msr	BASEPRI, r3
 8005756:	f3bf 8f6f 	isb	sy
 800575a:	f3bf 8f4f 	dsb	sy
 800575e:	b662      	cpsie	i
 8005760:	e7fe      	b.n	8005760 <xTaskCheckForTimeOut+0x1c>
	configASSERT( pxTicksToWait );
 8005762:	b951      	cbnz	r1, 800577a <xTaskCheckForTimeOut+0x36>
 8005764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005768:	b672      	cpsid	i
 800576a:	f383 8811 	msr	BASEPRI, r3
 800576e:	f3bf 8f6f 	isb	sy
 8005772:	f3bf 8f4f 	dsb	sy
 8005776:	b662      	cpsie	i
 8005778:	e7fe      	b.n	8005778 <xTaskCheckForTimeOut+0x34>
	taskENTER_CRITICAL();
 800577a:	f7fe fed3 	bl	8004524 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800577e:	4b0f      	ldr	r3, [pc, #60]	; (80057bc <xTaskCheckForTimeOut+0x78>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005780:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8005782:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	1c58      	adds	r0, r3, #1
 8005788:	d00e      	beq.n	80057a8 <xTaskCheckForTimeOut+0x64>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800578a:	480d      	ldr	r0, [pc, #52]	; (80057c0 <xTaskCheckForTimeOut+0x7c>)
 800578c:	682e      	ldr	r6, [r5, #0]
 800578e:	6800      	ldr	r0, [r0, #0]
 8005790:	4286      	cmp	r6, r0
 8005792:	d001      	beq.n	8005798 <xTaskCheckForTimeOut+0x54>
 8005794:	428a      	cmp	r2, r1
 8005796:	d20e      	bcs.n	80057b6 <xTaskCheckForTimeOut+0x72>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005798:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800579a:	429a      	cmp	r2, r3
 800579c:	d209      	bcs.n	80057b2 <xTaskCheckForTimeOut+0x6e>
			*pxTicksToWait -= xElapsedTime;
 800579e:	1a9b      	subs	r3, r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a0:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80057a2:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80057a4:	f7ff ffc2 	bl	800572c <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80057a8:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80057aa:	f7fe fee1 	bl	8004570 <vPortExitCritical>
}
 80057ae:	4620      	mov	r0, r4
 80057b0:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80057b2:	2300      	movs	r3, #0
 80057b4:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80057b6:	2401      	movs	r4, #1
 80057b8:	e7f7      	b.n	80057aa <xTaskCheckForTimeOut+0x66>
 80057ba:	bf00      	nop
 80057bc:	20003ff4 	.word	0x20003ff4
 80057c0:	20003fb0 	.word	0x20003fb0

080057c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80057c4:	2201      	movs	r2, #1
 80057c6:	4b01      	ldr	r3, [pc, #4]	; (80057cc <vTaskMissedYield+0x8>)
 80057c8:	601a      	str	r2, [r3, #0]
 80057ca:	4770      	bx	lr
 80057cc:	20003ff8 	.word	0x20003ff8

080057d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80057d0:	4b05      	ldr	r3, [pc, #20]	; (80057e8 <xTaskGetSchedulerState+0x18>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b133      	cbz	r3, 80057e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057d6:	4b05      	ldr	r3, [pc, #20]	; (80057ec <xTaskGetSchedulerState+0x1c>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80057dc:	bf0c      	ite	eq
 80057de:	2002      	moveq	r0, #2
 80057e0:	2000      	movne	r0, #0
 80057e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80057e4:	2001      	movs	r0, #1
	}
 80057e6:	4770      	bx	lr
 80057e8:	20003fc8 	.word	0x20003fc8
 80057ec:	20003f78 	.word	0x20003f78

080057f0 <xTaskPriorityDisinherit>:
	{
 80057f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80057f2:	4604      	mov	r4, r0
 80057f4:	b908      	cbnz	r0, 80057fa <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80057f6:	2000      	movs	r0, #0
 80057f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80057fa:	4b24      	ldr	r3, [pc, #144]	; (800588c <xTaskPriorityDisinherit+0x9c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4298      	cmp	r0, r3
 8005800:	d00a      	beq.n	8005818 <xTaskPriorityDisinherit+0x28>
 8005802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005806:	b672      	cpsid	i
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	b662      	cpsie	i
 8005816:	e7fe      	b.n	8005816 <xTaskPriorityDisinherit+0x26>
			configASSERT( pxTCB->uxMutexesHeld );
 8005818:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800581a:	b953      	cbnz	r3, 8005832 <xTaskPriorityDisinherit+0x42>
 800581c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005820:	b672      	cpsid	i
 8005822:	f383 8811 	msr	BASEPRI, r3
 8005826:	f3bf 8f6f 	isb	sy
 800582a:	f3bf 8f4f 	dsb	sy
 800582e:	b662      	cpsie	i
 8005830:	e7fe      	b.n	8005830 <xTaskPriorityDisinherit+0x40>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005832:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
			( pxTCB->uxMutexesHeld )--;
 8005834:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005836:	6c42      	ldr	r2, [r0, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8005838:	6483      	str	r3, [r0, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800583a:	4291      	cmp	r1, r2
 800583c:	d0db      	beq.n	80057f6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1d9      	bne.n	80057f6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005842:	1d05      	adds	r5, r0, #4
 8005844:	4e12      	ldr	r6, [pc, #72]	; (8005890 <xTaskPriorityDisinherit+0xa0>)
 8005846:	4628      	mov	r0, r5
 8005848:	f7fe fe11 	bl	800446e <uxListRemove>
 800584c:	4a11      	ldr	r2, [pc, #68]	; (8005894 <xTaskPriorityDisinherit+0xa4>)
 800584e:	b950      	cbnz	r0, 8005866 <xTaskPriorityDisinherit+0x76>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005850:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8005852:	2114      	movs	r1, #20
 8005854:	4379      	muls	r1, r7
 8005856:	5873      	ldr	r3, [r6, r1]
 8005858:	b92b      	cbnz	r3, 8005866 <xTaskPriorityDisinherit+0x76>
 800585a:	2001      	movs	r0, #1
 800585c:	6813      	ldr	r3, [r2, #0]
 800585e:	40b8      	lsls	r0, r7
 8005860:	ea23 0300 	bic.w	r3, r3, r0
 8005864:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005866:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005868:	f1c3 0107 	rsb	r1, r3, #7
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800586c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800586e:	61a1      	str	r1, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8005870:	2401      	movs	r4, #1
 8005872:	6811      	ldr	r1, [r2, #0]
 8005874:	fa04 f003 	lsl.w	r0, r4, r3
 8005878:	4308      	orrs	r0, r1
 800587a:	4629      	mov	r1, r5
 800587c:	6010      	str	r0, [r2, #0]
 800587e:	2014      	movs	r0, #20
 8005880:	fb00 6003 	mla	r0, r0, r3, r6
 8005884:	f7fe fdd0 	bl	8004428 <vListInsertEnd>
					xReturn = pdTRUE;
 8005888:	4620      	mov	r0, r4
	}
 800588a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588c:	20003ed4 	.word	0x20003ed4
 8005890:	20003ee0 	.word	0x20003ee0
 8005894:	20003f80 	.word	0x20003f80

08005898 <MT48LC4M32B2_Init>:

FMC_SDRAM_CommandTypeDef command;
HAL_StatusTypeDef hal_stat;

void MT48LC4M32B2_Init(SDRAM_HandleTypeDef *hsdram)
	{
 8005898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}

	 // Вкл тактирование, обращение именно к 1 банку памяти, одно автообновление (1-16)

	    __IO uint32_t tmpmrd =0;
	    command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 800589c:	4c28      	ldr	r4, [pc, #160]	; (8005940 <MT48LC4M32B2_Init+0xa8>)
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 800589e:	2501      	movs	r5, #1
	    __IO uint32_t tmpmrd =0;
 80058a0:	f04f 0900 	mov.w	r9, #0
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80058a4:	f04f 0810 	mov.w	r8, #16
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80058a8:	4f26      	ldr	r7, [pc, #152]	; (8005944 <MT48LC4M32B2_Init+0xac>)
 80058aa:	4621      	mov	r1, r4
 80058ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
	{
 80058b0:	4606      	mov	r6, r0
	    __IO uint32_t tmpmrd =0;
 80058b2:	f8cd 9004 	str.w	r9, [sp, #4]
	    command.AutoRefreshNumber = 1;
 80058b6:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 80058b8:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80058bc:	e884 0120 	stmia.w	r4, {r5, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80058c0:	f7fc fd3b 	bl	800233a <HAL_SDRAM_SendCommand>
 80058c4:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 80058c6:	4628      	mov	r0, r5
 80058c8:	f7fa febc 	bl	8000644 <HAL_Delay>

	// Деактивируем все банки памяти перед регенерацией

	    command.CommandMode = FMC_SDRAM_CMD_PALL;
 80058cc:	2302      	movs	r3, #2
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80058ce:	4621      	mov	r1, r4
 80058d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058d4:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 80058d6:	60a5      	str	r5, [r4, #8]
	    command.ModeRegisterDefinition = 0;
 80058d8:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80058dc:	e884 0108 	stmia.w	r4, {r3, r8}
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80058e0:	f7fc fd2b 	bl	800233a <HAL_SDRAM_SendCommand>
 80058e4:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 80058e6:	4628      	mov	r0, r5
 80058e8:	f7fa feac 	bl	8000644 <HAL_Delay>

	// Задаём нормальный режим автогенерации

	    command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80058ec:	2303      	movs	r3, #3
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 8;
	    command.ModeRegisterDefinition = 0;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 80058ee:	4621      	mov	r1, r4
 80058f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80058f4:	4630      	mov	r0, r6
	    command.ModeRegisterDefinition = 0;
 80058f6:	f8c4 900c 	str.w	r9, [r4, #12]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 80058fa:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.AutoRefreshNumber = 8;
 80058fe:	2308      	movs	r3, #8
 8005900:	60a3      	str	r3, [r4, #8]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005902:	f7fc fd1a 	bl	800233a <HAL_SDRAM_SendCommand>
 8005906:	7038      	strb	r0, [r7, #0]
	    HAL_Delay(1);
 8005908:	4628      	mov	r0, r5
 800590a:	f7fa fe9b 	bl	8000644 <HAL_Delay>

	// Включаем размер пакета, последовательный режим передачи,
	// латентность 2 такта, стандартный режим, одиночный режим записи пакета

	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800590e:	f44f 7308 	mov.w	r3, #544	; 0x220
	                      SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
	    command.AutoRefreshNumber = 1;
	    command.ModeRegisterDefinition = tmpmrd;
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005912:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005916:	4621      	mov	r1, r4
	    tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 8005918:	9301      	str	r3, [sp, #4]
	    command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800591a:	2304      	movs	r3, #4
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 800591c:	4630      	mov	r0, r6
	    command.AutoRefreshNumber = 1;
 800591e:	60a5      	str	r5, [r4, #8]
	    command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK1;
 8005920:	e884 0108 	stmia.w	r4, {r3, r8}
	    command.ModeRegisterDefinition = tmpmrd;
 8005924:	9b01      	ldr	r3, [sp, #4]
 8005926:	60e3      	str	r3, [r4, #12]
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005928:	f7fc fd07 	bl	800233a <HAL_SDRAM_SendCommand>

	    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 800592c:	f240 6103 	movw	r1, #1539	; 0x603
	    hal_stat = HAL_SDRAM_SendCommand(hsdram, &command, SDRAM_TIMEOUT);
 8005930:	7038      	strb	r0, [r7, #0]
	    HAL_SDRAM_ProgramRefreshRate(hsdram, REFRESH_COUNT);
 8005932:	4630      	mov	r0, r6
 8005934:	f7fc fd18 	bl	8002368 <HAL_SDRAM_ProgramRefreshRate>
	}
 8005938:	b003      	add	sp, #12
 800593a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800593e:	bf00      	nop
 8005940:	20004458 	.word	0x20004458
 8005944:	20004468 	.word	0x20004468

08005948 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005948:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800594a:	4903      	ldr	r1, [pc, #12]	; (8005958 <MX_FATFS_Init+0x10>)
 800594c:	4803      	ldr	r0, [pc, #12]	; (800595c <MX_FATFS_Init+0x14>)
 800594e:	f7fe fcb3 	bl	80042b8 <FATFS_LinkDriver>
 8005952:	4b03      	ldr	r3, [pc, #12]	; (8005960 <MX_FATFS_Init+0x18>)
 8005954:	7018      	strb	r0, [r3, #0]
 8005956:	bd08      	pop	{r3, pc}
 8005958:	20004470 	.word	0x20004470
 800595c:	200001f8 	.word	0x200001f8
 8005960:	20004474 	.word	0x20004474

08005964 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8005964:	4770      	bx	lr
	...

08005968 <TFT_FillScreen>:
//————————————————

void TFT_FillScreen(uint32_t color)
{
 uint32_t i;
 uint32_t n = hltdc.LayerCfg[0].ImageHeight*hltdc.LayerCfg[0].ImageWidth;
 8005968:	4b06      	ldr	r3, [pc, #24]	; (8005984 <TFT_FillScreen+0x1c>)
 800596a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800596c:	6e59      	ldr	r1, [r3, #100]	; 0x64
 800596e:	4351      	muls	r1, r2
 for(i=0;i<n;i++)
 8005970:	2200      	movs	r2, #0
{
 8005972:	b510      	push	{r4, lr}
 for(i=0;i<n;i++)
 8005974:	428a      	cmp	r2, r1
 8005976:	d100      	bne.n	800597a <TFT_FillScreen+0x12>
 {
  *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*4)) = color;
 }
}
 8005978:	bd10      	pop	{r4, pc}
  *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress + (i*4)) = color;
 800597a:	6ddc      	ldr	r4, [r3, #92]	; 0x5c
 800597c:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
 for(i=0;i<n;i++)
 8005980:	3201      	adds	r2, #1
 8005982:	e7f7      	b.n	8005974 <TFT_FillScreen+0xc>
 8005984:	20006510 	.word	0x20006510

08005988 <TFT_DrawPixel>:
//————————————————

void TFT_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t color)
{
 8005988:	b510      	push	{r4, lr}
 *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress +
		 (4*(Ypos*hltdc.LayerCfg[0].ImageWidth + Xpos))) = color;
 800598a:	4c04      	ldr	r4, [pc, #16]	; (800599c <TFT_DrawPixel+0x14>)
 800598c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800598e:	fb03 0101 	mla	r1, r3, r1, r0
 *(__IO uint32_t*) (hltdc.LayerCfg[0].FBStartAdress +
 8005992:	6de3      	ldr	r3, [r4, #92]	; 0x5c
		 (4*(Ypos*hltdc.LayerCfg[0].ImageWidth + Xpos))) = color;
 8005994:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 8005998:	bd10      	pop	{r4, pc}
 800599a:	bf00      	nop
 800599c:	20006510 	.word	0x20006510

080059a0 <TFT_DrawLine>:
 }
}
//————————————————

void TFT_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint32_t color)
{
 80059a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t buf;
	int steep = abs(y2-y1)>abs(x2-x1);
 80059a4:	eba3 0801 	sub.w	r8, r3, r1
 80059a8:	eba2 0900 	sub.w	r9, r2, r0
{
 80059ac:	4604      	mov	r4, r0
 80059ae:	460d      	mov	r5, r1
	int steep = abs(y2-y1)>abs(x2-x1);
 80059b0:	f1b8 0f00 	cmp.w	r8, #0
{
 80059b4:	4617      	mov	r7, r2
	int steep = abs(y2-y1)>abs(x2-x1);
 80059b6:	bfb8      	it	lt
 80059b8:	f1c8 0800 	rsblt	r8, r8, #0
 80059bc:	f1b9 0f00 	cmp.w	r9, #0
 80059c0:	bfb8      	it	lt
 80059c2:	f1c9 0900 	rsblt	r9, r9, #0
	if(steep)
 80059c6:	45c8      	cmp	r8, r9
 80059c8:	dd03      	ble.n	80059d2 <TFT_DrawLine+0x32>
	{
		buf = x1; x1 = y1; y1 = buf;
		buf = x2; x2 = y2; y2 = buf;
 80059ca:	461f      	mov	r7, r3
		buf = x1; x1 = y1; y1 = buf;
 80059cc:	460c      	mov	r4, r1
		buf = x2; x2 = y2; y2 = buf;
 80059ce:	4613      	mov	r3, r2
		buf = x1; x1 = y1; y1 = buf;
 80059d0:	4605      	mov	r5, r0
	}
	if(x1>x2)
 80059d2:	42bc      	cmp	r4, r7
 80059d4:	d905      	bls.n	80059e2 <TFT_DrawLine+0x42>
 80059d6:	462a      	mov	r2, r5
	{
		buf = x1; x1 = x2; x2 = buf;
		buf = y1; y1 = y2; y2 = buf;
 80059d8:	461d      	mov	r5, r3
 80059da:	4613      	mov	r3, r2
	if(x1>x2)
 80059dc:	4622      	mov	r2, r4
 80059de:	463c      	mov	r4, r7
 80059e0:	4617      	mov	r7, r2
	}
	int dx,dy;
	dx=x2-x1;
	dy=abs(y2-y1);
 80059e2:	eba3 0a05 	sub.w	sl, r3, r5
	dx=x2-x1;
 80059e6:	eba7 0b04 	sub.w	fp, r7, r4
	int err=dx/2;
 80059ea:	2202      	movs	r2, #2
	dy=abs(y2-y1);
 80059ec:	f1ba 0f00 	cmp.w	sl, #0
	int err=dx/2;
 80059f0:	fb9b f6f2 	sdiv	r6, fp, r2
	dy=abs(y2-y1);
 80059f4:	bfb8      	it	lt
 80059f6:	f1ca 0a00 	rsblt	sl, sl, #0
	int ystep;
	if(y1<y2) ystep=1;
	else ystep=-1;
 80059fa:	429d      	cmp	r5, r3
 80059fc:	bf34      	ite	cc
 80059fe:	2301      	movcc	r3, #1
 8005a00:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
 8005a04:	9301      	str	r3, [sp, #4]
	for(;x1<=x2;x1++)
 8005a06:	42bc      	cmp	r4, r7
 8005a08:	d902      	bls.n	8005a10 <TFT_DrawLine+0x70>
		{
			y1 += ystep;
			err=dx;
		}
	}
}
 8005a0a:	b003      	add	sp, #12
 8005a0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(steep) TFT_DrawPixel(y1,x1,color);
 8005a10:	45c8      	cmp	r8, r9
 8005a12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a14:	bfcb      	itete	gt
 8005a16:	4628      	movgt	r0, r5
		else TFT_DrawPixel(x1,y1,color);
 8005a18:	4629      	movle	r1, r5
		if(steep) TFT_DrawPixel(y1,x1,color);
 8005a1a:	4621      	movgt	r1, r4
		else TFT_DrawPixel(x1,y1,color);
 8005a1c:	4620      	movle	r0, r4
 8005a1e:	f7ff ffb3 	bl	8005988 <TFT_DrawPixel>
		if(err<0)
 8005a22:	ebb6 060a 	subs.w	r6, r6, sl
	for(;x1<=x2;x1++)
 8005a26:	f104 0401 	add.w	r4, r4, #1
			y1 += ystep;
 8005a2a:	bf44      	itt	mi
 8005a2c:	9b01      	ldrmi	r3, [sp, #4]
			err=dx;
 8005a2e:	465e      	movmi	r6, fp
	for(;x1<=x2;x1++)
 8005a30:	b2a4      	uxth	r4, r4
			y1 += ystep;
 8005a32:	bf44      	itt	mi
 8005a34:	18ed      	addmi	r5, r5, r3
 8005a36:	b2ad      	uxthmi	r5, r5
 8005a38:	e7e5      	b.n	8005a06 <TFT_DrawLine+0x66>
	...

08005a3c <lcd_switch_buffer>:
  LCD_SetFont(&LCD_DEFAULT_FONT);
}*/

void lcd_switch_buffer(void)
{
  if (lcd_current_framebuffer == LCD_FRAME_BUFFER0)
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <lcd_switch_buffer+0x2c>)
 8005a3e:	490b      	ldr	r1, [pc, #44]	; (8005a6c <lcd_switch_buffer+0x30>)
 8005a40:	6818      	ldr	r0, [r3, #0]
 8005a42:	4a0b      	ldr	r2, [pc, #44]	; (8005a70 <lcd_switch_buffer+0x34>)
 8005a44:	f1b0 4f50 	cmp.w	r0, #3489660928	; 0xd0000000
    lcd_current_framebuffer = LCD_FRAME_BUFFER1;
    lcd_shadow_framebuffer = LCD_FRAME_BUFFER0;
  }
  else
  {
    lcd_current_framebuffer = LCD_FRAME_BUFFER0;
 8005a48:	bf13      	iteet	ne
 8005a4a:	f04f 4050 	movne.w	r0, #3489660928	; 0xd0000000
    lcd_current_framebuffer = LCD_FRAME_BUFFER1;
 8005a4e:	6019      	streq	r1, [r3, #0]
    lcd_shadow_framebuffer = LCD_FRAME_BUFFER0;
 8005a50:	6010      	streq	r0, [r2, #0]
    lcd_current_framebuffer = LCD_FRAME_BUFFER0;
 8005a52:	6018      	strne	r0, [r3, #0]
    lcd_shadow_framebuffer = LCD_FRAME_BUFFER1;
 8005a54:	bf18      	it	ne
 8005a56:	6011      	strne	r1, [r2, #0]
  }
  LTDC_Layer1->CFBAR = lcd_current_framebuffer;
  HAL_LTDC_Relaod(&hltdc, LTDC_SRCR_VBR);
 8005a58:	2102      	movs	r1, #2
  LTDC_Layer1->CFBAR = lcd_current_framebuffer;
 8005a5a:	681a      	ldr	r2, [r3, #0]
 8005a5c:	4b05      	ldr	r3, [pc, #20]	; (8005a74 <lcd_switch_buffer+0x38>)
  HAL_LTDC_Relaod(&hltdc, LTDC_SRCR_VBR);
 8005a5e:	4806      	ldr	r0, [pc, #24]	; (8005a78 <lcd_switch_buffer+0x3c>)
  LTDC_Layer1->CFBAR = lcd_current_framebuffer;
 8005a60:	629a      	str	r2, [r3, #40]	; 0x28
  HAL_LTDC_Relaod(&hltdc, LTDC_SRCR_VBR);
 8005a62:	f7fb be96 	b.w	8001792 <HAL_LTDC_Reload>
 8005a66:	bf00      	nop
 8005a68:	20000048 	.word	0x20000048
 8005a6c:	d003fc00 	.word	0xd003fc00
 8005a70:	2000004c 	.word	0x2000004c
 8005a74:	40016884 	.word	0x40016884
 8005a78:	20006510 	.word	0x20006510

08005a7c <lcd_switch_to_single_buffer_mode>:
}

//Switch this driver to be work with single framebuffer (LCD_FRAME_BUFFER0)
void lcd_switch_to_single_buffer_mode(void)
{
  lcd_current_framebuffer = LCD_FRAME_BUFFER0;
 8005a7c:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 8005a80:	4a04      	ldr	r2, [pc, #16]	; (8005a94 <lcd_switch_to_single_buffer_mode+0x18>)
  lcd_shadow_framebuffer = LCD_FRAME_BUFFER0;
  LTDC_Layer1->CFBAR = lcd_current_framebuffer;
  HAL_LTDC_Relaod(&hltdc, LTDC_SRCR_VBR);
 8005a82:	2102      	movs	r1, #2
 8005a84:	4804      	ldr	r0, [pc, #16]	; (8005a98 <lcd_switch_to_single_buffer_mode+0x1c>)
  lcd_current_framebuffer = LCD_FRAME_BUFFER0;
 8005a86:	6013      	str	r3, [r2, #0]
  lcd_shadow_framebuffer = LCD_FRAME_BUFFER0;
 8005a88:	4a04      	ldr	r2, [pc, #16]	; (8005a9c <lcd_switch_to_single_buffer_mode+0x20>)
 8005a8a:	6013      	str	r3, [r2, #0]
  LTDC_Layer1->CFBAR = lcd_current_framebuffer;
 8005a8c:	4a04      	ldr	r2, [pc, #16]	; (8005aa0 <lcd_switch_to_single_buffer_mode+0x24>)
 8005a8e:	6293      	str	r3, [r2, #40]	; 0x28
  HAL_LTDC_Relaod(&hltdc, LTDC_SRCR_VBR);
 8005a90:	f7fb be7f 	b.w	8001792 <HAL_LTDC_Reload>
 8005a94:	20000048 	.word	0x20000048
 8005a98:	20006510 	.word	0x20006510
 8005a9c:	2000004c 	.word	0x2000004c
 8005aa0:	40016884 	.word	0x40016884

08005aa4 <LCD_DrawChar>:
  uint32_t  Xaddress = 0;

  xpos = Xpos*LCD_PIXEL_WIDTH*2;
  Xaddress += Ypos;

  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005aa4:	4b22      	ldr	r3, [pc, #136]	; (8005b30 <LCD_DrawChar+0x8c>)
 8005aa6:	f8d3 c000 	ldr.w	ip, [r3]
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentBackColor;
      }
      else
      {
          /* Write data value to all SDRAM memory */
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentTextColor;
 8005aaa:	4b22      	ldr	r3, [pc, #136]	; (8005b34 <LCD_DrawChar+0x90>)
{
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f44f 7470 	mov.w	r4, #960	; 0x3c0
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005ab6:	2700      	movs	r7, #0
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005ab8:	f04f 0a0c 	mov.w	sl, #12
 8005abc:	fb04 3000 	mla	r0, r4, r0, r3
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentTextColor;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <LCD_DrawChar+0x94>)
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005ac2:	f04f 0b80 	mov.w	fp, #128	; 0x80
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentTextColor;
 8005ac6:	f8b3 8000 	ldrh.w	r8, [r3]
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8005aca:	4b1c      	ldr	r3, [pc, #112]	; (8005b3c <LCD_DrawChar+0x98>)
 8005acc:	f8b3 9000 	ldrh.w	r9, [r3]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005ad0:	f8bc 3006 	ldrh.w	r3, [ip, #6]
 8005ad4:	429f      	cmp	r7, r3
 8005ad6:	d228      	bcs.n	8005b2a <LCD_DrawChar+0x86>
 8005ad8:	eb00 0641 	add.w	r6, r0, r1, lsl #1
 8005adc:	2400      	movs	r4, #0
 8005ade:	e017      	b.n	8005b10 <LCD_DrawChar+0x6c>
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005ae0:	fbb5 f3fa 	udiv	r3, r5, sl
 8005ae4:	00db      	lsls	r3, r3, #3
 8005ae6:	f832 e017 	ldrh.w	lr, [r2, r7, lsl #1]
 8005aea:	fa0b f303 	lsl.w	r3, fp, r3
 8005aee:	4123      	asrs	r3, r4
 8005af0:	ea13 0f0e 	tst.w	r3, lr
 8005af4:	d101      	bne.n	8005afa <LCD_DrawChar+0x56>
 8005af6:	2d0c      	cmp	r5, #12
 8005af8:	d906      	bls.n	8005b08 <LCD_DrawChar+0x64>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8005afa:	fa4e fe04 	asr.w	lr, lr, r4
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) &&(LCD_Currentfonts->Width <= 12))||
 8005afe:	f01e 0f01 	tst.w	lr, #1
 8005b02:	d10f      	bne.n	8005b24 <LCD_DrawChar+0x80>
        (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8005b04:	2d0c      	cmp	r5, #12
 8005b06:	d90d      	bls.n	8005b24 <LCD_DrawChar+0x80>
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentBackColor;
 8005b08:	f8a6 9000 	strh.w	r9, [r6]
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 8005b0c:	3401      	adds	r4, #1
 8005b0e:	3602      	adds	r6, #2
 8005b10:	f8bc 5004 	ldrh.w	r5, [ip, #4]
 8005b14:	1863      	adds	r3, r4, r1
 8005b16:	42ac      	cmp	r4, r5
 8005b18:	d3e2      	bcc.n	8005ae0 <LCD_DrawChar+0x3c>
 8005b1a:	f503 71f0 	add.w	r1, r3, #480	; 0x1e0
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 8005b1e:	3701      	adds	r7, #1
      }
      Xaddress++;
    }
      Xaddress += (LCD_PIXEL_WIDTH - LCD_Currentfonts->Width);
 8005b20:	1b49      	subs	r1, r1, r5
 8005b22:	e7d5      	b.n	8005ad0 <LCD_DrawChar+0x2c>
         *(__IO uint16_t*) (lcd_shadow_framebuffer + (2*Xaddress) + xpos) = CurrentTextColor;
 8005b24:	f8a6 8000 	strh.w	r8, [r6]
 8005b28:	e7f0      	b.n	8005b0c <LCD_DrawChar+0x68>
 8005b2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b2e:	bf00      	nop
 8005b30:	20004000 	.word	0x20004000
 8005b34:	2000004c 	.word	0x2000004c
 8005b38:	20003ffc 	.word	0x20003ffc
 8005b3c:	20000044 	.word	0x20000044

08005b40 <LCD_DisplayChar>:
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E.
  * @retval None
  */
void LCD_DisplayChar(uint16_t Line, uint16_t Column, uint8_t Ascii)
{
  if (Ascii < 0x20)
 8005b40:	2a1f      	cmp	r2, #31
{
 8005b42:	b410      	push	{r4}
  if (Ascii < 0x20)
 8005b44:	d90c      	bls.n	8005b60 <LCD_DisplayChar+0x20>
    return;

  Ascii -= 32;

  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8005b46:	4b08      	ldr	r3, [pc, #32]	; (8005b68 <LCD_DisplayChar+0x28>)
  Ascii -= 32;
 8005b48:	3a20      	subs	r2, #32
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8005b4a:	681c      	ldr	r4, [r3, #0]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	88e3      	ldrh	r3, [r4, #6]
 8005b50:	435a      	muls	r2, r3
 8005b52:	6823      	ldr	r3, [r4, #0]
}
 8005b54:	f85d 4b04 	ldr.w	r4, [sp], #4
  LCD_DrawChar(Line, Column, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 8005b58:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005b5c:	f7ff bfa2 	b.w	8005aa4 <LCD_DrawChar>
}
 8005b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	20004000 	.word	0x20004000

08005b6c <LCD_DisplayStringLine>:
  *     @arg Linex: where x can be 0..9
  * @param  *ptr: pointer to string to display on LCD.
  * @retval None
  */
void LCD_DisplayStringLine(uint16_t Line, uint8_t *ptr)
{
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	4606      	mov	r6, r0
 8005b72:	1e4d      	subs	r5, r1, #1
  uint16_t refcolumn = 0;
 8005b74:	2400      	movs	r4, #0
  /* Send the string character by character on lCD */
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) &
      (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8005b76:	4f0c      	ldr	r7, [pc, #48]	; (8005ba8 <LCD_DisplayStringLine+0x3c>)
 8005b78:	f8d7 8000 	ldr.w	r8, [r7]
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) &
 8005b7c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
      (((refcolumn + LCD_Currentfonts->Width) & 0xFFFF) >= LCD_Currentfonts->Width)))
 8005b80:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8005b84:	190b      	adds	r3, r1, r4
 8005b86:	b29b      	uxth	r3, r3
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) &
 8005b88:	428b      	cmp	r3, r1
 8005b8a:	db0b      	blt.n	8005ba4 <LCD_DisplayStringLine+0x38>
 8005b8c:	b152      	cbz	r2, 8005ba4 <LCD_DisplayStringLine+0x38>
  {
    /* Display one character on LCD */
    LCD_DisplayChar(Line, refcolumn, *ptr);
 8005b8e:	4621      	mov	r1, r4
 8005b90:	4630      	mov	r0, r6
 8005b92:	f7ff ffd5 	bl	8005b40 <LCD_DisplayChar>
    /* Decrement the column position by width */
    refcolumn += LCD_Currentfonts->Width;
 8005b96:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8005b9a:	441c      	add	r4, r3
 8005b9c:	b2a4      	uxth	r4, r4
  while ((refcolumn < LCD_PIXEL_WIDTH) && ((*ptr != 0) &
 8005b9e:	f5b4 7ff0 	cmp.w	r4, #480	; 0x1e0
 8005ba2:	d3e9      	bcc.n	8005b78 <LCD_DisplayStringLine+0xc>
 8005ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ba8:	20004000 	.word	0x20004000

08005bac <lcd_set_pixel>:
  }
}

void lcd_set_pixel(uint16_t x, uint16_t y, uint16_t color)
{
  uint32_t pos = (y * LCD_PIXEL_WIDTH + x) * LCD_BYTES_IN_PIXEL;
 8005bac:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005bb0:	fb03 0101 	mla	r1, r3, r1, r0
  *(__IO uint16_t*)(lcd_shadow_framebuffer + pos) = color;
 8005bb4:	4b02      	ldr	r3, [pc, #8]	; (8005bc0 <lcd_set_pixel+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
 8005bbc:	4770      	bx	lr
 8005bbe:	bf00      	nop
 8005bc0:	2000004c 	.word	0x2000004c

08005bc4 <lcd_convert_to_color32>:
}

//Convert from 565 to 888
uint32_t lcd_convert_to_color32(uint16_t color)
{
  uint8_t r5 = color >> 11;
 8005bc4:	0ac3      	lsrs	r3, r0, #11
  uint8_t g6 = (color & 0x7E0) >> 5;
 8005bc6:	f3c0 1145 	ubfx	r1, r0, #5, #6
  uint8_t b5 = color & 0x1F;
 8005bca:	f000 001f 	and.w	r0, r0, #31

  uint8_t r8 = ( r5 << 3 ) | (r5 >> 2);
 8005bce:	089a      	lsrs	r2, r3, #2
  uint8_t g8 = ( g6 << 2 ) | (g6 >> 4);
  uint8_t b8 = ( b5 << 3 ) | (b5 >> 2);

  return ((uint32_t)r8 << 16) | ((uint32_t)g8 << 8) | (uint32_t)b8;
 8005bd0:	ea42 02c3 	orr.w	r2, r2, r3, lsl #3
  uint8_t b8 = ( b5 << 3 ) | (b5 >> 2);
 8005bd4:	0883      	lsrs	r3, r0, #2
  return ((uint32_t)r8 << 16) | ((uint32_t)g8 << 8) | (uint32_t)b8;
 8005bd6:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
  uint8_t g8 = ( g6 << 2 ) | (g6 >> 4);
 8005bda:	090b      	lsrs	r3, r1, #4
  return ((uint32_t)r8 << 16) | ((uint32_t)g8 << 8) | (uint32_t)b8;
 8005bdc:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8005be0:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
}
 8005be4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8005be8:	4770      	bx	lr
	...

08005bec <lcd_clear>:
{
 8005bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t color32 =  lcd_convert_to_color32(color);
 8005bee:	f7ff ffe9 	bl	8005bc4 <lcd_convert_to_color32>
  hdma2d.Init.Mode = DMA2D_R2M;
 8005bf2:	4c11      	ldr	r4, [pc, #68]	; (8005c38 <lcd_clear+0x4c>)
 8005bf4:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  uint32_t color32 =  lcd_convert_to_color32(color);
 8005bf8:	4605      	mov	r5, r0
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8005bfa:	4620      	mov	r0, r4
  hdma2d.Init.Mode = DMA2D_R2M;
 8005bfc:	6063      	str	r3, [r4, #4]
  hdma2d.Init.OutputOffset = 0;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	60e3      	str	r3, [r4, #12]
  if(HAL_DMA2D_Init(&hdma2d) == HAL_OK)
 8005c02:	f7fa fe2b 	bl	800085c <HAL_DMA2D_Init>
 8005c06:	b978      	cbnz	r0, 8005c28 <lcd_clear+0x3c>
    if (HAL_DMA2D_Start(&hdma2d, color32, lcd_shadow_framebuffer,
 8005c08:	f44f 7388 	mov.w	r3, #272	; 0x110
 8005c0c:	4a0b      	ldr	r2, [pc, #44]	; (8005c3c <lcd_clear+0x50>)
 8005c0e:	4629      	mov	r1, r5
 8005c10:	4620      	mov	r0, r4
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8005c18:	6812      	ldr	r2, [r2, #0]
 8005c1a:	f7fa fe4b 	bl	80008b4 <HAL_DMA2D_Start>
 8005c1e:	b918      	cbnz	r0, 8005c28 <lcd_clear+0x3c>
      HAL_DMA2D_PollForTransfer(&hdma2d, 10);
 8005c20:	210a      	movs	r1, #10
 8005c22:	4620      	mov	r0, r4
 8005c24:	f7fa fe60 	bl	80008e8 <HAL_DMA2D_PollForTransfer>
  lcd_printing_x = 10;
 8005c28:	220a      	movs	r2, #10
 8005c2a:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <lcd_clear+0x54>)
 8005c2c:	801a      	strh	r2, [r3, #0]
  lcd_printing_y = 0;
 8005c2e:	2200      	movs	r2, #0
 8005c30:	4b04      	ldr	r3, [pc, #16]	; (8005c44 <lcd_clear+0x58>)
 8005c32:	801a      	strh	r2, [r3, #0]
}
 8005c34:	b003      	add	sp, #12
 8005c36:	bd30      	pop	{r4, r5, pc}
 8005c38:	2000660c 	.word	0x2000660c
 8005c3c:	2000004c 	.word	0x2000004c
 8005c40:	20004004 	.word	0x20004004
 8005c44:	20004006 	.word	0x20004006

08005c48 <lcd_convert_yuyv_to_rgb>:
   int16_t r1, g1, b1;
   uint16_t color = 0;

   // replaces floating point coefficients
   int16_t c = y-16;
   int16_t d = u - 128;
 8005c48:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   int16_t c = y-16;
 8005c4c:	3810      	subs	r0, #16
   int16_t e = v - 128;

   // Conversion that avoids floating point
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c4e:	f44f 7195 	mov.w	r1, #298	; 0x12a
   int16_t e = v - 128;
 8005c52:	3a80      	subs	r2, #128	; 0x80
   int16_t d = u - 128;
 8005c54:	b21b      	sxth	r3, r3
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c56:	fb10 f001 	smulbb	r0, r0, r1
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c5a:	f64f 719c 	movw	r1, #65436	; 0xff9c
   int16_t e = v - 128;
 8005c5e:	b212      	sxth	r2, r2
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c60:	fb13 f101 	smulbb	r1, r3, r1
   b1 = (298 * c + 516 * d + 128) >> 8;
 8005c64:	eb03 13c3 	add.w	r3, r3, r3, lsl #7
{
 8005c68:	b530      	push	{r4, r5, lr}
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c6a:	f240 1499 	movw	r4, #409	; 0x199
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c6e:	4401      	add	r1, r0
 8005c70:	f64f 7530 	movw	r5, #65328	; 0xff30
   b1 = (298 * c + 516 * d + 128) >> 8;
 8005c74:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c78:	fb02 0404 	mla	r4, r2, r4, r0
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c7c:	fb12 1205 	smlabb	r2, r2, r5, r1
   b1 = (298 * c + 516 * d + 128) >> 8;
 8005c80:	3380      	adds	r3, #128	; 0x80
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c82:	3480      	adds	r4, #128	; 0x80
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c84:	3280      	adds	r2, #128	; 0x80
   b1 = (298 * c + 516 * d + 128) >> 8;
 8005c86:	121b      	asrs	r3, r3, #8
   r1 = (298 * c + 409 * e + 128) >> 8;
 8005c88:	1224      	asrs	r4, r4, #8
   g1 = (298 * c - 100 * d - 208 * e + 128) >> 8;
 8005c8a:	1212      	asrs	r2, r2, #8
 8005c8c:	2cff      	cmp	r4, #255	; 0xff
 8005c8e:	bfa8      	it	ge
 8005c90:	24ff      	movge	r4, #255	; 0xff
 8005c92:	2aff      	cmp	r2, #255	; 0xff
 8005c94:	bfa8      	it	ge
 8005c96:	22ff      	movge	r2, #255	; 0xff
 8005c98:	2bff      	cmp	r3, #255	; 0xff
 8005c9a:	b224      	sxth	r4, r4
 8005c9c:	bfa8      	it	ge
 8005c9e:	23ff      	movge	r3, #255	; 0xff
 8005ca0:	b212      	sxth	r2, r2
 8005ca2:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005ca6:	b218      	sxth	r0, r3
 8005ca8:	ea22 72e2 	bic.w	r2, r2, r2, asr #31

   r1 = r1 >> 3; //5 bits
   g1 = g1 >> 2; //6 bits
   b1 = b1 >> 3; //5 bits

   color|= r1 << (5 + 6);
 8005cac:	10e4      	asrs	r4, r4, #3
 8005cae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   color|= g1 << 5;
 8005cb2:	1092      	asrs	r2, r2, #2
   b1 = b1 >> 3; //5 bits
 8005cb4:	10c0      	asrs	r0, r0, #3
   color|= b1;
 8005cb6:	ea40 20c4 	orr.w	r0, r0, r4, lsl #11
 8005cba:	ea40 1042 	orr.w	r0, r0, r2, lsl #5

   return color;
}
 8005cbe:	b280      	uxth	r0, r0
 8005cc0:	bd30      	pop	{r4, r5, pc}

08005cc2 <lcd_convert_yuyv_pixels>:
{
 8005cc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint8_t u  = data[1];
 8005cc6:	7844      	ldrb	r4, [r0, #1]
{
 8005cc8:	4688      	mov	r8, r1
  uint8_t v  = data[3];
 8005cca:	78c5      	ldrb	r5, [r0, #3]
{
 8005ccc:	4616      	mov	r6, r2
  uint8_t y1 = data[2];
 8005cce:	7887      	ldrb	r7, [r0, #2]
  *pixel0 = lcd_convert_yuyv_to_rgb(y0, u, v);
 8005cd0:	4621      	mov	r1, r4
 8005cd2:	7800      	ldrb	r0, [r0, #0]
 8005cd4:	462a      	mov	r2, r5
 8005cd6:	f7ff ffb7 	bl	8005c48 <lcd_convert_yuyv_to_rgb>
  *pixel1 = lcd_convert_yuyv_to_rgb(y1, u, v);
 8005cda:	462a      	mov	r2, r5
  *pixel0 = lcd_convert_yuyv_to_rgb(y0, u, v);
 8005cdc:	f8a8 0000 	strh.w	r0, [r8]
  *pixel1 = lcd_convert_yuyv_to_rgb(y1, u, v);
 8005ce0:	4621      	mov	r1, r4
 8005ce2:	4638      	mov	r0, r7
 8005ce4:	f7ff ffb0 	bl	8005c48 <lcd_convert_yuyv_to_rgb>
 8005ce8:	8030      	strh	r0, [r6, #0]
 8005cea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08005cf0 <lcd_draw_yuyv_picture>:
{
 8005cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005cf4:	4607      	mov	r7, r0
 8005cf6:	2500      	movs	r5, #0
    uint32_t offset = lcd_shadow_framebuffer + y * LCD_PIXEL_WIDTH * LCD_BYTES_IN_PIXEL;
 8005cf8:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8005d30 <lcd_draw_yuyv_picture+0x40>
 8005cfc:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8005d00:	f8d8 3000 	ldr.w	r3, [r8]
 8005d04:	441c      	add	r4, r3
    image_ptr = (uint16_t*)offset;
 8005d06:	4626      	mov	r6, r4
 8005d08:	f504 79a0 	add.w	r9, r4, #320	; 0x140
      lcd_convert_yuyv_pixels(source, image_ptr, (image_ptr + 1));
 8005d0c:	1b30      	subs	r0, r6, r4
 8005d0e:	1cb2      	adds	r2, r6, #2
 8005d10:	4631      	mov	r1, r6
      image_ptr+= 2;//2 pixels
 8005d12:	3604      	adds	r6, #4
      lcd_convert_yuyv_pixels(source, image_ptr, (image_ptr + 1));
 8005d14:	4428      	add	r0, r5
 8005d16:	4438      	add	r0, r7
 8005d18:	f7ff ffd3 	bl	8005cc2 <lcd_convert_yuyv_pixels>
    for (x = 0; x < UVC_TARGET_WIDTH; x+= 2)
 8005d1c:	454e      	cmp	r6, r9
 8005d1e:	d1f5      	bne.n	8005d0c <lcd_draw_yuyv_picture+0x1c>
 8005d20:	f505 75a0 	add.w	r5, r5, #320	; 0x140
  for (y = 0; y < UVC_TARGET_HEIGHT; y++)
 8005d24:	f5b5 4f16 	cmp.w	r5, #38400	; 0x9600
 8005d28:	d1e8      	bne.n	8005cfc <lcd_draw_yuyv_picture+0xc>
}
 8005d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2e:	bf00      	nop
 8005d30:	2000004c 	.word	0x2000004c

08005d34 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8005d34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			  HAL_RNG_GetRandomNumber(&hrng)%272,
	          (uint16_t)HAL_RNG_GetRandomNumber(&hrng)|0xFF000000);
			osDelay(10);
	  }*/

	TFT_FillScreen(0);
 8005d38:	f44f 747a 	mov.w	r4, #1000	; 0x3e8

	for(int i=0;i<1000;i++)
	    {
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8005d3c:	4d1f      	ldr	r5, [pc, #124]	; (8005dbc <StartDefaultTask+0x88>)
 8005d3e:	f44f 7788 	mov.w	r7, #272	; 0x110
 8005d42:	f44f 76f0 	mov.w	r6, #480	; 0x1e0
  MX_USB_HOST_Init();
 8005d46:	f001 fae5 	bl	8007314 <MX_USB_HOST_Init>
	TFT_FillScreen(0);
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	f7ff fe0c 	bl	8005968 <TFT_FillScreen>
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8005d50:	4628      	mov	r0, r5
 8005d52:	f7fc fac7 	bl	80022e4 <HAL_RNG_GetRandomNumber>
 8005d56:	4680      	mov	r8, r0
	              HAL_RNG_GetRandomNumber(&hrng)%272,
 8005d58:	4628      	mov	r0, r5
 8005d5a:	f7fc fac3 	bl	80022e4 <HAL_RNG_GetRandomNumber>
 8005d5e:	4681      	mov	r9, r0
	              HAL_RNG_GetRandomNumber(&hrng)%480,
 8005d60:	4628      	mov	r0, r5
 8005d62:	f7fc fabf 	bl	80022e4 <HAL_RNG_GetRandomNumber>
 8005d66:	4682      	mov	sl, r0
	              HAL_RNG_GetRandomNumber(&hrng)%272,
 8005d68:	4628      	mov	r0, r5
 8005d6a:	f7fc fabb 	bl	80022e4 <HAL_RNG_GetRandomNumber>
 8005d6e:	4683      	mov	fp, r0
	              HAL_RNG_GetRandomNumber(&hrng)|0xFF000000);
 8005d70:	4628      	mov	r0, r5
 8005d72:	f7fc fab7 	bl	80022e4 <HAL_RNG_GetRandomNumber>
	      TFT_DrawLine(HAL_RNG_GetRandomNumber(&hrng)%480,
 8005d76:	f040 407f 	orr.w	r0, r0, #4278190080	; 0xff000000
 8005d7a:	fbb8 fef6 	udiv	lr, r8, r6
 8005d7e:	fbbb f3f7 	udiv	r3, fp, r7
 8005d82:	fbba f2f6 	udiv	r2, sl, r6
 8005d86:	fbb9 f1f7 	udiv	r1, r9, r7
 8005d8a:	9000      	str	r0, [sp, #0]
 8005d8c:	fb07 b313 	mls	r3, r7, r3, fp
 8005d90:	fb06 801e 	mls	r0, r6, lr, r8
 8005d94:	fb06 a212 	mls	r2, r6, r2, sl
 8005d98:	fb07 9111 	mls	r1, r7, r1, r9
 8005d9c:	f7ff fe00 	bl	80059a0 <TFT_DrawLine>
	      osDelay(10);
 8005da0:	200a      	movs	r0, #10
 8005da2:	f7fe fab4 	bl	800430e <osDelay>
	for(int i=0;i<1000;i++)
 8005da6:	3c01      	subs	r4, #1
 8005da8:	d1d2      	bne.n	8005d50 <StartDefaultTask+0x1c>
	    }

	TFT_FillScreen(0);
 8005daa:	4620      	mov	r0, r4
 8005dac:	f7ff fddc 	bl	8005968 <TFT_FillScreen>

	vTaskDelete( NULL );
 8005db0:	4620      	mov	r0, r4

  /* USER CODE END 5 */ 
}
 8005db2:	b003      	add	sp, #12
 8005db4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	vTaskDelete( NULL );
 8005db8:	f7ff ba74 	b.w	80052a4 <vTaskDelete>
 8005dbc:	200065fc 	.word	0x200065fc

08005dc0 <SystemClock_Config>:
{
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	b0b4      	sub	sp, #208	; 0xd0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dc4:	2230      	movs	r2, #48	; 0x30
 8005dc6:	2100      	movs	r1, #0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005dc8:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dca:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005dcc:	2501      	movs	r5, #1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005dce:	f001 fc63 	bl	8007698 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005dd2:	2214      	movs	r2, #20
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	a802      	add	r0, sp, #8
 8005dd8:	f001 fc5e 	bl	8007698 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005ddc:	2100      	movs	r1, #0
 8005dde:	2284      	movs	r2, #132	; 0x84
 8005de0:	a813      	add	r0, sp, #76	; 0x4c
 8005de2:	f001 fc59 	bl	8007698 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8005de6:	4b25      	ldr	r3, [pc, #148]	; (8005e7c <SystemClock_Config+0xbc>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005de8:	f44f 3680 	mov.w	r6, #65536	; 0x10000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dec:	a807      	add	r0, sp, #28
  __HAL_RCC_PWR_CLK_ENABLE();
 8005dee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005df0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
 8005df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e00:	4b1f      	ldr	r3, [pc, #124]	; (8005e80 <SystemClock_Config+0xc0>)
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8005e08:	601a      	str	r2, [r3, #0]
 8005e0a:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005e0c:	9507      	str	r5, [sp, #28]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005e12:	9608      	str	r6, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005e14:	940d      	str	r4, [sp, #52]	; 0x34
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005e16:	9301      	str	r3, [sp, #4]
 8005e18:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005e1e:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005e20:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 25;
 8005e22:	2319      	movs	r3, #25
 8005e24:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 432;
 8005e26:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8005e2a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8005e2c:	2308      	movs	r3, #8
 8005e2e:	9312      	str	r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005e30:	f7fb fcfe 	bl	8001830 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8005e34:	f7fb fcc4 	bl	80017c0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e38:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005e3a:	2107      	movs	r1, #7
 8005e3c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005e3e:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e40:	2300      	movs	r3, #0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005e42:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005e44:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005e46:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005e4a:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8005e4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e50:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8005e52:	f7fb fed7 	bl	8001c04 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8005e56:	4b0b      	ldr	r3, [pc, #44]	; (8005e84 <SystemClock_Config+0xc4>)
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e58:	a813      	add	r0, sp, #76	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005e5a:	9419      	str	r4, [sp, #100]	; 0x64
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_CLK48;
 8005e5c:	9313      	str	r3, [sp, #76]	; 0x4c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005e5e:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV4;
 8005e60:	951b      	str	r5, [sp, #108]	; 0x6c
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8005e62:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8005e64:	2303      	movs	r3, #3
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005e66:	951d      	str	r5, [sp, #116]	; 0x74
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 3;
 8005e68:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8005e6a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8005e6e:	961e      	str	r6, [sp, #120]	; 0x78
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8005e70:	9332      	str	r3, [sp, #200]	; 0xc8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e72:	f7fb ff67 	bl	8001d44 <HAL_RCCEx_PeriphCLKConfig>
}
 8005e76:	b034      	add	sp, #208	; 0xd0
 8005e78:	bd70      	pop	{r4, r5, r6, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40023800 	.word	0x40023800
 8005e80:	40007000 	.word	0x40007000
 8005e84:	00200008 	.word	0x00200008

08005e88 <main>:
{
 8005e88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e8c:	b0a1      	sub	sp, #132	; 0x84

/* MPU Configuration */

void MPU_Config(void)
{
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005e8e:	2100      	movs	r1, #0
 8005e90:	2210      	movs	r2, #16
  /* Disables the MPU */
  HAL_MPU_Disable();
  /** Initializes and configures the Region and the memory to be protected 
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005e92:	2400      	movs	r4, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8005e94:	a813      	add	r0, sp, #76	; 0x4c
 8005e96:	f001 fbff 	bl	8007698 <memset>
  HAL_MPU_Disable();
 8005e9a:	f7fa fc53 	bl	8000744 <HAL_MPU_Disable>
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8005e9e:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005ea2:	2301      	movs	r3, #1
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005ea4:	a813      	add	r0, sp, #76	; 0x4c
  MPU_InitStruct.BaseAddress = 0xC0000000;
 8005ea6:	9214      	str	r2, [sp, #80]	; 0x50
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8005ea8:	2215      	movs	r2, #21
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8005eaa:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
  MPU_InitStruct.Size = MPU_REGION_SIZE_4MB;
 8005eae:	f88d 2054 	strb.w	r2, [sp, #84]	; 0x54
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005eb2:	2203      	movs	r2, #3
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8005eb4:	f88d 305a 	strb.w	r3, [sp, #90]	; 0x5a
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8005eb8:	f88d 2057 	strb.w	r2, [sp, #87]	; 0x57
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8005ebc:	f88d 404d 	strb.w	r4, [sp, #77]	; 0x4d
  MPU_InitStruct.SubRegionDisable = 0x0;
 8005ec0:	f88d 4055 	strb.w	r4, [sp, #85]	; 0x55
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8005ec4:	f88d 4056 	strb.w	r4, [sp, #86]	; 0x56
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8005ec8:	f88d 4058 	strb.w	r4, [sp, #88]	; 0x58
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8005ecc:	f88d 4059 	strb.w	r4, [sp, #89]	; 0x59
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8005ed0:	f88d 405b 	strb.w	r4, [sp, #91]	; 0x5b
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8005ed4:	f7fa fc58 	bl	8000788 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8005ed8:	2004      	movs	r0, #4
 8005eda:	f7fa fc43 	bl	8000764 <HAL_MPU_Enable>
  __ASM volatile ("dsb 0xF":::"memory");
 8005ede:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ee2:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8005ee6:	4bb6      	ldr	r3, [pc, #728]	; (80061c0 <main+0x338>)
 8005ee8:	f8c3 4250 	str.w	r4, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8005eec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005ef0:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8005ef4:	695a      	ldr	r2, [r3, #20]
 8005ef6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005efa:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8005efc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f00:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8005f04:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8005f08:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8005f0c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f10:	f643 76e0 	movw	r6, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005f14:	f3c2 04c9 	ubfx	r4, r2, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8005f18:	f3c2 324e 	ubfx	r2, r2, #13, #15
 8005f1c:	07a5      	lsls	r5, r4, #30
 8005f1e:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f20:	ea02 0e06 	and.w	lr, r2, r6
 8005f24:	4628      	mov	r0, r5
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8005f26:	4621      	mov	r1, r4
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f28:	ea40 070e 	orr.w	r7, r0, lr
      } while (ways-- != 0U);
 8005f2c:	3901      	subs	r1, #1
 8005f2e:	f100 4040 	add.w	r0, r0, #3221225472	; 0xc0000000
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8005f32:	f8c3 7260 	str.w	r7, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8005f36:	1c4f      	adds	r7, r1, #1
 8005f38:	d1f6      	bne.n	8005f28 <main+0xa0>
 8005f3a:	3a20      	subs	r2, #32
    } while(sets-- != 0U);
 8005f3c:	f112 0f20 	cmn.w	r2, #32
 8005f40:	d1ee      	bne.n	8005f20 <main+0x98>
 8005f42:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8005f46:	695a      	ldr	r2, [r3, #20]
 8005f48:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005f4c:	615a      	str	r2, [r3, #20]
 8005f4e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005f52:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8005f56:	f7fa fb57 	bl	8000608 <HAL_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f5a:	2400      	movs	r4, #0
  SystemClock_Config();
 8005f5c:	f7ff ff30 	bl	8005dc0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f60:	2214      	movs	r2, #20
 8005f62:	2100      	movs	r1, #0
 8005f64:	a813      	add	r0, sp, #76	; 0x4c
 8005f66:	f001 fb97 	bl	8007698 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f6a:	4b96      	ldr	r3, [pc, #600]	; (80061c4 <main+0x33c>)
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8005f6c:	2108      	movs	r1, #8
 8005f6e:	4896      	ldr	r0, [pc, #600]	; (80061c8 <main+0x340>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005f72:	2702      	movs	r7, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005f74:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8005f78:	f44f 5980 	mov.w	r9, #4096	; 0x1000
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f7c:	f042 0210 	orr.w	r2, r2, #16
  hltdc.Instance = LTDC;
 8005f80:	4d92      	ldr	r5, [pc, #584]	; (80061cc <main+0x344>)
  hdma2d.Instance = DMA2D;
 8005f82:	4e93      	ldr	r6, [pc, #588]	; (80061d0 <main+0x348>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f84:	631a      	str	r2, [r3, #48]	; 0x30
 8005f86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f88:	f002 0210 	and.w	r2, r2, #16
 8005f8c:	9201      	str	r2, [sp, #4]
 8005f8e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f92:	f042 0201 	orr.w	r2, r2, #1
 8005f96:	631a      	str	r2, [r3, #48]	; 0x30
 8005f98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f9a:	f002 0201 	and.w	r2, r2, #1
 8005f9e:	9202      	str	r2, [sp, #8]
 8005fa0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fa2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fa4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fa8:	631a      	str	r2, [r3, #48]	; 0x30
 8005faa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fac:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8005fb0:	9203      	str	r2, [sp, #12]
 8005fb2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005fb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005fba:	631a      	str	r2, [r3, #48]	; 0x30
 8005fbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fbe:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005fc2:	9204      	str	r2, [sp, #16]
 8005fc4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005fc6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fc8:	f042 0208 	orr.w	r2, r2, #8
 8005fcc:	631a      	str	r2, [r3, #48]	; 0x30
 8005fce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fd0:	f002 0208 	and.w	r2, r2, #8
 8005fd4:	9205      	str	r2, [sp, #20]
 8005fd6:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8005fd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fda:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fde:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fe2:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8005fe6:	9206      	str	r2, [sp, #24]
 8005fe8:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005fea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005fec:	f042 0220 	orr.w	r2, r2, #32
 8005ff0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ff4:	f002 0220 	and.w	r2, r2, #32
 8005ff8:	9207      	str	r2, [sp, #28]
 8005ffa:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006002:	631a      	str	r2, [r3, #48]	; 0x30
 8006004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006006:	f402 7280 	and.w	r2, r2, #256	; 0x100
 800600a:	9208      	str	r2, [sp, #32]
 800600c:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800600e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006010:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006014:	631a      	str	r2, [r3, #48]	; 0x30
 8006016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006018:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800601c:	9209      	str	r2, [sp, #36]	; 0x24
 800601e:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	f042 0204 	orr.w	r2, r2, #4
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
 8006028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602a:	f002 0204 	and.w	r2, r2, #4
 800602e:	920a      	str	r2, [sp, #40]	; 0x28
 8006030:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006032:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006034:	f042 0202 	orr.w	r2, r2, #2
 8006038:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 800603a:	2201      	movs	r2, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800603c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603e:	f003 0302 	and.w	r3, r3, #2
 8006042:	930b      	str	r3, [sp, #44]	; 0x2c
 8006044:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOK, GPIO_PIN_3, GPIO_PIN_SET);
 8006046:	f7fa fe05 	bl	8000c54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_1, GPIO_PIN_RESET);
 800604a:	2200      	movs	r2, #0
 800604c:	2102      	movs	r1, #2
 800604e:	4861      	ldr	r0, [pc, #388]	; (80061d4 <main+0x34c>)
 8006050:	f7fa fe00 	bl	8000c54 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12, GPIO_PIN_SET);
 8006054:	2201      	movs	r2, #1
 8006056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800605a:	485e      	ldr	r0, [pc, #376]	; (80061d4 <main+0x34c>)
 800605c:	f7fa fdfa 	bl	8000c54 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006060:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006062:	a913      	add	r1, sp, #76	; 0x4c
 8006064:	4858      	ldr	r0, [pc, #352]	; (80061c8 <main+0x340>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006066:	9313      	str	r3, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006068:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800606a:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800606c:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8006070:	f7fa fd06 	bl	8000a80 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006074:	a913      	add	r1, sp, #76	; 0x4c
 8006076:	4857      	ldr	r0, [pc, #348]	; (80061d4 <main+0x34c>)
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006078:	9713      	str	r7, [sp, #76]	; 0x4c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800607a:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800607c:	9416      	str	r4, [sp, #88]	; 0x58
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800607e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006082:	f7fa fcfd 	bl	8000a80 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006086:	a913      	add	r1, sp, #76	; 0x4c
 8006088:	4852      	ldr	r0, [pc, #328]	; (80061d4 <main+0x34c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800608a:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800608c:	9716      	str	r7, [sp, #88]	; 0x58
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800608e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006092:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006096:	f7fa fcf3 	bl	8000a80 <HAL_GPIO_Init>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800609a:	4621      	mov	r1, r4
 800609c:	2234      	movs	r2, #52	; 0x34
 800609e:	a813      	add	r0, sp, #76	; 0x4c
 80060a0:	f001 fafa 	bl	8007698 <memset>
  hltdc.Instance = LTDC;
 80060a4:	4b4c      	ldr	r3, [pc, #304]	; (80061d8 <main+0x350>)
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80060a6:	4628      	mov	r0, r5
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80060a8:	60ac      	str	r4, [r5, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80060aa:	60ec      	str	r4, [r5, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80060ac:	612c      	str	r4, [r5, #16]
  hltdc.Init.Backcolor.Blue = 0;
 80060ae:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80060b2:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80060b6:	f885 4036 	strb.w	r4, [r5, #54]	; 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80060ba:	e885 0018 	stmia.w	r5, {r3, r4}
  hltdc.Init.HorizontalSync = 40;
 80060be:	2328      	movs	r3, #40	; 0x28
 80060c0:	616b      	str	r3, [r5, #20]
  hltdc.Init.VerticalSync = 9;
 80060c2:	2309      	movs	r3, #9
 80060c4:	61ab      	str	r3, [r5, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80060c6:	2335      	movs	r3, #53	; 0x35
 80060c8:	61eb      	str	r3, [r5, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80060ca:	230b      	movs	r3, #11
 80060cc:	622b      	str	r3, [r5, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80060ce:	f240 2315 	movw	r3, #533	; 0x215
 80060d2:	626b      	str	r3, [r5, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80060d4:	f240 131b 	movw	r3, #283	; 0x11b
 80060d8:	62ab      	str	r3, [r5, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80060da:	f240 2335 	movw	r3, #565	; 0x235
 80060de:	62eb      	str	r3, [r5, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80060e0:	f240 131d 	movw	r3, #285	; 0x11d
 80060e4:	632b      	str	r3, [r5, #48]	; 0x30
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80060e6:	f7fb fa9f 	bl	8001628 <HAL_LTDC_Init>
  pLayerCfg.Alpha = 255;
 80060ea:	21ff      	movs	r1, #255	; 0xff
  pLayerCfg.WindowX1 = 480;
 80060ec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
  pLayerCfg.WindowY1 = 272;
 80060f0:	f44f 7388 	mov.w	r3, #272	; 0x110
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80060f4:	4628      	mov	r0, r5
  pLayerCfg.Alpha = 255;
 80060f6:	9118      	str	r1, [sp, #96]	; 0x60
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80060f8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
  pLayerCfg.WindowX1 = 480;
 80060fc:	9214      	str	r2, [sp, #80]	; 0x50
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80060fe:	911a      	str	r1, [sp, #104]	; 0x68
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006100:	2107      	movs	r1, #7
  pLayerCfg.ImageWidth = 480;
 8006102:	921d      	str	r2, [sp, #116]	; 0x74
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006104:	4622      	mov	r2, r4
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8006106:	911b      	str	r1, [sp, #108]	; 0x6c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006108:	a913      	add	r1, sp, #76	; 0x4c
  pLayerCfg.WindowX0 = 0;
 800610a:	9413      	str	r4, [sp, #76]	; 0x4c
  pLayerCfg.WindowY0 = 0;
 800610c:	9415      	str	r4, [sp, #84]	; 0x54
  pLayerCfg.WindowY1 = 272;
 800610e:	9316      	str	r3, [sp, #88]	; 0x58
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8006110:	9717      	str	r7, [sp, #92]	; 0x5c
  pLayerCfg.Alpha0 = 0;
 8006112:	9419      	str	r4, [sp, #100]	; 0x64
  pLayerCfg.FBStartAdress = 0;
 8006114:	941c      	str	r4, [sp, #112]	; 0x70
  pLayerCfg.ImageHeight = 272;
 8006116:	931e      	str	r3, [sp, #120]	; 0x78
  pLayerCfg.Backcolor.Blue = 0;
 8006118:	f88d 407c 	strb.w	r4, [sp, #124]	; 0x7c
  pLayerCfg.Backcolor.Green = 0;
 800611c:	f88d 407d 	strb.w	r4, [sp, #125]	; 0x7d
  pLayerCfg.Backcolor.Red = 0;
 8006120:	f88d 407e 	strb.w	r4, [sp, #126]	; 0x7e
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8006124:	f7fb faec 	bl	8001700 <HAL_LTDC_ConfigLayer>
  hrng.Instance = RNG;
 8006128:	4b2c      	ldr	r3, [pc, #176]	; (80061dc <main+0x354>)
 800612a:	482d      	ldr	r0, [pc, #180]	; (80061e0 <main+0x358>)
 800612c:	6003      	str	r3, [r0, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800612e:	f7fc f893 	bl	8002258 <HAL_RNG_Init>
  MX_FATFS_Init();
 8006132:	f7ff fc09 	bl	8005948 <MX_FATFS_Init>
  hdma2d.Instance = DMA2D;
 8006136:	4b2b      	ldr	r3, [pc, #172]	; (80061e4 <main+0x35c>)
  hdma2d.LayerCfg[1].InputOffset = 0;
 8006138:	62b4      	str	r4, [r6, #40]	; 0x28
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800613a:	4630      	mov	r0, r6
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800613c:	62f7      	str	r7, [r6, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800613e:	6334      	str	r4, [r6, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8006140:	6374      	str	r4, [r6, #52]	; 0x34
  hdma2d.Init.OutputOffset = 0;
 8006142:	60f4      	str	r4, [r6, #12]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 8006144:	e886 0098 	stmia.w	r6, {r3, r4, r7}
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8006148:	f7fa fb88 	bl	800085c <HAL_DMA2D_Init>
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800614c:	4641      	mov	r1, r8
 800614e:	4630      	mov	r0, r6
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006150:	4e25      	ldr	r6, [pc, #148]	; (80061e8 <main+0x360>)
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8006152:	f7fa fc4b 	bl	80009ec <HAL_DMA2D_ConfigLayer>
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006156:	4621      	mov	r1, r4
 8006158:	221c      	movs	r2, #28
 800615a:	a813      	add	r0, sp, #76	; 0x4c
 800615c:	f001 fa9c 	bl	8007698 <memset>
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8006160:	4b22      	ldr	r3, [pc, #136]	; (80061ec <main+0x364>)
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006162:	2204      	movs	r2, #4
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8006164:	a913      	add	r1, sp, #76	; 0x4c
 8006166:	4630      	mov	r0, r6
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006168:	60b4      	str	r4, [r6, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800616a:	60f2      	str	r2, [r6, #12]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800616c:	61f4      	str	r4, [r6, #28]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800616e:	f8c6 9024 	str.w	r9, [r6, #36]	; 0x24
  SdramTiming.LoadToActiveDelay = 2;
 8006172:	9713      	str	r7, [sp, #76]	; 0x4c
  SdramTiming.SelfRefreshTime = 4;
 8006174:	9215      	str	r2, [sp, #84]	; 0x54
  SdramTiming.WriteRecoveryTime = 2;
 8006176:	9717      	str	r7, [sp, #92]	; 0x5c
  SdramTiming.RPDelay = 2;
 8006178:	9718      	str	r7, [sp, #96]	; 0x60
  SdramTiming.RCDDelay = 2;
 800617a:	9719      	str	r7, [sp, #100]	; 0x64
	  htim9.Instance = TIM9;
 800617c:	4f1c      	ldr	r7, [pc, #112]	; (80061f0 <main+0x368>)
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800617e:	e886 0108 	stmia.w	r6, {r3, r8}
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8006182:	2310      	movs	r3, #16
 8006184:	6133      	str	r3, [r6, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8006186:	2340      	movs	r3, #64	; 0x40
 8006188:	6173      	str	r3, [r6, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_2;
 800618a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800618e:	61b3      	str	r3, [r6, #24]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8006190:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006194:	6233      	str	r3, [r6, #32]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8006196:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800619a:	62b3      	str	r3, [r6, #40]	; 0x28
  SdramTiming.ExitSelfRefreshDelay = 6;
 800619c:	2306      	movs	r3, #6
 800619e:	9314      	str	r3, [sp, #80]	; 0x50
  SdramTiming.RowCycleDelay = 6;
 80061a0:	9316      	str	r3, [sp, #88]	; 0x58
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80061a2:	f7fc f8aa 	bl	80022fa <HAL_SDRAM_Init>
	  htim9.Init.Prescaler = 1000 - 1;
 80061a6:	4a13      	ldr	r2, [pc, #76]	; (80061f4 <main+0x36c>)
 80061a8:	f240 33e7 	movw	r3, #999	; 0x3e7
	  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80061ac:	4638      	mov	r0, r7
	  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80061ae:	60bc      	str	r4, [r7, #8]
	  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80061b0:	613c      	str	r4, [r7, #16]
	  htim9.Init.Prescaler = 1000 - 1;
 80061b2:	e887 000c 	stmia.w	r7, {r2, r3}
	  htim9.Init.Period = 84 - 1;
 80061b6:	2353      	movs	r3, #83	; 0x53
 80061b8:	60fb      	str	r3, [r7, #12]
	  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80061ba:	f7fc f963 	bl	8002484 <HAL_TIM_Base_Init>
 80061be:	e01b      	b.n	80061f8 <main+0x370>
 80061c0:	e000ed00 	.word	0xe000ed00
 80061c4:	40023800 	.word	0x40023800
 80061c8:	40022800 	.word	0x40022800
 80061cc:	20006510 	.word	0x20006510
 80061d0:	2000660c 	.word	0x2000660c
 80061d4:	40022000 	.word	0x40022000
 80061d8:	40016800 	.word	0x40016800
 80061dc:	50060800 	.word	0x50060800
 80061e0:	200065fc 	.word	0x200065fc
 80061e4:	4002b000 	.word	0x4002b000
 80061e8:	2000664c 	.word	0x2000664c
 80061ec:	a0000140 	.word	0xa0000140
 80061f0:	200065bc 	.word	0x200065bc
 80061f4:	40014000 	.word	0x40014000
	  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80061f8:	a913      	add	r1, sp, #76	; 0x4c
 80061fa:	4638      	mov	r0, r7
	  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80061fc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
	  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8006200:	f7fc f964 	bl	80024cc <HAL_TIM_ConfigClockSource>
  HAL_TIM_Base_Start_IT(&htim9);
 8006204:	4638      	mov	r0, r7
 8006206:	f7fc f8c1 	bl	800238c <HAL_TIM_Base_Start_IT>
  MX_LIBJPEG_Init();
 800620a:	f7ff fbab 	bl	8005964 <MX_LIBJPEG_Init>
  MT48LC4M32B2_Init(&hsdram1);
 800620e:	4630      	mov	r0, r6
 8006210:	f7ff fb42 	bl	8005898 <MT48LC4M32B2_Init>
  HAL_LTDC_SetAddress(&hltdc, LCD_FRAME_BUFFER,0);
 8006214:	4622      	mov	r2, r4
 8006216:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800621a:	4628      	mov	r0, r5
 800621c:	f7fb fa99 	bl	8001752 <HAL_LTDC_SetAddress>
  video_stream_init_buffers((uint8_t*)UVC_FRAMEBUFFER0, (uint8_t*)UVC_FRAMEBUFFER1);
 8006220:	493d      	ldr	r1, [pc, #244]	; (8006318 <main+0x490>)
 8006222:	483e      	ldr	r0, [pc, #248]	; (800631c <main+0x494>)
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8006224:	ad0c      	add	r5, sp, #48	; 0x30
  video_stream_init_buffers((uint8_t*)UVC_FRAMEBUFFER0, (uint8_t*)UVC_FRAMEBUFFER1);
 8006226:	f7fd f90d 	bl	8003444 <video_stream_init_buffers>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800622a:	4e3d      	ldr	r6, [pc, #244]	; (8006320 <main+0x498>)
  lcd_switch_to_single_buffer_mode();
 800622c:	f7ff fc26 	bl	8005a7c <lcd_switch_to_single_buffer_mode>
  lcd_clear(LCD_COLOR_WHITE);
 8006230:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006234:	f7ff fcda 	bl	8005bec <lcd_clear>
  printf("Waiting for UVC Camera\n");
 8006238:	483a      	ldr	r0, [pc, #232]	; (8006324 <main+0x49c>)
 800623a:	f001 fb69 	bl	8007910 <puts>
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800623e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006240:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006242:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006246:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800624a:	4621      	mov	r1, r4
 800624c:	a80c      	add	r0, sp, #48	; 0x30
 800624e:	f7fe f836 	bl	80042be <osThreadCreate>
	      if (uvc_parsing_new_frame_ready)
 8006252:	4e35      	ldr	r6, [pc, #212]	; (8006328 <main+0x4a0>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8006254:	4b35      	ldr	r3, [pc, #212]	; (800632c <main+0x4a4>)
	        sprintf((char*)tmp_str, "FPS: %d   \n", last_fps);
 8006256:	4d36      	ldr	r5, [pc, #216]	; (8006330 <main+0x4a8>)
	        frame_cnt++;
 8006258:	4c36      	ldr	r4, [pc, #216]	; (8006334 <main+0x4ac>)
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800625a:	6018      	str	r0, [r3, #0]
	        if (frame_received_flag == 0)
 800625c:	4f36      	ldr	r7, [pc, #216]	; (8006338 <main+0x4b0>)
	        if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 800625e:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8006354 <main+0x4cc>
	  MX_USB_HOST_Process();
 8006262:	f001 f86d 	bl	8007340 <MX_USB_HOST_Process>
	      if (uvc_parsing_new_frame_ready)
 8006266:	7833      	ldrb	r3, [r6, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d03a      	beq.n	80062e2 <main+0x45a>
	        uvc_parsing_new_frame_ready = 0;
 800626c:	2300      	movs	r3, #0
 800626e:	7033      	strb	r3, [r6, #0]
	        if (frame_received_flag == 0)
 8006270:	783b      	ldrb	r3, [r7, #0]
 8006272:	b98b      	cbnz	r3, 8006298 <main+0x410>
	          frame_received_flag = 1;
 8006274:	2301      	movs	r3, #1
	          HAL_Delay(1000);
 8006276:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	          frame_received_flag = 1;
 800627a:	703b      	strb	r3, [r7, #0]
	          HAL_Delay(1000);
 800627c:	f7fa f9e2 	bl	8000644 <HAL_Delay>
	          lcd_clear(LCD_COLOR_WHITE);//clear buffer0
 8006280:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006284:	f7ff fcb2 	bl	8005bec <lcd_clear>
	          lcd_switch_buffer();
 8006288:	f7ff fbd8 	bl	8005a3c <lcd_switch_buffer>
	          lcd_switch_buffer();//make shadow buffer = buffer1
 800628c:	f7ff fbd6 	bl	8005a3c <lcd_switch_buffer>
	          lcd_clear(LCD_COLOR_WHITE);//clear buffer1
 8006290:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8006294:	f7ff fcaa 	bl	8005bec <lcd_clear>
	        uint32_t start_decode_time = HAL_GetTick();
 8006298:	f7fa f9ce 	bl	8000638 <HAL_GetTick>
	        if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 800629c:	f898 3000 	ldrb.w	r3, [r8]
	        uint32_t start_decode_time = HAL_GetTick();
 80062a0:	4681      	mov	r9, r0
	        if (USBH_VIDEO_Target_Format == USBH_VIDEO_YUY2)
 80062a2:	2b01      	cmp	r3, #1
 80062a4:	4b25      	ldr	r3, [pc, #148]	; (800633c <main+0x4b4>)
 80062a6:	d131      	bne.n	800630c <main+0x484>
	          lcd_draw_yuyv_picture((uint8_t*)uvc_ready_framebuffer_ptr);
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f7ff fd21 	bl	8005cf0 <lcd_draw_yuyv_picture>
	        decode_time = HAL_GetTick() - start_decode_time;//debug only
 80062ae:	f7fa f9c3 	bl	8000638 <HAL_GetTick>
 80062b2:	4b23      	ldr	r3, [pc, #140]	; (8006340 <main+0x4b8>)
 80062b4:	eba0 0009 	sub.w	r0, r0, r9
	        sprintf((char*)tmp_str, "FPS: %d   \n", last_fps);
 80062b8:	782a      	ldrb	r2, [r5, #0]
 80062ba:	4922      	ldr	r1, [pc, #136]	; (8006344 <main+0x4bc>)
	        decode_time = HAL_GetTick() - start_decode_time;//debug only
 80062bc:	6018      	str	r0, [r3, #0]
	        sprintf((char*)tmp_str, "FPS: %d   \n", last_fps);
 80062be:	a813      	add	r0, sp, #76	; 0x4c
 80062c0:	f001 fb3e 	bl	8007940 <siprintf>
	        LCD_DisplayStringLine(LCD_PIXEL_HEIGHT - 20, tmp_str);
 80062c4:	a913      	add	r1, sp, #76	; 0x4c
 80062c6:	20fc      	movs	r0, #252	; 0xfc
 80062c8:	f7ff fc50 	bl	8005b6c <LCD_DisplayStringLine>
	        lcd_switch_buffer();
 80062cc:	f7ff fbb6 	bl	8005a3c <lcd_switch_buffer>
	        video_stream_ready_update();
 80062d0:	f7fd f8d8 	bl	8003484 <video_stream_ready_update>
	        frame_cnt++;
 80062d4:	6823      	ldr	r3, [r4, #0]
	        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_6);//Blink LED
 80062d6:	2140      	movs	r1, #64	; 0x40
 80062d8:	481b      	ldr	r0, [pc, #108]	; (8006348 <main+0x4c0>)
	        frame_cnt++;
 80062da:	3301      	adds	r3, #1
 80062dc:	6023      	str	r3, [r4, #0]
	        HAL_GPIO_TogglePin(GPIOI, GPIO_PIN_6);//Blink LED
 80062de:	f7fa fcbe 	bl	8000c5e <HAL_GPIO_TogglePin>
	      if ((HAL_GetTick() - timestamp_1sec) > 1000)// 1000ms
 80062e2:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8006358 <main+0x4d0>
 80062e6:	f7fa f9a7 	bl	8000638 <HAL_GetTick>
 80062ea:	f8d9 3000 	ldr.w	r3, [r9]
 80062ee:	1ac0      	subs	r0, r0, r3
 80062f0:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80062f4:	d9b5      	bls.n	8006262 <main+0x3da>
	        timestamp_1sec = HAL_GetTick();
 80062f6:	f7fa f99f 	bl	8000638 <HAL_GetTick>
	        last_fps = frame_cnt - prev_frame_cnt;
 80062fa:	4a14      	ldr	r2, [pc, #80]	; (800634c <main+0x4c4>)
 80062fc:	6821      	ldr	r1, [r4, #0]
 80062fe:	6813      	ldr	r3, [r2, #0]
	        timestamp_1sec = HAL_GetTick();
 8006300:	f8c9 0000 	str.w	r0, [r9]
	        last_fps = frame_cnt - prev_frame_cnt;
 8006304:	1acb      	subs	r3, r1, r3
	        prev_frame_cnt = frame_cnt;
 8006306:	6011      	str	r1, [r2, #0]
	        last_fps = frame_cnt - prev_frame_cnt;
 8006308:	702b      	strb	r3, [r5, #0]
 800630a:	e7a7      	b.n	800625c <main+0x3d4>
	          mjpeg_decompression_and_draw((uint8_t*)uvc_ready_framebuffer_ptr, uvc_ready_frame_length);
 800630c:	4a10      	ldr	r2, [pc, #64]	; (8006350 <main+0x4c8>)
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	6811      	ldr	r1, [r2, #0]
 8006312:	f000 f857 	bl	80063c4 <mjpeg_decompression_and_draw>
 8006316:	e7ca      	b.n	80062ae <main+0x426>
 8006318:	d0088e00 	.word	0xd0088e00
 800631c:	d007f800 	.word	0xd007f800
 8006320:	080089b4 	.word	0x080089b4
 8006324:	08008ecb 	.word	0x08008ecb
 8006328:	2000029d 	.word	0x2000029d
 800632c:	200065b8 	.word	0x200065b8
 8006330:	20004011 	.word	0x20004011
 8006334:	2000400c 	.word	0x2000400c
 8006338:	20004010 	.word	0x20004010
 800633c:	200002a4 	.word	0x200002a4
 8006340:	20004008 	.word	0x20004008
 8006344:	08008ee2 	.word	0x08008ee2
 8006348:	40022000 	.word	0x40022000
 800634c:	20004014 	.word	0x20004014
 8006350:	200002a0 	.word	0x200002a0
 8006354:	20000030 	.word	0x20000030
 8006358:	20004018 	.word	0x20004018

0800635c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800635c:	4770      	bx	lr

0800635e <input_func>:

//Read data from raw MJPEG framebuffer
//ndata - number of bytes to read from source buffer
//buff - destination
UINT input_func (JDEC * jd, BYTE* buff, UINT ndata) 
{
 800635e:	b538      	push	{r3, r4, r5, lr}
  IODEV* dev = (IODEV*)jd->device;
 8006360:	6fc5      	ldr	r5, [r0, #124]	; 0x7c
  else
  ndata = dev->jsize - dev->joffset;
  */
  ndata = dev->jsize - dev->joffset  > ndata ? ndata : dev->jsize - dev->joffset;

  if(buff)
 8006362:	4608      	mov	r0, r1
  ndata = dev->jsize - dev->joffset  > ndata ? ndata : dev->jsize - dev->joffset;
 8006364:	88eb      	ldrh	r3, [r5, #6]
 8006366:	88ac      	ldrh	r4, [r5, #4]
 8006368:	1ae4      	subs	r4, r4, r3
 800636a:	4294      	cmp	r4, r2
 800636c:	bf28      	it	cs
 800636e:	4614      	movcs	r4, r2
  if(buff)
 8006370:	b121      	cbz	r1, 800637c <input_func+0x1e>
    memcpy(buff, dev->jpic + dev->joffset, ndata);
 8006372:	6829      	ldr	r1, [r5, #0]
 8006374:	4622      	mov	r2, r4
 8006376:	4419      	add	r1, r3
 8006378:	f001 f983 	bl	8007682 <memcpy>

  dev->joffset+= ndata;
 800637c:	88eb      	ldrh	r3, [r5, #6]
  return ndata;
}
 800637e:	4620      	mov	r0, r4
  dev->joffset+= ndata;
 8006380:	4423      	add	r3, r4
 8006382:	80eb      	strh	r3, [r5, #6]
}
 8006384:	bd38      	pop	{r3, r4, r5, pc}

08006386 <output_func>:

//Draw rectangle with part of of the image
//bitmap - decoded data
//rect - rectangle coordinates
UINT output_func(JDEC* jd, void* bitmap, JRECT* rect) 
{
 8006386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  WORD* bmp = (WORD *)bitmap;
  
  WORD x;
  WORD y;
  WORD i = 0;
 800638a:	2300      	movs	r3, #0
{
 800638c:	4688      	mov	r8, r1
 800638e:	4615      	mov	r5, r2
  
  for(y = rect->top; y <= rect->bottom; y++) 
 8006390:	8894      	ldrh	r4, [r2, #4]
 8006392:	88ea      	ldrh	r2, [r5, #6]
 8006394:	42a2      	cmp	r2, r4
 8006396:	d202      	bcs.n	800639e <output_func+0x18>
    }
  }
  // It would be better to use DMA2D here.
  
  return 1; //return decoding
}
 8006398:	2001      	movs	r0, #1
 800639a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    for(x = rect->left; x <= rect->right; x++) 
 800639e:	882e      	ldrh	r6, [r5, #0]
 80063a0:	1af6      	subs	r6, r6, r3
 80063a2:	1998      	adds	r0, r3, r6
 80063a4:	886a      	ldrh	r2, [r5, #2]
 80063a6:	b280      	uxth	r0, r0
 80063a8:	4282      	cmp	r2, r0
 80063aa:	d202      	bcs.n	80063b2 <output_func+0x2c>
  for(y = rect->top; y <= rect->bottom; y++) 
 80063ac:	3401      	adds	r4, #1
 80063ae:	b2a4      	uxth	r4, r4
 80063b0:	e7ef      	b.n	8006392 <output_func+0xc>
      lcd_set_pixel(x, y, bmp[i++]);
 80063b2:	1c5f      	adds	r7, r3, #1
 80063b4:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 80063b8:	4621      	mov	r1, r4
 80063ba:	b2bf      	uxth	r7, r7
 80063bc:	f7ff fbf6 	bl	8005bac <lcd_set_pixel>
 80063c0:	463b      	mov	r3, r7
 80063c2:	e7ee      	b.n	80063a2 <output_func+0x1c>

080063c4 <mjpeg_decompression_and_draw>:

//Decompress and draw at LCD single MJPEG frame from "source"
//"source_size" - length of raw image size in bytes
void mjpeg_decompression_and_draw(uint8_t* source, uint32_t source_size)
{
  iodev.jpic = source;
 80063c4:	4b0c      	ldr	r3, [pc, #48]	; (80063f8 <mjpeg_decompression_and_draw+0x34>)
  iodev.jsize = source_size;
  iodev.joffset = 0;
 80063c6:	2200      	movs	r2, #0
{
 80063c8:	b513      	push	{r0, r1, r4, lr}
  
  rc = jd_prepare(&jd, input_func, jdwork, sizeof(jdwork), &iodev);
 80063ca:	4c0c      	ldr	r4, [pc, #48]	; (80063fc <mjpeg_decompression_and_draw+0x38>)
  iodev.jpic = source;
 80063cc:	6018      	str	r0, [r3, #0]
  iodev.jsize = source_size;
 80063ce:	8099      	strh	r1, [r3, #4]
  iodev.joffset = 0;
 80063d0:	80da      	strh	r2, [r3, #6]
  rc = jd_prepare(&jd, input_func, jdwork, sizeof(jdwork), &iodev);
 80063d2:	490b      	ldr	r1, [pc, #44]	; (8006400 <mjpeg_decompression_and_draw+0x3c>)
 80063d4:	9300      	str	r3, [sp, #0]
 80063d6:	f640 431c 	movw	r3, #3100	; 0xc1c
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <mjpeg_decompression_and_draw+0x40>)
 80063dc:	480a      	ldr	r0, [pc, #40]	; (8006408 <mjpeg_decompression_and_draw+0x44>)
 80063de:	f000 facb 	bl	8006978 <jd_prepare>
 80063e2:	4602      	mov	r2, r0
 80063e4:	7020      	strb	r0, [r4, #0]
  
  if(rc != JDR_OK) 
 80063e6:	b920      	cbnz	r0, 80063f2 <mjpeg_decompression_and_draw+0x2e>
  {
    return;
  }
  
  rc = jd_decomp(&jd, output_func, SCALE);
 80063e8:	4908      	ldr	r1, [pc, #32]	; (800640c <mjpeg_decompression_and_draw+0x48>)
 80063ea:	4807      	ldr	r0, [pc, #28]	; (8006408 <mjpeg_decompression_and_draw+0x44>)
 80063ec:	f000 fc68 	bl	8006cc0 <jd_decomp>
 80063f0:	7020      	strb	r0, [r4, #0]
  if(rc != JDR_OK) 
  {
    return;
  }
}
 80063f2:	b002      	add	sp, #8
 80063f4:	bd10      	pop	{r4, pc}
 80063f6:	bf00      	nop
 80063f8:	20006704 	.word	0x20006704
 80063fc:	20006700 	.word	0x20006700
 8006400:	0800635f 	.word	0x0800635f
 8006404:	2000670c 	.word	0x2000670c
 8006408:	20006680 	.word	0x20006680
 800640c:	08006387 	.word	0x08006387

08006410 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <HAL_MspInit+0x3c>)
{
 8006412:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8006414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  __HAL_RCC_SYSCFG_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006416:	210f      	movs	r1, #15
 8006418:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 800641c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006420:	641a      	str	r2, [r3, #64]	; 0x40
 8006422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006424:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8006428:	9200      	str	r2, [sp, #0]
 800642a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800642c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800642e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006432:	645a      	str	r2, [r3, #68]	; 0x44
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006434:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006438:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643c:	9301      	str	r3, [sp, #4]
 800643e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006440:	f7fa f924 	bl	800068c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006444:	b003      	add	sp, #12
 8006446:	f85d fb04 	ldr.w	pc, [sp], #4
 800644a:	bf00      	nop
 800644c:	40023800 	.word	0x40023800

08006450 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8006450:	6802      	ldr	r2, [r0, #0]
{
 8006452:	b082      	sub	sp, #8
  if(hdma2d->Instance==DMA2D)
 8006454:	4b07      	ldr	r3, [pc, #28]	; (8006474 <HAL_DMA2D_MspInit+0x24>)
 8006456:	429a      	cmp	r2, r3
 8006458:	d10a      	bne.n	8006470 <HAL_DMA2D_MspInit+0x20>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800645a:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 800645e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006460:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006464:	631a      	str	r2, [r3, #48]	; 0x30
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800646c:	9301      	str	r3, [sp, #4]
 800646e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8006470:	b002      	add	sp, #8
 8006472:	4770      	bx	lr
 8006474:	4002b000 	.word	0x4002b000

08006478 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8006478:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800647a:	2214      	movs	r2, #20
{
 800647c:	b08a      	sub	sp, #40	; 0x28
 800647e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006480:	2100      	movs	r1, #0
 8006482:	eb0d 0002 	add.w	r0, sp, r2
 8006486:	f001 f907 	bl	8007698 <memset>
  if(hltdc->Instance==LTDC)
 800648a:	6822      	ldr	r2, [r4, #0]
 800648c:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_LTDC_MspInit+0xd8>)
 800648e:	429a      	cmp	r2, r3
 8006490:	d15c      	bne.n	800654c <HAL_LTDC_MspInit+0xd4>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8006492:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
                          |GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_7 
                          |GPIO_PIN_9|GPIO_PIN_6|GPIO_PIN_4|GPIO_PIN_5 
                          |GPIO_PIN_3|GPIO_PIN_2|GPIO_PIN_0|GPIO_PIN_1;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006496:	2402      	movs	r4, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006498:	250e      	movs	r5, #14
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800649a:	a905      	add	r1, sp, #20
    __HAL_RCC_LTDC_CLK_ENABLE();
 800649c:	6c5a      	ldr	r2, [r3, #68]	; 0x44

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649e:	2600      	movs	r6, #0
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80064a0:	482c      	ldr	r0, [pc, #176]	; (8006554 <HAL_LTDC_MspInit+0xdc>)
    __HAL_RCC_LTDC_CLK_ENABLE();
 80064a2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80064a6:	645a      	str	r2, [r3, #68]	; 0x44
 80064a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80064aa:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80064ae:	9200      	str	r2, [sp, #0]
 80064b0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80064b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
 80064ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064bc:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80064c0:	9201      	str	r2, [sp, #4]
 80064c2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80064c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064ca:	631a      	str	r2, [r3, #48]	; 0x30
 80064cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ce:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 80064d2:	9202      	str	r2, [sp, #8]
 80064d4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80064d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064dc:	631a      	str	r2, [r3, #48]	; 0x30
 80064de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064e0:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80064e4:	9203      	str	r2, [sp, #12]
 80064e6:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80064e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064f2:	9406      	str	r4, [sp, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80064f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80064f8:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80064fa:	9509      	str	r5, [sp, #36]	; 0x24
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80064fc:	9304      	str	r3, [sp, #16]
 80064fe:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12|GPIO_PIN_14|GPIO_PIN_15 
 8006500:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006504:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8006506:	f7fa fabb 	bl	8000a80 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 800650a:	23f7      	movs	r3, #247	; 0xf7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800650c:	a905      	add	r1, sp, #20
 800650e:	4812      	ldr	r0, [pc, #72]	; (8006558 <HAL_LTDC_MspInit+0xe0>)
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4 
 8006510:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006512:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006514:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006516:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006518:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800651a:	f7fa fab1 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800651e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006522:	a905      	add	r1, sp, #20
 8006524:	480d      	ldr	r0, [pc, #52]	; (800655c <HAL_LTDC_MspInit+0xe4>)
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8006526:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8006528:	2309      	movs	r3, #9
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800652a:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800652c:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800652e:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006530:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006532:	f7fa faa5 	bl	8000a80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 8006536:	f44f 4346 	mov.w	r3, #50688	; 0xc600
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800653a:	a905      	add	r1, sp, #20
 800653c:	4808      	ldr	r0, [pc, #32]	; (8006560 <HAL_LTDC_MspInit+0xe8>)
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_15|GPIO_PIN_14;
 800653e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006540:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006542:	9607      	str	r6, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006544:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8006546:	9509      	str	r5, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8006548:	f7fa fa9a 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800654c:	b00a      	add	sp, #40	; 0x28
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	40016800 	.word	0x40016800
 8006554:	40022400 	.word	0x40022400
 8006558:	40022800 	.word	0x40022800
 800655c:	40021800 	.word	0x40021800
 8006560:	40022000 	.word	0x40022000

08006564 <HAL_RNG_MspInit>:
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
  if(hrng->Instance==RNG)
 8006564:	6802      	ldr	r2, [r0, #0]
{
 8006566:	b082      	sub	sp, #8
  if(hrng->Instance==RNG)
 8006568:	4b07      	ldr	r3, [pc, #28]	; (8006588 <HAL_RNG_MspInit+0x24>)
 800656a:	429a      	cmp	r2, r3
 800656c:	d109      	bne.n	8006582 <HAL_RNG_MspInit+0x1e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800656e:	4b07      	ldr	r3, [pc, #28]	; (800658c <HAL_RNG_MspInit+0x28>)
 8006570:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006572:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006576:	635a      	str	r2, [r3, #52]	; 0x34
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800657e:	9301      	str	r3, [sp, #4]
 8006580:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8006582:	b002      	add	sp, #8
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	50060800 	.word	0x50060800
 800658c:	40023800 	.word	0x40023800

08006590 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM9)
 8006590:	6802      	ldr	r2, [r0, #0]
{
 8006592:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM9)
 8006594:	4b07      	ldr	r3, [pc, #28]	; (80065b4 <HAL_TIM_Base_MspInit+0x24>)
 8006596:	429a      	cmp	r2, r3
 8006598:	d10a      	bne.n	80065b0 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 800659a:	f503 4378 	add.w	r3, r3, #63488	; 0xf800
 800659e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80065a4:	645a      	str	r2, [r3, #68]	; 0x44
 80065a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065ac:	9301      	str	r3, [sp, #4]
 80065ae:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80065b0:	b002      	add	sp, #8
 80065b2:	4770      	bx	lr
 80065b4:	40014000 	.word	0x40014000

080065b8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80065b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80065ba:	b087      	sub	sp, #28
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80065bc:	2214      	movs	r2, #20
 80065be:	2100      	movs	r1, #0
 80065c0:	a801      	add	r0, sp, #4
 80065c2:	f001 f869 	bl	8007698 <memset>
  if (FMC_Initialized) {
 80065c6:	4b2a      	ldr	r3, [pc, #168]	; (8006670 <HAL_SDRAM_MspInit+0xb8>)
 80065c8:	681e      	ldr	r6, [r3, #0]
 80065ca:	2e00      	cmp	r6, #0
 80065cc:	d14d      	bne.n	800666a <HAL_SDRAM_MspInit+0xb2>
  FMC_Initialized = 1;
 80065ce:	2201      	movs	r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065d0:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d2:	2503      	movs	r5, #3
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065d4:	240c      	movs	r4, #12
  FMC_Initialized = 1;
 80065d6:	601a      	str	r2, [r3, #0]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065d8:	a901      	add	r1, sp, #4
  __HAL_RCC_FMC_CLK_ENABLE();
 80065da:	4b26      	ldr	r3, [pc, #152]	; (8006674 <HAL_SDRAM_MspInit+0xbc>)
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065dc:	4826      	ldr	r0, [pc, #152]	; (8006678 <HAL_SDRAM_MspInit+0xc0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80065de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	639a      	str	r2, [r3, #56]	; 0x38
 80065e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065e8:	9702      	str	r7, [sp, #8]
  __HAL_RCC_FMC_CLK_ENABLE();
 80065ea:	f003 0301 	and.w	r3, r3, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065ee:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80065f0:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 80065f2:	9300      	str	r3, [sp, #0]
 80065f4:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9 
 80065f6:	f64f 7383 	movw	r3, #65411	; 0xff83
 80065fa:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80065fc:	f7fa fa40 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 8006600:	f248 1313 	movw	r3, #33043	; 0x8113
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006604:	a901      	add	r1, sp, #4
 8006606:	481d      	ldr	r0, [pc, #116]	; (800667c <HAL_SDRAM_MspInit+0xc4>)
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0 
 8006608:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800660c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800660e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006610:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006612:	f7fa fa35 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 8006616:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800661a:	a901      	add	r1, sp, #4
 800661c:	4818      	ldr	r0, [pc, #96]	; (8006680 <HAL_SDRAM_MspInit+0xc8>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10 
 800661e:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006620:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006622:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006624:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006626:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006628:	f7fa fa2a 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 800662c:	f64f 033f 	movw	r3, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006630:	a901      	add	r1, sp, #4
 8006632:	4814      	ldr	r0, [pc, #80]	; (8006684 <HAL_SDRAM_MspInit+0xcc>)
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8006634:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006636:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006638:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663a:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800663c:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800663e:	f7fa fa1f 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8006642:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006644:	a901      	add	r1, sp, #4
 8006646:	4810      	ldr	r0, [pc, #64]	; (8006688 <HAL_SDRAM_MspInit+0xd0>)
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8006648:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800664a:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800664c:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800664e:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006650:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8006652:	f7fa fa15 	bl	8000a80 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8006656:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006658:	a901      	add	r1, sp, #4
 800665a:	480c      	ldr	r0, [pc, #48]	; (800668c <HAL_SDRAM_MspInit+0xd4>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800665c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800665e:	9702      	str	r7, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006660:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006662:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006664:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006666:	f7fa fa0b 	bl	8000a80 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800666a:	b007      	add	sp, #28
 800666c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800666e:	bf00      	nop
 8006670:	2000401c 	.word	0x2000401c
 8006674:	40023800 	.word	0x40023800
 8006678:	40021000 	.word	0x40021000
 800667c:	40021800 	.word	0x40021800
 8006680:	40020c00 	.word	0x40020c00
 8006684:	40021400 	.word	0x40021400
 8006688:	40021c00 	.word	0x40021c00
 800668c:	40020800 	.word	0x40020800

08006690 <NMI_Handler>:
 8006690:	4770      	bx	lr

08006692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006692:	e7fe      	b.n	8006692 <HardFault_Handler>

08006694 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006694:	e7fe      	b.n	8006694 <MemManage_Handler>

08006696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006696:	e7fe      	b.n	8006696 <BusFault_Handler>

08006698 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006698:	e7fe      	b.n	8006698 <UsageFault_Handler>

0800669a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800669a:	4770      	bx	lr

0800669c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800669c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800669e:	f7f9 ffbf 	bl	8000620 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80066a2:	f7ff f895 	bl	80057d0 <xTaskGetSchedulerState>
 80066a6:	2801      	cmp	r0, #1
 80066a8:	d003      	beq.n	80066b2 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80066aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 80066ae:	f7fd bfa9 	b.w	8004604 <xPortSysTickHandler>
 80066b2:	bd08      	pop	{r3, pc}

080066b4 <OTG_HS_IRQHandler>:
void OTG_HS_IRQHandler(void)
{
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80066b4:	4801      	ldr	r0, [pc, #4]	; (80066bc <OTG_HS_IRQHandler+0x8>)
 80066b6:	f7fa bbd3 	b.w	8000e60 <HAL_HCD_IRQHandler>
 80066ba:	bf00      	nop
 80066bc:	20007acc 	.word	0x20007acc

080066c0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80066c0:	b570      	push	{r4, r5, r6, lr}
 80066c2:	460e      	mov	r6, r1
 80066c4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066c6:	460c      	mov	r4, r1
 80066c8:	1ba3      	subs	r3, r4, r6
 80066ca:	429d      	cmp	r5, r3
 80066cc:	dc01      	bgt.n	80066d2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80066ce:	4628      	mov	r0, r5
 80066d0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80066d2:	f3af 8000 	nop.w
 80066d6:	f804 0b01 	strb.w	r0, [r4], #1
 80066da:	e7f5      	b.n	80066c8 <_read+0x8>

080066dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80066dc:	b570      	push	{r4, r5, r6, lr}
 80066de:	460e      	mov	r6, r1
 80066e0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80066e2:	460c      	mov	r4, r1
 80066e4:	1ba3      	subs	r3, r4, r6
 80066e6:	429d      	cmp	r5, r3
 80066e8:	dc01      	bgt.n	80066ee <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80066ea:	4628      	mov	r0, r5
 80066ec:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80066ee:	f814 0b01 	ldrb.w	r0, [r4], #1
 80066f2:	f3af 8000 	nop.w
 80066f6:	e7f5      	b.n	80066e4 <_write+0x8>

080066f8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80066f8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80066fa:	4b0a      	ldr	r3, [pc, #40]	; (8006724 <_sbrk+0x2c>)
{
 80066fc:	4602      	mov	r2, r0
	if (heap_end == 0)
 80066fe:	6819      	ldr	r1, [r3, #0]
 8006700:	b909      	cbnz	r1, 8006706 <_sbrk+0xe>
		heap_end = &end;
 8006702:	4909      	ldr	r1, [pc, #36]	; (8006728 <_sbrk+0x30>)
 8006704:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8006706:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8006708:	4669      	mov	r1, sp
 800670a:	4402      	add	r2, r0
 800670c:	428a      	cmp	r2, r1
 800670e:	d906      	bls.n	800671e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8006710:	f000 ff6e 	bl	80075f0 <__errno>
 8006714:	230c      	movs	r3, #12
 8006716:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8006718:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800671c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800671e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8006720:	bd08      	pop	{r3, pc}
 8006722:	bf00      	nop
 8006724:	20004020 	.word	0x20004020
 8006728:	20007d94 	.word	0x20007d94

0800672c <_close>:

int _close(int file)
{
	return -1;
}
 800672c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006730:	4770      	bx	lr

08006732 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8006732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	return 0;
}
 8006736:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8006738:	604b      	str	r3, [r1, #4]
}
 800673a:	4770      	bx	lr

0800673c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800673c:	2001      	movs	r0, #1
 800673e:	4770      	bx	lr

08006740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8006740:	2000      	movs	r0, #0
 8006742:	4770      	bx	lr

08006744 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006744:	4b05      	ldr	r3, [pc, #20]	; (800675c <SystemInit+0x18>)
 8006746:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800674a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006752:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	e000ed00 	.word	0xe000ed00

08006760 <alloc_pool>:
)
{
	char *rp = 0;


	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8006760:	3103      	adds	r1, #3

	if (jd->sz_pool >= nd) {
 8006762:	6f02      	ldr	r2, [r0, #112]	; 0x70
{
 8006764:	4603      	mov	r3, r0
	nd = (nd + 3) & ~3;			/* Align block size to the word boundary */
 8006766:	f021 0103 	bic.w	r1, r1, #3
	if (jd->sz_pool >= nd) {
 800676a:	4291      	cmp	r1, r2
		jd->sz_pool -= nd;
 800676c:	bf9d      	ittte	ls
 800676e:	1a52      	subls	r2, r2, r1
 8006770:	6702      	strls	r2, [r0, #112]	; 0x70
		rp = (char*)jd->pool;			/* Get start of available memory pool */
 8006772:	6ec0      	ldrls	r0, [r0, #108]	; 0x6c
	char *rp = 0;
 8006774:	2000      	movhi	r0, #0
		jd->pool = (void*)(rp + nd);	/* Allocate requierd bytes */
 8006776:	bf9c      	itt	ls
 8006778:	1809      	addls	r1, r1, r0
 800677a:	66d9      	strls	r1, [r3, #108]	; 0x6c
	}

	return (void*)rp;	/* Return allocated memory block (NULL:no memory to allocate) */
}
 800677c:	4770      	bx	lr

0800677e <create_huffman_tbl>:
UINT create_huffman_tbl (	/* 0:OK, !0:Failed */
	JDEC* jd,				/* Pointer to the decompressor object */
	const BYTE* data,		/* Pointer to the packed huffman tables */
	UINT ndata				/* Size of input data */
)
{
 800677e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006782:	4680      	mov	r8, r0
 8006784:	460e      	mov	r6, r1
 8006786:	4615      	mov	r5, r2
	UINT i, j, b, np, cls, num;
	BYTE d, *pb, *pd;
	WORD hc, *ph;


	while (ndata) {	/* Process all tables in the segment */
 8006788:	b115      	cbz	r5, 8006790 <create_huffman_tbl+0x12>
		if (ndata < 17) return JDR_FMT1;	/* Err: wrong data size */
 800678a:	2d10      	cmp	r5, #16
 800678c:	d804      	bhi.n	8006798 <create_huffman_tbl+0x1a>
 800678e:	2506      	movs	r5, #6
			*pd++ = d;
		}
	}

	return JDR_OK;
}
 8006790:	4628      	mov	r0, r5
 8006792:	b003      	add	sp, #12
 8006794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		d = *data++;						/* Get table number and class */
 8006798:	7834      	ldrb	r4, [r6, #0]
 800679a:	1c73      	adds	r3, r6, #1
		ndata -= 17;
 800679c:	3d11      	subs	r5, #17
		cls = (d >> 4); num = d & 0x0F;		/* class = dc(0)/ac(1), table number = 0/1 */
 800679e:	ea4f 1914 	mov.w	r9, r4, lsr #4
 80067a2:	f004 070f 	and.w	r7, r4, #15
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 80067a6:	f014 04ee 	ands.w	r4, r4, #238	; 0xee
		d = *data++;						/* Get table number and class */
 80067aa:	9300      	str	r3, [sp, #0]
		if (d & 0xEE) return JDR_FMT1;		/* Err: invalid class/number */
 80067ac:	d1ef      	bne.n	800678e <create_huffman_tbl+0x10>
		pb = alloc_pool(jd, 16);			/* Allocate a memory block for the bit distribution table */
 80067ae:	2110      	movs	r1, #16
 80067b0:	4640      	mov	r0, r8
 80067b2:	f7ff ffd5 	bl	8006760 <alloc_pool>
		if (!pb) return JDR_MEM1;			/* Err: not enough memory */
 80067b6:	9b00      	ldr	r3, [sp, #0]
 80067b8:	4683      	mov	fp, r0
 80067ba:	b908      	cbnz	r0, 80067c0 <create_huffman_tbl+0x42>
 80067bc:	2503      	movs	r5, #3
 80067be:	e7e7      	b.n	8006790 <create_huffman_tbl+0x12>
 80067c0:	2202      	movs	r2, #2
 80067c2:	f100 3aff 	add.w	sl, r0, #4294967295	; 0xffffffff
 80067c6:	3611      	adds	r6, #17
 80067c8:	fb12 9707 	smlabb	r7, r2, r7, r9
		jd->huffbits[num][cls] = pb;
 80067cc:	4651      	mov	r1, sl
 80067ce:	eb08 0787 	add.w	r7, r8, r7, lsl #2
 80067d2:	6278      	str	r0, [r7, #36]	; 0x24
			pb[i] = b = *data++;
 80067d4:	f813 2b01 	ldrb.w	r2, [r3], #1
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 80067d8:	42b3      	cmp	r3, r6
			pb[i] = b = *data++;
 80067da:	f801 2f01 	strb.w	r2, [r1, #1]!
			np += b;	/* Get sum of code words for each code */
 80067de:	4414      	add	r4, r2
		for (np = i = 0; i < 16; i++) {		/* Load number of patterns for 1 to 16-bit code */
 80067e0:	d1f8      	bne.n	80067d4 <create_huffman_tbl+0x56>
		ph = alloc_pool(jd, np * sizeof(WORD));	/* Allocate a memory block for the code word table */
 80067e2:	0061      	lsls	r1, r4, #1
 80067e4:	4640      	mov	r0, r8
 80067e6:	461e      	mov	r6, r3
 80067e8:	f7ff ffba 	bl	8006760 <alloc_pool>
		if (!ph) return JDR_MEM1;			/* Err: not enough memory */
 80067ec:	2800      	cmp	r0, #0
 80067ee:	d0e5      	beq.n	80067bc <create_huffman_tbl+0x3e>
		hc = 0;
 80067f0:	2100      	movs	r1, #0
 80067f2:	f10b 030f 	add.w	r3, fp, #15
		jd->huffcode[num][cls] = ph;
 80067f6:	6378      	str	r0, [r7, #52]	; 0x34
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 80067f8:	468e      	mov	lr, r1
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	eb00 034e 	add.w	r3, r0, lr, lsl #1
			b = pb[i];
 8006800:	f81a cf01 	ldrb.w	ip, [sl, #1]!
			while (b--) ph[j++] = hc++;
 8006804:	2200      	movs	r2, #0
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	188b      	adds	r3, r1, r2
 800680a:	4594      	cmp	ip, r2
 800680c:	b29b      	uxth	r3, r3
 800680e:	469b      	mov	fp, r3
 8006810:	d11c      	bne.n	800684c <create_huffman_tbl+0xce>
			hc <<= 1;
 8006812:	005b      	lsls	r3, r3, #1
 8006814:	44e6      	add	lr, ip
 8006816:	b299      	uxth	r1, r3
		for (j = i = 0; i < 16; i++) {		/* Re-build huffman code word table */
 8006818:	9b01      	ldr	r3, [sp, #4]
 800681a:	4553      	cmp	r3, sl
 800681c:	d1ee      	bne.n	80067fc <create_huffman_tbl+0x7e>
		if (ndata < np) return JDR_FMT1;	/* Err: wrong data size */
 800681e:	42a5      	cmp	r5, r4
 8006820:	d3b5      	bcc.n	800678e <create_huffman_tbl+0x10>
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 8006822:	4621      	mov	r1, r4
 8006824:	4640      	mov	r0, r8
		ndata -= np;
 8006826:	1b2d      	subs	r5, r5, r4
		pd = alloc_pool(jd, np);			/* Allocate a memory block for the decoded data */
 8006828:	f7ff ff9a 	bl	8006760 <alloc_pool>
		if (!pd) return JDR_MEM1;			/* Err: not enough memory */
 800682c:	2800      	cmp	r0, #0
 800682e:	d0c5      	beq.n	80067bc <create_huffman_tbl+0x3e>
 8006830:	4404      	add	r4, r0
		jd->huffdata[num][cls] = pd;
 8006832:	6478      	str	r0, [r7, #68]	; 0x44
		for (i = 0; i < np; i++) {			/* Load decoded data corresponds to each code ward */
 8006834:	4284      	cmp	r4, r0
 8006836:	d0a7      	beq.n	8006788 <create_huffman_tbl+0xa>
			d = *data++;
 8006838:	f816 3b01 	ldrb.w	r3, [r6], #1
			if (!cls && d > 11) return JDR_FMT1;
 800683c:	f1b9 0f00 	cmp.w	r9, #0
 8006840:	d101      	bne.n	8006846 <create_huffman_tbl+0xc8>
 8006842:	2b0b      	cmp	r3, #11
 8006844:	d8a3      	bhi.n	800678e <create_huffman_tbl+0x10>
			*pd++ = d;
 8006846:	f800 3b01 	strb.w	r3, [r0], #1
 800684a:	e7f3      	b.n	8006834 <create_huffman_tbl+0xb6>
			while (b--) ph[j++] = hc++;
 800684c:	9b00      	ldr	r3, [sp, #0]
 800684e:	f823 b012 	strh.w	fp, [r3, r2, lsl #1]
 8006852:	3201      	adds	r2, #1
 8006854:	e7d8      	b.n	8006808 <create_huffman_tbl+0x8a>

08006856 <bitext>:
static
INT bitext (	/* >=0: extracted data, <0: error code */
	JDEC* jd,	/* Pointer to the decompressor object */
	UINT nbit	/* Number of bits to extract (1 to 11) */
)
{
 8006856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800685a:	4605      	mov	r5, r0
	BYTE msk, s, *dp;
	UINT dc, v, f;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 800685c:	7b07      	ldrb	r7, [r0, #12]
	s = *dp; v = f = 0;
 800685e:	f04f 0800 	mov.w	r8, #0
{
 8006862:	4689      	mov	r9, r1
			}
			dc--;				/* Decrement number of available bytes */
			if (f) {			/* In flag sequence? */
				f = 0;			/* Exit flag sequence */
				if (*dp != 0) return 0 - JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8006864:	f04f 0aff 	mov.w	sl, #255	; 0xff
	s = *dp; v = f = 0;
 8006868:	4644      	mov	r4, r8
	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 800686a:	c841      	ldmia	r0, {r0, r6}
	s = *dp; v = f = 0;
 800686c:	7833      	ldrb	r3, [r6, #0]
		if (!msk) {				/* Next byte? */
 800686e:	b9c7      	cbnz	r7, 80068a2 <bitext+0x4c>
			if (!dc) {			/* No input data is available, re-fill input buffer */
 8006870:	b958      	cbnz	r0, 800688a <bitext+0x34>
				dp = jd->inbuf;	/* Top of input buffer */
 8006872:	68ae      	ldr	r6, [r5, #8]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8006874:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006878:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800687a:	4628      	mov	r0, r5
 800687c:	4631      	mov	r1, r6
 800687e:	4798      	blx	r3
				if (!dc) return 0 - JDR_INP;	/* Err: read error or wrong stream termination */
 8006880:	b920      	cbnz	r0, 800688c <bitext+0x36>
 8006882:	f06f 0001 	mvn.w	r0, #1
 8006886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				dp++;			/* Next data ptr */
 800688a:	3601      	adds	r6, #1
			dc--;				/* Decrement number of available bytes */
 800688c:	3801      	subs	r0, #1
 800688e:	7833      	ldrb	r3, [r6, #0]
			if (f) {			/* In flag sequence? */
 8006890:	f1b8 0f00 	cmp.w	r8, #0
 8006894:	d017      	beq.n	80068c6 <bitext+0x70>
				if (*dp != 0) return 0 - JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 8006896:	b9db      	cbnz	r3, 80068d0 <bitext+0x7a>
				f = 0;			/* Exit flag sequence */
 8006898:	4698      	mov	r8, r3
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 800689a:	23ff      	movs	r3, #255	; 0xff
 800689c:	f886 a000 	strb.w	sl, [r6]
				s = *dp;				/* Get next data byte */
				if (s == 0xFF) {		/* Is start of flag sequence? */
					f = 1; continue;	/* Enter flag sequence */
				}
			}
			msk = 0x80;		/* Read from MSB */
 80068a0:	2780      	movs	r7, #128	; 0x80
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
 80068a2:	421f      	tst	r7, r3
		v <<= 1;	/* Get a bit */
 80068a4:	ea4f 0444 	mov.w	r4, r4, lsl #1
		msk >>= 1;
 80068a8:	ea4f 0757 	mov.w	r7, r7, lsr #1
		nbit--;
 80068ac:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
		if (s & msk) v++;
 80068b0:	bf18      	it	ne
 80068b2:	3401      	addne	r4, #1
	} while (nbit);
 80068b4:	f1b9 0f00 	cmp.w	r9, #0
 80068b8:	d1d9      	bne.n	800686e <bitext+0x18>
	jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 80068ba:	e885 0041 	stmia.w	r5, {r0, r6}
 80068be:	732f      	strb	r7, [r5, #12]

	return (INT)v;
 80068c0:	4620      	mov	r0, r4
 80068c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				if (s == 0xFF) {		/* Is start of flag sequence? */
 80068c6:	2bff      	cmp	r3, #255	; 0xff
 80068c8:	d1ea      	bne.n	80068a0 <bitext+0x4a>
					f = 1; continue;	/* Enter flag sequence */
 80068ca:	f04f 0801 	mov.w	r8, #1
 80068ce:	e7f1      	b.n	80068b4 <bitext+0x5e>
				if (*dp != 0) return 0 - JDR_FMT1;	/* Err: unexpected flag is detected (may be collapted data) */
 80068d0:	f06f 0005 	mvn.w	r0, #5
}
 80068d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080068d8 <huffext>:
	JDEC* jd,			/* Pointer to the decompressor object */
	const BYTE* hbits,	/* Pointer to the bit distribution table */
	const WORD* hcode,	/* Pointer to the code word table */
	const BYTE* hdata	/* Pointer to the data table */
)
{
 80068d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	4604      	mov	r4, r0
 80068de:	4688      	mov	r8, r1
	BYTE msk, s, *dp;
	UINT dc, v, f, bl, nd;


	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
	s = *dp; v = f = 0;
 80068e0:	2700      	movs	r7, #0
	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 80068e2:	7b01      	ldrb	r1, [r0, #12]
{
 80068e4:	4692      	mov	sl, r2
 80068e6:	469b      	mov	fp, r3
	bl = 16;	/* Max code length */
 80068e8:	f04f 0910 	mov.w	r9, #16
	s = *dp; v = f = 0;
 80068ec:	463e      	mov	r6, r7
	msk = jd->dmsk; dc = jd->dctr; dp = jd->dptr;	/* Bit mask, number of data available, read ptr */
 80068ee:	c821      	ldmia	r0, {r0, r5}
	s = *dp; v = f = 0;
 80068f0:	782a      	ldrb	r2, [r5, #0]
	do {
		if (!msk) {		/* Next byte? */
 80068f2:	b311      	cbz	r1, 800693a <huffext+0x62>
				}
			}
			msk = 0x80;		/* Read from MSB */
		}
		v <<= 1;	/* Get a bit */
		if (s & msk) v++;
 80068f4:	4211      	tst	r1, r2
		v <<= 1;	/* Get a bit */
 80068f6:	ea4f 0646 	mov.w	r6, r6, lsl #1
		msk >>= 1;
 80068fa:	ea4f 0151 	mov.w	r1, r1, lsr #1

		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 80068fe:	f898 3000 	ldrb.w	r3, [r8]
		if (s & msk) v++;
 8006902:	bf18      	it	ne
 8006904:	3601      	addne	r6, #1
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8006906:	bb3b      	cbnz	r3, 8006958 <huffext+0x80>
				return *hdata;			/* Return the decoded data */
			}
			hdata++;
		}
		bl--;
	} while (bl);
 8006908:	f1b9 0901 	subs.w	r9, r9, #1
 800690c:	d007      	beq.n	800691e <huffext+0x46>
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 800690e:	f108 0801 	add.w	r8, r8, #1
 8006912:	e7ee      	b.n	80068f2 <huffext+0x1a>
				dp++;	/* Next data ptr */
 8006914:	3501      	adds	r5, #1
			dc--;		/* Decrement number of available bytes */
 8006916:	3801      	subs	r0, #1
 8006918:	782a      	ldrb	r2, [r5, #0]
			if (f) {		/* In flag sequence? */
 800691a:	b15f      	cbz	r7, 8006934 <huffext+0x5c>
				if (*dp != 0)
 800691c:	b11a      	cbz	r2, 8006926 <huffext+0x4e>
					return 0 - JDR_FMT1;/* Err: unexpected flag is detected (may be collapted data) */
 800691e:	f06f 0005 	mvn.w	r0, #5
 8006922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 8006926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
				f = 0;		/* Exit flag sequence */
 800692a:	4617      	mov	r7, r2
				*dp = s = 0xFF;			/* The flag is a data 0xFF */
 800692c:	22ff      	movs	r2, #255	; 0xff
 800692e:	702b      	strb	r3, [r5, #0]
			msk = 0x80;		/* Read from MSB */
 8006930:	2180      	movs	r1, #128	; 0x80
 8006932:	e7df      	b.n	80068f4 <huffext+0x1c>
				if (s == 0xFF) {		/* Is start of flag sequence? */
 8006934:	2aff      	cmp	r2, #255	; 0xff
 8006936:	d1fb      	bne.n	8006930 <huffext+0x58>
					f = 1; continue;	/* Enter flag sequence, get trailing byte */
 8006938:	2701      	movs	r7, #1
			if (!dc) {	/* No input data is available, re-fill input buffer */
 800693a:	2800      	cmp	r0, #0
 800693c:	d1ea      	bne.n	8006914 <huffext+0x3c>
				dp = jd->inbuf;	/* Top of input buffer */
 800693e:	68a5      	ldr	r5, [r4, #8]
				dc = jd->infunc(jd, dp, JD_SZBUF);
 8006940:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006944:	4620      	mov	r0, r4
 8006946:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006948:	4629      	mov	r1, r5
 800694a:	4798      	blx	r3
				if (!dc) return 0 - JDR_INP;	/* Err: read error or wrong stream termination */
 800694c:	2800      	cmp	r0, #0
 800694e:	d1e2      	bne.n	8006916 <huffext+0x3e>
 8006950:	f06f 0001 	mvn.w	r0, #1

	return 0 - JDR_FMT1;	/* Err: code not found (may be collapted data) */
}
 8006954:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (v == *hcode++) {		/* Matched? */
 8006958:	f83a cb02 	ldrh.w	ip, [sl], #2
 800695c:	4566      	cmp	r6, ip
 800695e:	d106      	bne.n	800696e <huffext+0x96>
				jd->dmsk = msk; jd->dctr = dc; jd->dptr = dp;
 8006960:	7321      	strb	r1, [r4, #12]
 8006962:	e884 0021 	stmia.w	r4, {r0, r5}
				return *hdata;			/* Return the decoded data */
 8006966:	f89b 0000 	ldrb.w	r0, [fp]
 800696a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			hdata++;
 800696e:	f10b 0b01 	add.w	fp, fp, #1
		for (nd = *hbits++; nd; nd--) {	/* Search the code word in this bit length */
 8006972:	3b01      	subs	r3, #1
 8006974:	e7c7      	b.n	8006906 <huffext+0x2e>
	...

08006978 <jd_prepare>:
	UINT (*infunc)(JDEC*, BYTE*, UINT),	/* JPEG strem input function */
	void* pool,			/* Working buffer for the decompression session */
	UINT sz_pool,		/* Size of working buffer */
	void* dev			/* I/O device identifier for the session */
)
{
 8006978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800697c:	4604      	mov	r4, r0
	WORD marker;
	DWORD ofs;
	UINT n, i, j, len;
	JRESULT rc;
        
	if (!pool) return JDR_PAR;
 800697e:	2a00      	cmp	r2, #0
 8006980:	f000 818b 	beq.w	8006c9a <jd_prepare+0x322>

	jd->pool = pool;		/* Work memroy */
	jd->sz_pool = sz_pool;	/* Size of given work memory */
 8006984:	6703      	str	r3, [r0, #112]	; 0x70
	jd->infunc = infunc;	/* Stream input function */
	jd->device = dev;		/* I/O device identifier */
 8006986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	jd->infunc = infunc;	/* Stream input function */
 8006988:	6741      	str	r1, [r0, #116]	; 0x74
          }
        }
	for (i = 0; i < 4; i++) 
          jd->qttbl[i] = 0;

	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 800698a:	f44f 7100 	mov.w	r1, #512	; 0x200
	jd->device = dev;		/* I/O device identifier */
 800698e:	67c3      	str	r3, [r0, #124]	; 0x7c
	jd->nrst = 0;			/* No restart interval (default) */
 8006990:	2300      	movs	r3, #0
	jd->pool = pool;		/* Work memroy */
 8006992:	66c2      	str	r2, [r0, #108]	; 0x6c
	jd->nrst = 0;			/* No restart interval (default) */
 8006994:	8343      	strh	r3, [r0, #26]
            jd->huffbits[i][j] = 0;
 8006996:	6243      	str	r3, [r0, #36]	; 0x24
            jd->huffcode[i][j] = 0;
 8006998:	6343      	str	r3, [r0, #52]	; 0x34
            jd->huffdata[i][j] = 0;
 800699a:	6443      	str	r3, [r0, #68]	; 0x44
            jd->huffbits[i][j] = 0;
 800699c:	6283      	str	r3, [r0, #40]	; 0x28
            jd->huffcode[i][j] = 0;
 800699e:	6383      	str	r3, [r0, #56]	; 0x38
            jd->huffdata[i][j] = 0;
 80069a0:	6483      	str	r3, [r0, #72]	; 0x48
            jd->huffbits[i][j] = 0;
 80069a2:	62c3      	str	r3, [r0, #44]	; 0x2c
            jd->huffcode[i][j] = 0;
 80069a4:	63c3      	str	r3, [r0, #60]	; 0x3c
            jd->huffdata[i][j] = 0;
 80069a6:	64c3      	str	r3, [r0, #76]	; 0x4c
            jd->huffbits[i][j] = 0;
 80069a8:	6303      	str	r3, [r0, #48]	; 0x30
            jd->huffcode[i][j] = 0;
 80069aa:	6403      	str	r3, [r0, #64]	; 0x40
            jd->huffdata[i][j] = 0;
 80069ac:	6503      	str	r3, [r0, #80]	; 0x50
          jd->qttbl[i] = 0;
 80069ae:	6543      	str	r3, [r0, #84]	; 0x54
 80069b0:	6583      	str	r3, [r0, #88]	; 0x58
 80069b2:	65c3      	str	r3, [r0, #92]	; 0x5c
 80069b4:	6603      	str	r3, [r0, #96]	; 0x60
	jd->inbuf = seg = alloc_pool(jd, JD_SZBUF);		/* Allocate stream input buffer */
 80069b6:	f7ff fed3 	bl	8006760 <alloc_pool>
 80069ba:	4605      	mov	r5, r0
 80069bc:	60a0      	str	r0, [r4, #8]
	if (!seg) return JDR_MEM1;
 80069be:	2800      	cmp	r0, #0
 80069c0:	f000 8139 	beq.w	8006c36 <jd_prepare+0x2be>

	if (jd->infunc(jd, seg, 2) != 2) return JDR_INP;/* Check SOI marker */
 80069c4:	4601      	mov	r1, r0
 80069c6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80069c8:	2202      	movs	r2, #2
 80069ca:	4620      	mov	r0, r4
 80069cc:	4798      	blx	r3
 80069ce:	2802      	cmp	r0, #2
 80069d0:	d002      	beq.n	80069d8 <jd_prepare+0x60>
 80069d2:	2002      	movs	r0, #2
 80069d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (LDB_WORD(seg) != 0xFFD8) return JDR_FMT1;	/* Err: SOI is not detected */
 80069d8:	782a      	ldrb	r2, [r5, #0]
 80069da:	786b      	ldrb	r3, [r5, #1]
 80069dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80069e0:	b21b      	sxth	r3, r3
 80069e2:	3328      	adds	r3, #40	; 0x28
 80069e4:	f040 80e9 	bne.w	8006bba <jd_prepare+0x242>
 80069e8:	4607      	mov	r7, r0
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 80069ea:	f8df 82cc 	ldr.w	r8, [pc, #716]	; 8006cb8 <jd_prepare+0x340>
	ofs = 2;

	for (;;) {
		/* Get a JPEG marker */
		if (jd->infunc(jd, seg, 4) != 4) return JDR_INP;
 80069ee:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80069f0:	2204      	movs	r2, #4
 80069f2:	4629      	mov	r1, r5
 80069f4:	4620      	mov	r0, r4
 80069f6:	4798      	blx	r3
 80069f8:	2804      	cmp	r0, #4
 80069fa:	d1ea      	bne.n	80069d2 <jd_prepare+0x5a>
		marker = LDB_WORD(seg);		/* Marker */
 80069fc:	782a      	ldrb	r2, [r5, #0]
 80069fe:	786b      	ldrb	r3, [r5, #1]
		len = LDB_WORD(seg + 2);	/* Length field */
 8006a00:	78a9      	ldrb	r1, [r5, #2]
		marker = LDB_WORD(seg);		/* Marker */
 8006a02:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		len = LDB_WORD(seg + 2);	/* Length field */
 8006a06:	78ea      	ldrb	r2, [r5, #3]
 8006a08:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		if (len <= 2 || (marker >> 8) != 0xFF) return JDR_FMT1;
 8006a0c:	2a02      	cmp	r2, #2
 8006a0e:	f240 80d4 	bls.w	8006bba <jd_prepare+0x242>
 8006a12:	0a19      	lsrs	r1, r3, #8
 8006a14:	29ff      	cmp	r1, #255	; 0xff
 8006a16:	f040 80d0 	bne.w	8006bba <jd_prepare+0x242>
		len -= 2;		/* Content size excluding length field */
		ofs += 4 + len;	/* Number of bytes loaded */

		switch (marker & 0xFF) {
 8006a1a:	b2db      	uxtb	r3, r3
		len -= 2;		/* Content size excluding length field */
 8006a1c:	1e96      	subs	r6, r2, #2
		ofs += 4 + len;	/* Number of bytes loaded */
 8006a1e:	3202      	adds	r2, #2
		switch (marker & 0xFF) {
 8006a20:	3bc0      	subs	r3, #192	; 0xc0
		ofs += 4 + len;	/* Number of bytes loaded */
 8006a22:	4417      	add	r7, r2
		switch (marker & 0xFF) {
 8006a24:	2b1d      	cmp	r3, #29
 8006a26:	f200 812f 	bhi.w	8006c88 <jd_prepare+0x310>
 8006a2a:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006a2e:	001e      	.short	0x001e
 8006a30:	00360036 	.word	0x00360036
 8006a34:	00690036 	.word	0x00690036
 8006a38:	00360036 	.word	0x00360036
 8006a3c:	012d0036 	.word	0x012d0036
 8006a40:	00360036 	.word	0x00360036
 8006a44:	012d0036 	.word	0x012d0036
 8006a48:	00360036 	.word	0x00360036
 8006a4c:	012d0036 	.word	0x012d0036
 8006a50:	012d012d 	.word	0x012d012d
 8006a54:	012d012d 	.word	0x012d012d
 8006a58:	012d012d 	.word	0x012d012d
 8006a5c:	012d012d 	.word	0x012d012d
 8006a60:	00b90036 	.word	0x00b90036
 8006a64:	012d0080 	.word	0x012d0080
 8006a68:	0057      	.short	0x0057
		case 0xC0:	/* SOF0 (baseline JPEG) */
			/* Load segment data */
			if (len > JD_SZBUF) return JDR_MEM2;
 8006a6a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006a6e:	f200 8117 	bhi.w	8006ca0 <jd_prepare+0x328>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8006a72:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006a74:	4632      	mov	r2, r6
 8006a76:	4629      	mov	r1, r5
 8006a78:	4620      	mov	r0, r4
 8006a7a:	4798      	blx	r3
 8006a7c:	4286      	cmp	r6, r0
 8006a7e:	d1a8      	bne.n	80069d2 <jd_prepare+0x5a>

			jd->width = LDB_WORD(seg+3);		/* Image width in unit of pixel */
 8006a80:	78ea      	ldrb	r2, [r5, #3]
 8006a82:	792b      	ldrb	r3, [r5, #4]
 8006a84:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a88:	61e3      	str	r3, [r4, #28]
			jd->height = LDB_WORD(seg+1);		/* Image height in unit of pixel */
 8006a8a:	786a      	ldrb	r2, [r5, #1]
 8006a8c:	78ab      	ldrb	r3, [r5, #2]
 8006a8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006a92:	6223      	str	r3, [r4, #32]
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8006a94:	796b      	ldrb	r3, [r5, #5]
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d002      	beq.n	8006aa0 <jd_prepare+0x128>
		case 0xCB:	/* SOF11 */
		case 0xCD:	/* SOF13 */
		case 0xCE:	/* SOF14 */
		case 0xCF:	/* SOF15 */
		case 0xD9:	/* EOI */
			return JDR_FMT3;	/* Unsuppoted JPEG standard (may be progressive JPEG) */
 8006a9a:	2008      	movs	r0, #8
 8006a9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	f104 0010 	add.w	r0, r4, #16
			if (seg[5] != 3) return JDR_FMT3;	/* Err: Supports only Y/Cb/Cr format */
 8006aa6:	2200      	movs	r2, #0
				b = seg[7 + 3 * i];							/* Get sampling factor */
 8006aa8:	79cb      	ldrb	r3, [r1, #7]
				if (!i) {	/* Y component */
 8006aaa:	b9a2      	cbnz	r2, 8006ad6 <jd_prepare+0x15e>
					if (b != 0x11 && b != 0x22 && b != 0x21)/* Check sampling factor */
 8006aac:	2b11      	cmp	r3, #17
 8006aae:	d003      	beq.n	8006ab8 <jd_prepare+0x140>
 8006ab0:	f1a3 0621 	sub.w	r6, r3, #33	; 0x21
 8006ab4:	2e01      	cmp	r6, #1
 8006ab6:	d8f0      	bhi.n	8006a9a <jd_prepare+0x122>
					jd->msx = b >> 4; jd->msy = b & 15;		/* Size of MCU [blocks] */
 8006ab8:	091e      	lsrs	r6, r3, #4
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	73a6      	strb	r6, [r4, #14]
 8006ac0:	73e3      	strb	r3, [r4, #15]
				b = seg[8 + 3 * i];							/* Get dequantizer table ID for this component */
 8006ac2:	7a0b      	ldrb	r3, [r1, #8]
				if (b > 3) return JDR_FMT3;					/* Err: Invalid ID */
 8006ac4:	2b03      	cmp	r3, #3
 8006ac6:	d8e8      	bhi.n	8006a9a <jd_prepare+0x122>
			for (i = 0; i < 3; i++) {	
 8006ac8:	3201      	adds	r2, #1
				jd->qtid[i] = b;
 8006aca:	f800 3b01 	strb.w	r3, [r0], #1
 8006ace:	3103      	adds	r1, #3
			for (i = 0; i < 3; i++) {	
 8006ad0:	2a03      	cmp	r2, #3
 8006ad2:	d1e9      	bne.n	8006aa8 <jd_prepare+0x130>
 8006ad4:	e78b      	b.n	80069ee <jd_prepare+0x76>
					if (b != 0x11) return JDR_FMT3;			/* Err: Sampling factor of Cr/Cb must be 1 */
 8006ad6:	2b11      	cmp	r3, #17
 8006ad8:	d0f3      	beq.n	8006ac2 <jd_prepare+0x14a>
 8006ada:	e7de      	b.n	8006a9a <jd_prepare+0x122>
			if (len > JD_SZBUF) return JDR_MEM2;
 8006adc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006ae0:	f200 80de 	bhi.w	8006ca0 <jd_prepare+0x328>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8006ae4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006ae6:	4632      	mov	r2, r6
 8006ae8:	4629      	mov	r1, r5
 8006aea:	4620      	mov	r0, r4
 8006aec:	4798      	blx	r3
 8006aee:	4286      	cmp	r6, r0
 8006af0:	f47f af6f 	bne.w	80069d2 <jd_prepare+0x5a>
			jd->nrst = LDB_WORD(seg);
 8006af4:	782a      	ldrb	r2, [r5, #0]
 8006af6:	786b      	ldrb	r3, [r5, #1]
 8006af8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006afc:	8363      	strh	r3, [r4, #26]
			break;
 8006afe:	e776      	b.n	80069ee <jd_prepare+0x76>
			if (len > JD_SZBUF) return JDR_MEM2;
 8006b00:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006b04:	f200 80cc 	bhi.w	8006ca0 <jd_prepare+0x328>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8006b08:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006b0a:	4632      	mov	r2, r6
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4798      	blx	r3
 8006b12:	4286      	cmp	r6, r0
 8006b14:	f47f af5d 	bne.w	80069d2 <jd_prepare+0x5a>
			rc = (JRESULT)create_huffman_tbl(jd, seg, len);
 8006b18:	4632      	mov	r2, r6
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	f7ff fe2e 	bl	800677e <create_huffman_tbl>
 8006b22:	b2c0      	uxtb	r0, r0
			if (rc) return rc;
 8006b24:	2800      	cmp	r0, #0
 8006b26:	f43f af62 	beq.w	80069ee <jd_prepare+0x76>
 8006b2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > JD_SZBUF) return JDR_MEM2;
 8006b2e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006b32:	f200 80b5 	bhi.w	8006ca0 <jd_prepare+0x328>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8006b36:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006b38:	4632      	mov	r2, r6
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	4620      	mov	r0, r4
 8006b3e:	4798      	blx	r3
 8006b40:	4286      	cmp	r6, r0
 8006b42:	f47f af46 	bne.w	80069d2 <jd_prepare+0x5a>
 8006b46:	f105 0a41 	add.w	sl, r5, #65	; 0x41
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 8006b4a:	2e40      	cmp	r6, #64	; 0x40
 8006b4c:	f240 80ab 	bls.w	8006ca6 <jd_prepare+0x32e>
		d = *data++;							/* Get table property */
 8006b50:	f81a 3c41 	ldrb.w	r3, [sl, #-65]
		ndata -= 65;
 8006b54:	3e41      	subs	r6, #65	; 0x41
 8006b56:	f1aa 0b40 	sub.w	fp, sl, #64	; 0x40
		if (d & 0xF0) return JDR_FMT1;			/* Err: not 8-bit resolution */
 8006b5a:	f013 0ff0 	tst.w	r3, #240	; 0xf0
 8006b5e:	f040 80a2 	bne.w	8006ca6 <jd_prepare+0x32e>
		pb = alloc_pool(jd, 64 * sizeof(LONG));	/* Allocate a memory block for the table */
 8006b62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b66:	4620      	mov	r0, r4
		i = d & 3;								/* Get table ID */
 8006b68:	f003 0903 	and.w	r9, r3, #3
		pb = alloc_pool(jd, 64 * sizeof(LONG));	/* Allocate a memory block for the table */
 8006b6c:	f7ff fdf8 	bl	8006760 <alloc_pool>
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 8006b70:	2800      	cmp	r0, #0
 8006b72:	f000 809c 	beq.w	8006cae <jd_prepare+0x336>
		jd->qttbl[i] = pb;						/* Register the table */
 8006b76:	eb04 0389 	add.w	r3, r4, r9, lsl #2
 8006b7a:	494e      	ldr	r1, [pc, #312]	; (8006cb4 <jd_prepare+0x33c>)
 8006b7c:	6558      	str	r0, [r3, #84]	; 0x54
			z = ZIG(i);							/* Zigzag-order to raster-order conversion */
 8006b7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8006b82:	f81b eb01 	ldrb.w	lr, [fp], #1
 8006b86:	f838 3012 	ldrh.w	r3, [r8, r2, lsl #1]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8006b8a:	45d3      	cmp	fp, sl
			pb[z] = (LONG)((DWORD)*data++ * IPSF(z));	/* Apply scale factor of Arai algorithm to the de-quantizers */
 8006b8c:	fb03 f30e 	mul.w	r3, r3, lr
 8006b90:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		for (i = 0; i < 64; i++) {				/* Load the table */
 8006b94:	d1f3      	bne.n	8006b7e <jd_prepare+0x206>
 8006b96:	f10a 0a41 	add.w	sl, sl, #65	; 0x41
	while (ndata) {	/* Process all tables in the segment */
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d1d5      	bne.n	8006b4a <jd_prepare+0x1d2>
 8006b9e:	e726      	b.n	80069ee <jd_prepare+0x76>
			if (len > JD_SZBUF) return JDR_MEM2;
 8006ba0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006ba4:	d87c      	bhi.n	8006ca0 <jd_prepare+0x328>
			if (jd->infunc(jd, seg, len) != len) return JDR_INP;
 8006ba6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006ba8:	4632      	mov	r2, r6
 8006baa:	4629      	mov	r1, r5
 8006bac:	4620      	mov	r0, r4
 8006bae:	4798      	blx	r3
 8006bb0:	4286      	cmp	r6, r0
 8006bb2:	f47f af0e 	bne.w	80069d2 <jd_prepare+0x5a>
			if (!jd->width || !jd->height) return JDR_FMT1;	/* Err: Invalid image size */
 8006bb6:	69e3      	ldr	r3, [r4, #28]
 8006bb8:	b913      	cbnz	r3, 8006bc0 <jd_prepare+0x248>
 8006bba:	2006      	movs	r0, #6
 8006bbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bc0:	6a23      	ldr	r3, [r4, #32]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f9      	beq.n	8006bba <jd_prepare+0x242>
			if (seg[0] != 3) return JDR_FMT3;				/* Err: Supports only three color components format */
 8006bc6:	782b      	ldrb	r3, [r5, #0]
 8006bc8:	2b03      	cmp	r3, #3
 8006bca:	f47f af66 	bne.w	8006a9a <jd_prepare+0x122>
 8006bce:	f104 0810 	add.w	r8, r4, #16
 8006bd2:	2300      	movs	r3, #0
                                    rc = (JRESULT)create_huffman_tbl(jd, dht_table, sizeof(dht_table));
 8006bd4:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8006cbc <jd_prepare+0x344>
				b = seg[2 + 2 * i];	/* Get huffman table ID */
 8006bd8:	1c5e      	adds	r6, r3, #1
 8006bda:	f815 2016 	ldrb.w	r2, [r5, r6, lsl #1]
				if (b != 0x00 && b != 0x11)	return JDR_FMT3;	/* Err: Different table number for DC/AC element */
 8006bde:	b112      	cbz	r2, 8006be6 <jd_prepare+0x26e>
 8006be0:	2a11      	cmp	r2, #17
 8006be2:	f47f af5a 	bne.w	8006a9a <jd_prepare+0x122>
				b = i ? 1 : 0;
 8006be6:	3300      	adds	r3, #0
 8006be8:	bf18      	it	ne
 8006bea:	2301      	movne	r3, #1
				if (!jd->huffbits[b][0] || !jd->huffbits[b][1])	/* Check huffman table for this component */
 8006bec:	1d1a      	adds	r2, r3, #4
 8006bee:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	b312      	cbz	r2, 8006c3c <jd_prepare+0x2c4>
 8006bf6:	eb04 03c3 	add.w	r3, r4, r3, lsl #3
 8006bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bfc:	b1f3      	cbz	r3, 8006c3c <jd_prepare+0x2c4>
				if (!jd->qttbl[jd->qtid[i]]) return JDR_FMT1;	/* Err: Dequantizer table not loaded */
 8006bfe:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c02:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0d6      	beq.n	8006bba <jd_prepare+0x242>
			for (i = 0; i < 3; i++) {
 8006c0c:	2e03      	cmp	r6, #3
 8006c0e:	4633      	mov	r3, r6
 8006c10:	d1e2      	bne.n	8006bd8 <jd_prepare+0x260>
			n = jd->msy * jd->msx;						/* Number of Y blocks in the MCU */
 8006c12:	7be6      	ldrb	r6, [r4, #15]
 8006c14:	7ba1      	ldrb	r1, [r4, #14]
 8006c16:	fb16 f601 	smulbb	r6, r6, r1
			if (!n) return JDR_FMT1;					/* Err: SOF0 has not been loaded */
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d0cd      	beq.n	8006bba <jd_prepare+0x242>
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8006c1e:	01f1      	lsls	r1, r6, #7
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8006c20:	4620      	mov	r0, r4
			len = n * 64 * 2 + 64;						/* Allocate buffer for IDCT and RGB output */
 8006c22:	3140      	adds	r1, #64	; 0x40
			jd->workbuf = alloc_pool(jd, len);			/* and it may occupy a part of following MCU working buffer for RGB output */
 8006c24:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006c28:	bf38      	it	cc
 8006c2a:	f44f 7180 	movcc.w	r1, #256	; 0x100
 8006c2e:	f7ff fd97 	bl	8006760 <alloc_pool>
 8006c32:	6660      	str	r0, [r4, #100]	; 0x64
			if (!jd->workbuf) return JDR_MEM1;			/* Err: not enough memory */
 8006c34:	b968      	cbnz	r0, 8006c52 <jd_prepare+0x2da>
	if (!seg) return JDR_MEM1;
 8006c36:	2003      	movs	r0, #3
 8006c38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                                    rc = (JRESULT)create_huffman_tbl(jd, dht_table, sizeof(dht_table));
 8006c3c:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 8006c40:	4649      	mov	r1, r9
 8006c42:	4620      	mov	r0, r4
 8006c44:	f7ff fd9b 	bl	800677e <create_huffman_tbl>
 8006c48:	b2c0      	uxtb	r0, r0
                                    if (rc) 
 8006c4a:	2800      	cmp	r0, #0
 8006c4c:	d0d7      	beq.n	8006bfe <jd_prepare+0x286>
 8006c4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			jd->mcubuf = alloc_pool(jd, (n + 2) * 64);	/* Allocate MCU working buffer */
 8006c52:	1cb1      	adds	r1, r6, #2
 8006c54:	4620      	mov	r0, r4
 8006c56:	0189      	lsls	r1, r1, #6
 8006c58:	f7ff fd82 	bl	8006760 <alloc_pool>
 8006c5c:	66a0      	str	r0, [r4, #104]	; 0x68
			if (!jd->mcubuf) return JDR_MEM1;			/* Err: not enough memory */
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0e9      	beq.n	8006c36 <jd_prepare+0x2be>
			len = jd->infunc(jd, seg, JD_SZBUF - (UINT)ofs % JD_SZBUF);	/* Align read offset to JD_SZBUF */
 8006c62:	f3c7 0208 	ubfx	r2, r7, #0, #9
 8006c66:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8006c70:	4798      	blx	r3
			if (!len) return JDR_INP;								/* Err: wrong stream termination */
 8006c72:	2800      	cmp	r0, #0
 8006c74:	f43f aead 	beq.w	80069d2 <jd_prepare+0x5a>
			jd->dctr = len - 1;	jd->dptr = seg;	jd->dmsk = 0x80;	/* Prepare to read bit stream */
 8006c78:	3801      	subs	r0, #1
 8006c7a:	2380      	movs	r3, #128	; 0x80
 8006c7c:	e884 0021 	stmia.w	r4, {r0, r5}
 8006c80:	7323      	strb	r3, [r4, #12]
			return JDR_OK;		/* Initialization succeeded. Ready to decompress the JPEG image. */
 8006c82:	2000      	movs	r0, #0
 8006c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

		default:	/* Unknown segment (comment, exif or etc..) */
			/* Skip segment data */
			if (jd->infunc(jd, 0, len) != len)	/* Null pointer specifies to skip bytes of stream */
 8006c88:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006c8a:	4632      	mov	r2, r6
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4620      	mov	r0, r4
 8006c90:	4798      	blx	r3
 8006c92:	4286      	cmp	r6, r0
 8006c94:	f43f aeab 	beq.w	80069ee <jd_prepare+0x76>
 8006c98:	e69b      	b.n	80069d2 <jd_prepare+0x5a>
	if (!pool) return JDR_PAR;
 8006c9a:	2005      	movs	r0, #5
 8006c9c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (len > JD_SZBUF) return JDR_MEM2;
 8006ca0:	2004      	movs	r0, #4
 8006ca2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ndata < 65) return JDR_FMT1;	/* Err: table size is unaligned */
 8006ca6:	2006      	movs	r0, #6
			rc = (JRESULT)create_qt_tbl(jd, seg, len);
 8006ca8:	b2c0      	uxtb	r0, r0
				return JDR_INP;
		}
	}
}
 8006caa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!pb) return JDR_MEM1;				/* Err: not enough memory */
 8006cae:	2003      	movs	r0, #3
 8006cb0:	e7fa      	b.n	8006ca8 <jd_prepare+0x330>
 8006cb2:	bf00      	nop
 8006cb4:	08009389 	.word	0x08009389
 8006cb8:	0800930a 	.word	0x0800930a
 8006cbc:	20000054 	.word	0x20000054

08006cc0 <jd_decomp>:
JRESULT jd_decomp (
	JDEC* jd,								/* Initialized decompression object */
	UINT (*outfunc)(JDEC*, void*, JRECT*),	/* RGB output function */
	BYTE scale								/* Output de-scaling factor (0 to 3) */
)
{
 8006cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	b08f      	sub	sp, #60	; 0x3c
	UINT x, y, mx, my;
	WORD rst, rsc;
	JRESULT rc;

	jd->outfunc = outfunc;
 8006cc8:	6781      	str	r1, [r0, #120]	; 0x78
	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 8006cca:	2a00      	cmp	r2, #0
 8006ccc:	f040 82f5 	bne.w	80072ba <jd_decomp+0x5fa>
	jd->scale = scale;

	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8006cd0:	7b83      	ldrb	r3, [r0, #14]
	jd->scale = scale;
 8006cd2:	7342      	strb	r2, [r0, #13]
	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8006cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006cd6:	7bc3      	ldrb	r3, [r0, #15]

	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8006cd8:	8282      	strh	r2, [r0, #20]
	mx = jd->msx * 8; my = jd->msy * 8;			/* Size of the MCU (pixel) */
 8006cda:	930a      	str	r3, [sp, #40]	; 0x28
	rst = rsc = 0;
 8006cdc:	4613      	mov	r3, r2
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;	/* Initialize DC values */
 8006cde:	82c2      	strh	r2, [r0, #22]
 8006ce0:	8302      	strh	r2, [r0, #24]
	rst = rsc = 0;
 8006ce2:	9204      	str	r2, [sp, #16]
 8006ce4:	9206      	str	r2, [sp, #24]

	rc = JDR_OK;
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	9a03      	ldr	r2, [sp, #12]
 8006cea:	6a23      	ldr	r3, [r4, #32]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	f080 82e8 	bcs.w	80072c2 <jd_decomp+0x602>
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	e0d3      	b.n	8006e9e <jd_decomp+0x1de>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8006cf6:	8b62      	ldrh	r2, [r4, #26]
 8006cf8:	2a00      	cmp	r2, #0
 8006cfa:	d038      	beq.n	8006d6e <jd_decomp+0xae>
 8006cfc:	9b06      	ldr	r3, [sp, #24]
 8006cfe:	9906      	ldr	r1, [sp, #24]
 8006d00:	3301      	adds	r3, #1
 8006d02:	4291      	cmp	r1, r2
 8006d04:	b29b      	uxth	r3, r3
 8006d06:	d131      	bne.n	8006d6c <jd_decomp+0xac>
	dp = jd->dptr; dc = jd->dctr;
 8006d08:	2502      	movs	r5, #2
	d = 0;
 8006d0a:	2600      	movs	r6, #0
	dp = jd->dptr; dc = jd->dctr;
 8006d0c:	e894 0081 	ldmia.w	r4, {r0, r7}
		if (!dc) {	/* No input data is available, re-fill input buffer */
 8006d10:	b948      	cbnz	r0, 8006d26 <jd_decomp+0x66>
			dp = jd->inbuf;
 8006d12:	68a7      	ldr	r7, [r4, #8]
			dc = jd->infunc(jd, dp, JD_SZBUF);
 8006d14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006d18:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	4639      	mov	r1, r7
 8006d1e:	4798      	blx	r3
			if (!dc) return JDR_INP;
 8006d20:	b910      	cbnz	r0, 8006d28 <jd_decomp+0x68>
 8006d22:	2002      	movs	r0, #2
 8006d24:	e013      	b.n	8006d4e <jd_decomp+0x8e>
			dp++;
 8006d26:	3701      	adds	r7, #1
		d = (d << 8) | *dp;	/* Get a byte */
 8006d28:	783b      	ldrb	r3, [r7, #0]
	for (i = 0; i < 2; i++) {
 8006d2a:	3d01      	subs	r5, #1
		dc--;
 8006d2c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
		d = (d << 8) | *dp;	/* Get a byte */
 8006d30:	ea43 2606 	orr.w	r6, r3, r6, lsl #8
 8006d34:	b2b6      	uxth	r6, r6
	for (i = 0; i < 2; i++) {
 8006d36:	d1eb      	bne.n	8006d10 <jd_decomp+0x50>
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 8006d38:	f026 0327 	bic.w	r3, r6, #39	; 0x27
 8006d3c:	f64f 72d0 	movw	r2, #65488	; 0xffd0
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8006d40:	7325      	strb	r5, [r4, #12]
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	4293      	cmp	r3, r2
	jd->dptr = dp; jd->dctr = dc; jd->dmsk = 0;
 8006d46:	e884 0081 	stmia.w	r4, {r0, r7}
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 8006d4a:	d003      	beq.n	8006d54 <jd_decomp+0x94>
		return JDR_FMT1;	/* Err: expected RSTn marker is not detected (may be collapted data) */
 8006d4c:	2006      	movs	r0, #6
			if (rc != JDR_OK) return rc;
		}
	}

	return rc;
}
 8006d4e:	b00f      	add	sp, #60	; 0x3c
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((d & 0xFFD8) != 0xFFD0 || (d & 7) != (rstn & 7))
 8006d54:	9b04      	ldr	r3, [sp, #16]
 8006d56:	405e      	eors	r6, r3
 8006d58:	0772      	lsls	r2, r6, #29
 8006d5a:	d1f7      	bne.n	8006d4c <jd_decomp+0x8c>
				rc = restart(jd, rsc++);
 8006d5c:	461a      	mov	r2, r3
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8006d5e:	82a5      	strh	r5, [r4, #20]
 8006d60:	82e5      	strh	r5, [r4, #22]
				rc = restart(jd, rsc++);
 8006d62:	3201      	adds	r2, #1
	jd->dcv[2] = jd->dcv[1] = jd->dcv[0] = 0;
 8006d64:	8325      	strh	r5, [r4, #24]
				rc = restart(jd, rsc++);
 8006d66:	b293      	uxth	r3, r2
 8006d68:	9304      	str	r3, [sp, #16]
				rst = 1;
 8006d6a:	2301      	movs	r3, #1
			if (jd->nrst && rst++ == jd->nrst) {	/* Process restart interval if enabled */
 8006d6c:	9306      	str	r3, [sp, #24]
	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8006d6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8006d70:	7ba2      	ldrb	r2, [r4, #14]
	LONG *tmp = (LONG*)jd->workbuf;	/* Block working buffer for de-quantize and IDCT */
 8006d72:	9301      	str	r3, [sp, #4]
	nby = jd->msx * jd->msy;	/* Number of Y blocks (1, 2 or 4) */
 8006d74:	7be3      	ldrb	r3, [r4, #15]
 8006d76:	fb12 f303 	smulbb	r3, r2, r3
 8006d7a:	9307      	str	r3, [sp, #28]
 8006d7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 8006d7e:	3308      	adds	r3, #8
 8006d80:	9308      	str	r3, [sp, #32]
	for (blk = 0; blk < nby + nbc; blk++) {
 8006d82:	2300      	movs	r3, #0
 8006d84:	9305      	str	r3, [sp, #20]
 8006d86:	9b07      	ldr	r3, [sp, #28]
 8006d88:	9a05      	ldr	r2, [sp, #20]
 8006d8a:	3302      	adds	r3, #2
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d21b      	bcs.n	8006dc8 <jd_decomp+0x108>
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 8006d90:	9b07      	ldr	r3, [sp, #28]
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8006d92:	4620      	mov	r0, r4
		cmp = (blk < nby) ? 0 : blk - nby + 1;	/* Component number 0:Y, 1:Cb, 2:Cr */
 8006d94:	9a05      	ldr	r2, [sp, #20]
 8006d96:	4293      	cmp	r3, r2
 8006d98:	bf9b      	ittet	ls
 8006d9a:	f1c3 0501 	rsbls	r5, r3, #1
 8006d9e:	4613      	movls	r3, r2
 8006da0:	2500      	movhi	r5, #0
 8006da2:	18ed      	addls	r5, r5, r3
		id = cmp ? 1 : 0;						/* Huffman table ID of the component */
 8006da4:	f115 0800 	adds.w	r8, r5, #0
 8006da8:	bf18      	it	ne
 8006daa:	f04f 0801 	movne.w	r8, #1
 8006dae:	eb04 01c8 	add.w	r1, r4, r8, lsl #3
		b = huffext(jd, hb, hc, hd);			/* Extract a huffman coded data (bit length) */
 8006db2:	6c4b      	ldr	r3, [r1, #68]	; 0x44
 8006db4:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8006db6:	6a49      	ldr	r1, [r1, #36]	; 0x24
 8006db8:	f7ff fd8e 	bl	80068d8 <huffext>
		if (b < 0) return 0 - b;				/* Err: invalid code or input */
 8006dbc:	1e07      	subs	r7, r0, #0
 8006dbe:	da7c      	bge.n	8006eba <jd_decomp+0x1fa>
 8006dc0:	4278      	negs	r0, r7
				if (d < 0) return 0 - d;		/* Err: input device */
 8006dc2:	b2c0      	uxtb	r0, r0
			if (rc != JDR_OK) return rc;
 8006dc4:	2800      	cmp	r0, #0
 8006dc6:	d1c2      	bne.n	8006d4e <jd_decomp+0x8e>
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006dc8:	7ba3      	ldrb	r3, [r4, #14]
 8006dca:	f04f 0e08 	mov.w	lr, #8
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8006dce:	9902      	ldr	r1, [sp, #8]
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006dd0:	9301      	str	r3, [sp, #4]
 8006dd2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8006dd6:	f8bd 0004 	ldrh.w	r0, [sp, #4]
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006dda:	fb13 f70e 	smulbb	r7, r3, lr
 8006dde:	7be3      	ldrb	r3, [r4, #15]
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8006de0:	fb1e 1100 	smlabb	r1, lr, r0, r1
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006de4:	fb13 f20e 	smulbb	r2, r3, lr
 8006de8:	9205      	str	r2, [sp, #20]
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8006dea:	69e2      	ldr	r2, [r4, #28]
 8006dec:	4291      	cmp	r1, r2
 8006dee:	f200 81c2 	bhi.w	8007176 <jd_decomp+0x4b6>
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006df2:	46b9      	mov	r9, r7
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8006df4:	9903      	ldr	r1, [sp, #12]
		for (iy = 0; iy < my; iy++) {
 8006df6:	2000      	movs	r0, #0
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8006df8:	6a22      	ldr	r2, [r4, #32]
 8006dfa:	fb1e 1303 	smlabb	r3, lr, r3, r1
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	bf8a      	itet	hi
 8006e02:	460b      	movhi	r3, r1
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 8006e04:	f8dd a014 	ldrls.w	sl, [sp, #20]
	ry = (y + my <= jd->height) ? my : jd->height - y;
 8006e08:	eba2 0a03 	subhi.w	sl, r2, r3
	rect.left = x; rect.right = x + rx - 1;				/* Rectangular area in the frame buffer */
 8006e0c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006e10:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8006e14:	3b01      	subs	r3, #1
 8006e16:	444b      	add	r3, r9
 8006e18:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
	rect.top = y; rect.bottom = y + ry - 1;
 8006e1c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8006e20:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8006e24:	3b01      	subs	r3, #1
 8006e26:	4453      	add	r3, sl
 8006e28:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8006e2c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
 8006e30:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e34:	3303      	adds	r3, #3
 8006e36:	9307      	str	r3, [sp, #28]
		for (iy = 0; iy < my; iy++) {
 8006e38:	9b05      	ldr	r3, [sp, #20]
 8006e3a:	4283      	cmp	r3, r0
 8006e3c:	f040 81a6 	bne.w	800718c <jd_decomp+0x4cc>
	mx >>= jd->scale;
 8006e40:	7b63      	ldrb	r3, [r4, #13]
 8006e42:	40df      	lsrs	r7, r3
	if (rx < mx) {
 8006e44:	45b9      	cmp	r9, r7
 8006e46:	f0c0 820e 	bcc.w	8007266 <jd_decomp+0x5a6>
		BYTE *s = (BYTE*)jd->workbuf;
 8006e4a:	6e61      	ldr	r1, [r4, #100]	; 0x64
		UINT n = rx * ry;
 8006e4c:	fb0a f009 	mul.w	r0, sl, r9
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
 8006e50:	4ecb      	ldr	r6, [pc, #812]	; (8007180 <jd_decomp+0x4c0>)
 8006e52:	1cca      	adds	r2, r1, #3
		WORD w, *d = (WORD*)s;
 8006e54:	460d      	mov	r5, r1
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
 8006e56:	f812 3c02 	ldrb.w	r3, [r2, #-2]
		} while (--n);
 8006e5a:	3801      	subs	r0, #1
			w |= *s++ >> 3;				/* -----------BBBBB */
 8006e5c:	f812 7c01 	ldrb.w	r7, [r2, #-1]
 8006e60:	f102 0203 	add.w	r2, r2, #3
			w |= (*s++ & 0xFC) << 3;	/* -----GGGGGG----- */
 8006e64:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8006e68:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
			w |= *s++ >> 3;				/* -----------BBBBB */
 8006e6c:	ea43 03d7 	orr.w	r3, r3, r7, lsr #3
			w = (*s++ & 0xF8) << 8;		/* RRRRR----------- */
 8006e70:	f812 7c06 	ldrb.w	r7, [r2, #-6]
 8006e74:	ea06 2707 	and.w	r7, r6, r7, lsl #8
			w |= *s++ >> 3;				/* -----------BBBBB */
 8006e78:	ea43 0307 	orr.w	r3, r3, r7
			*d++ = w;
 8006e7c:	f825 3b02 	strh.w	r3, [r5], #2
		} while (--n);
 8006e80:	d1e9      	bne.n	8006e56 <jd_decomp+0x196>
	return jd->outfunc(jd, jd->workbuf, &rect) ? JDR_OK : JDR_INTR; 
 8006e82:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8006e84:	aa0c      	add	r2, sp, #48	; 0x30
 8006e86:	4620      	mov	r0, r4
 8006e88:	4798      	blx	r3
			if (rc != JDR_OK) return rc;
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	f000 8217 	beq.w	80072be <jd_decomp+0x5fe>
		for (x = 0; x < jd->width; x += mx) {	/* Horizontal loop of MCUs */
 8006e90:	2308      	movs	r3, #8
 8006e92:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 8006e96:	461a      	mov	r2, r3
 8006e98:	9b02      	ldr	r3, [sp, #8]
 8006e9a:	fb12 3301 	smlabb	r3, r2, r1, r3
 8006e9e:	9302      	str	r3, [sp, #8]
 8006ea0:	9a02      	ldr	r2, [sp, #8]
 8006ea2:	69e3      	ldr	r3, [r4, #28]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	f4ff af26 	bcc.w	8006cf6 <jd_decomp+0x36>
	for (y = 0; y < jd->height; y += my) {		/* Vertical loop of MCUs */
 8006eaa:	2308      	movs	r3, #8
 8006eac:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	9b03      	ldr	r3, [sp, #12]
 8006eb4:	fb12 3301 	smlabb	r3, r2, r1, r3
 8006eb8:	e715      	b.n	8006ce6 <jd_decomp+0x26>
 8006eba:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		d = jd->dcv[cmp];						/* DC value of previous block */
 8006ebe:	f9ba 9014 	ldrsh.w	r9, [sl, #20]
		if (b) {								/* If there is any difference from previous block */
 8006ec2:	d014      	beq.n	8006eee <jd_decomp+0x22e>
			e = bitext(jd, b);					/* Extract data bits */
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f7ff fcc5 	bl	8006856 <bitext>
			if (e < 0) return 0 - e;			/* Err: input */
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	da01      	bge.n	8006ed4 <jd_decomp+0x214>
				if (d < 0) return 0 - d;		/* Err: input device */
 8006ed0:	4240      	negs	r0, r0
 8006ed2:	e776      	b.n	8006dc2 <jd_decomp+0x102>
			b = 1 << (b - 1);					/* MSB position */
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	3f01      	subs	r7, #1
 8006ed8:	fa03 f707 	lsl.w	r7, r3, r7
			if (!(e & b)) e -= (b << 1) - 1;	/* Restore sign if needed */
 8006edc:	4238      	tst	r0, r7
 8006ede:	bf02      	ittt	eq
 8006ee0:	409f      	lsleq	r7, r3
 8006ee2:	f107 37ff 	addeq.w	r7, r7, #4294967295	; 0xffffffff
 8006ee6:	1bc0      	subeq	r0, r0, r7
			d += e;								/* Get current value */
 8006ee8:	4481      	add	r9, r0
			jd->dcv[cmp] = (SHORT)d;			/* Save current DC value for next block */
 8006eea:	f8aa 9014 	strh.w	r9, [sl, #20]
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 8006eee:	4425      	add	r5, r4
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize and apply scale factor of Arai algorithm */
 8006ef0:	9a01      	ldr	r2, [sp, #4]
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
 8006ef2:	2100      	movs	r1, #0
		dqf = jd->qttbl[jd->qtid[cmp]];			/* De-quantizer table ID for this component */
 8006ef4:	7c2b      	ldrb	r3, [r5, #16]
 8006ef6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006efa:	6d5f      	ldr	r7, [r3, #84]	; 0x54
		tmp[0] = d * dqf[0] >> 8;				/* De-quantize and apply scale factor of Arai algorithm */
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	fb03 f309 	mul.w	r3, r3, r9
 8006f02:	121b      	asrs	r3, r3, #8
 8006f04:	6013      	str	r3, [r2, #0]
 8006f06:	4613      	mov	r3, r2
 8006f08:	32fc      	adds	r2, #252	; 0xfc
		for (i = 1; i < 64; i++) tmp[i] = 0;	/* Clear rest of elements */
 8006f0a:	f843 1f04 	str.w	r1, [r3, #4]!
 8006f0e:	429a      	cmp	r2, r3
 8006f10:	d1fb      	bne.n	8006f0a <jd_decomp+0x24a>
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8006f12:	eb04 03c8 	add.w	r3, r4, r8, lsl #3
		i = 1;					/* Top of the AC elements */
 8006f16:	2501      	movs	r5, #1
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8006f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
				b = 1 << (b - 1);				/* MSB position */
 8006f1a:	46ab      	mov	fp, r5
		hc = jd->huffcode[id][1];
 8006f1c:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
		hb = jd->huffbits[id][1];				/* Huffman table for the AC elements */
 8006f20:	4616      	mov	r6, r2
		hd = jd->huffdata[id][1];
 8006f22:	f8d3 a048 	ldr.w	sl, [r3, #72]	; 0x48
			b = huffext(jd, hb, hc, hd);		/* Extract a huffman coded value (zero runs and bit length) */
 8006f26:	4653      	mov	r3, sl
 8006f28:	464a      	mov	r2, r9
 8006f2a:	4631      	mov	r1, r6
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f7ff fcd3 	bl	80068d8 <huffext>
			if (b == 0) break;					/* EOB? */
 8006f32:	2800      	cmp	r0, #0
 8006f34:	f040 80f5 	bne.w	8007122 <jd_decomp+0x462>
 8006f38:	9b01      	ldr	r3, [sp, #4]
		t11 = (v1 - v3) * M13 >> 12;
 8006f3a:	f44f 59b5 	mov.w	r9, #5792	; 0x16a0
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8006f3e:	f642 1acf 	movw	sl, #10703	; 0x29cf
 8006f42:	3320      	adds	r3, #32
 8006f44:	930b      	str	r3, [sp, #44]	; 0x2c
		i = 1;					/* Top of the AC elements */
 8006f46:	9b01      	ldr	r3, [sp, #4]
		v1 = src[8 * 2];
 8006f48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
		t13 = (t10 + t12) * M5 >> 12;
 8006f4a:	f641 5690 	movw	r6, #7568	; 0x1d90
		v2 = src[8 * 4];
 8006f4e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
		src++;	/* Next column */
 8006f52:	3304      	adds	r3, #4
		v0 = src[8 * 0];	/* Get even elements */
 8006f54:	f853 5c04 	ldr.w	r5, [r3, #-4]
		v3 = src[8 * 6];
 8006f58:	f8d3 10bc 	ldr.w	r1, [r3, #188]	; 0xbc
		t10 = v0 + v2;		/* Process the even elements */
 8006f5c:	182f      	adds	r7, r5, r0
		t12 = v0 - v2;
 8006f5e:	1a2d      	subs	r5, r5, r0
		t11 = (v1 - v3) * M13 >> 12;
 8006f60:	1a50      	subs	r0, r2, r1
		v3 += v1;
 8006f62:	4411      	add	r1, r2
		v6 = src[8 * 5];
 8006f64:	f8d3 b09c 	ldr.w	fp, [r3, #156]	; 0x9c
		t11 = (v1 - v3) * M13 >> 12;
 8006f68:	fb09 f000 	mul.w	r0, r9, r0
		v0 = t10 + v3;
 8006f6c:	eb07 0801 	add.w	r8, r7, r1
		v3 = t10 - v3;
 8006f70:	eba7 0e01 	sub.w	lr, r7, r1
		v4 = src[8 * 7];	/* Get odd elements */
 8006f74:	f8d3 70dc 	ldr.w	r7, [r3, #220]	; 0xdc
		t11 -= v3;
 8006f78:	ebc1 3220 	rsb	r2, r1, r0, asr #12
		v7 = src[8 * 3];
 8006f7c:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
		v1 = t11 + t12;
 8006f7e:	eb05 0c02 	add.w	ip, r5, r2
		v2 = t12 - t11;
 8006f82:	1aa8      	subs	r0, r5, r2
		v5 = src[8 * 1];
 8006f84:	69da      	ldr	r2, [r3, #28]
		t10 = v5 - v4;		/* Process the odd elements */
 8006f86:	1bd5      	subs	r5, r2, r7
		t11 = v5 + v4;
 8006f88:	4417      	add	r7, r2
		t12 = v6 - v7;
 8006f8a:	ebab 0201 	sub.w	r2, fp, r1
		v7 += v6;
 8006f8e:	4459      	add	r1, fp
		v5 = (t11 - v7) * M13 >> 12;
 8006f90:	eba7 0b01 	sub.w	fp, r7, r1
		v7 += t11;
 8006f94:	440f      	add	r7, r1
		t13 = (t10 + t12) * M5 >> 12;
 8006f96:	18a9      	adds	r1, r5, r2
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8006f98:	fb0a f202 	mul.w	r2, sl, r2
		v5 = (t11 - v7) * M13 >> 12;
 8006f9c:	fb09 fb0b 	mul.w	fp, r9, fp
		t13 = (t10 + t12) * M5 >> 12;
 8006fa0:	4371      	muls	r1, r6
		v4 = t13 - (t10 * M2 >> 12);
 8006fa2:	f241 1651 	movw	r6, #4433	; 0x1151
		t13 = (t10 + t12) * M5 >> 12;
 8006fa6:	1309      	asrs	r1, r1, #12
		v4 = t13 - (t10 * M2 >> 12);
 8006fa8:	4375      	muls	r5, r6
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8006faa:	eba1 3222 	sub.w	r2, r1, r2, asr #12
		v4 = t13 - (t10 * M2 >> 12);
 8006fae:	eba1 3525 	sub.w	r5, r1, r5, asr #12
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8006fb2:	1bd2      	subs	r2, r2, r7
		v5 -= v6;
 8006fb4:	ebc2 3b2b 	rsb	fp, r2, fp, asr #12
		v4 -= v5;
 8006fb8:	eba5 010b 	sub.w	r1, r5, fp
		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8006fbc:	eb08 0507 	add.w	r5, r8, r7
		src[8 * 7] = v0 - v7;
 8006fc0:	eba8 0707 	sub.w	r7, r8, r7
		src[8 * 0] = v0 + v7;	/* Write-back transformed values */
 8006fc4:	f843 5c04 	str.w	r5, [r3, #-4]
		src[8 * 1] = v1 + v6;
 8006fc8:	eb0c 0502 	add.w	r5, ip, r2
		src[8 * 6] = v1 - v6;
 8006fcc:	ebac 0202 	sub.w	r2, ip, r2
		src[8 * 7] = v0 - v7;
 8006fd0:	f8c3 70dc 	str.w	r7, [r3, #220]	; 0xdc
		src[8 * 1] = v1 + v6;
 8006fd4:	61dd      	str	r5, [r3, #28]
		src[8 * 6] = v1 - v6;
 8006fd6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
		src[8 * 2] = v2 + v5;
 8006fda:	eb00 020b 	add.w	r2, r0, fp
		src[8 * 5] = v2 - v5;
 8006fde:	eba0 000b 	sub.w	r0, r0, fp
		src[8 * 2] = v2 + v5;
 8006fe2:	63da      	str	r2, [r3, #60]	; 0x3c
		src[8 * 3] = v3 + v4;
 8006fe4:	eb0e 0201 	add.w	r2, lr, r1
		src[8 * 4] = v3 - v4;
 8006fe8:	ebae 0101 	sub.w	r1, lr, r1
		src[8 * 5] = v2 - v5;
 8006fec:	f8c3 009c 	str.w	r0, [r3, #156]	; 0x9c
		src[8 * 3] = v3 + v4;
 8006ff0:	65da      	str	r2, [r3, #92]	; 0x5c
		src[8 * 4] = v3 - v4;
 8006ff2:	67d9      	str	r1, [r3, #124]	; 0x7c
	for (i = 0; i < 8; i++) {
 8006ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d1a6      	bne.n	8006f48 <jd_decomp+0x288>
 8006ffa:	9a01      	ldr	r2, [sp, #4]
		t11 = (v1 - v3) * M13 >> 12;
 8006ffc:	f44f 5bb5 	mov.w	fp, #5792	; 0x16a0
	for (i = 0; i < 8; i++) {
 8007000:	9d08      	ldr	r5, [sp, #32]
 8007002:	f502 7290 	add.w	r2, r2, #288	; 0x120
 8007006:	920b      	str	r2, [sp, #44]	; 0x2c
		v0 = src[0] + ((LONG)128 << 8);	/* Get even elements (remove DC offset (-128) here) */
 8007008:	f853 2c20 	ldr.w	r2, [r3, #-32]
		t13 = (t10 + t12) * M5 >> 12;
 800700c:	f641 5690 	movw	r6, #7568	; 0x1d90
		v1 = src[2];
 8007010:	f853 7c18 	ldr.w	r7, [r3, #-24]
 8007014:	3320      	adds	r3, #32
		v2 = src[4];
 8007016:	f853 1c30 	ldr.w	r1, [r3, #-48]
		v0 = src[0] + ((LONG)128 << 8);	/* Get even elements (remove DC offset (-128) here) */
 800701a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
		v3 = src[6];
 800701e:	f853 0c28 	ldr.w	r0, [r3, #-40]
 8007022:	3508      	adds	r5, #8
		t10 = v0 + v2;				/* Process the even elements */
 8007024:	eb02 0e01 	add.w	lr, r2, r1
		t12 = v0 - v2;
 8007028:	1a52      	subs	r2, r2, r1
		t11 = (v1 - v3) * M13 >> 12;
 800702a:	1a39      	subs	r1, r7, r0
		v3 += v1;
 800702c:	4438      	add	r0, r7
		v6 = src[5];
 800702e:	f853 8c2c 	ldr.w	r8, [r3, #-44]
		t11 = (v1 - v3) * M13 >> 12;
 8007032:	fb0b f101 	mul.w	r1, fp, r1
		v4 = src[7];				/* Get odd elements */
 8007036:	f853 cc24 	ldr.w	ip, [r3, #-36]
		v0 = t10 + v3;
 800703a:	eb0e 0a00 	add.w	sl, lr, r0
		v3 = t10 - v3;
 800703e:	ebae 0700 	sub.w	r7, lr, r0
		t11 -= v3;
 8007042:	ebc0 3121 	rsb	r1, r0, r1, asr #12
		v7 = src[3];
 8007046:	f853 0c34 	ldr.w	r0, [r3, #-52]
		v1 = t11 + t12;
 800704a:	eb02 0901 	add.w	r9, r2, r1
		v2 = t12 - t11;
 800704e:	1a52      	subs	r2, r2, r1
		v5 = src[1];
 8007050:	f853 1c3c 	ldr.w	r1, [r3, #-60]
		t10 = v5 - v4;				/* Process the odd elements */
 8007054:	eba1 0e0c 	sub.w	lr, r1, ip
		t11 = v5 + v4;
 8007058:	448c      	add	ip, r1
		t12 = v6 - v7;
 800705a:	eba8 0100 	sub.w	r1, r8, r0
		v7 += v6;
 800705e:	4440      	add	r0, r8
		v5 = (t11 - v7) * M13 >> 12;
 8007060:	ebac 0800 	sub.w	r8, ip, r0
		v7 += t11;
 8007064:	4484      	add	ip, r0
		t13 = (t10 + t12) * M5 >> 12;
 8007066:	eb0e 0001 	add.w	r0, lr, r1
		v5 = (t11 - v7) * M13 >> 12;
 800706a:	fb0b f808 	mul.w	r8, fp, r8
		t13 = (t10 + t12) * M5 >> 12;
 800706e:	4370      	muls	r0, r6
		v4 = t13 - (t10 * M2 >> 12);
 8007070:	f241 1651 	movw	r6, #4433	; 0x1151
 8007074:	fb06 fe0e 	mul.w	lr, r6, lr
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8007078:	f642 16cf 	movw	r6, #10703	; 0x29cf
		t13 = (t10 + t12) * M5 >> 12;
 800707c:	1300      	asrs	r0, r0, #12
		v6 = t13 - (t12 * M4 >> 12) - v7;
 800707e:	4371      	muls	r1, r6
		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Output transformed values */
 8007080:	4e40      	ldr	r6, [pc, #256]	; (8007184 <jd_decomp+0x4c4>)
		v4 = t13 - (t10 * M2 >> 12);
 8007082:	eba0 3e2e 	sub.w	lr, r0, lr, asr #12
		v6 = t13 - (t12 * M4 >> 12) - v7;
 8007086:	eba0 3121 	sub.w	r1, r0, r1, asr #12
		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Output transformed values */
 800708a:	eb0a 000c 	add.w	r0, sl, ip
		v6 = t13 - (t12 * M4 >> 12) - v7;
 800708e:	eba1 010c 	sub.w	r1, r1, ip
		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Output transformed values */
 8007092:	f3c0 2009 	ubfx	r0, r0, #8, #10
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 8007096:	ebaa 0c0c 	sub.w	ip, sl, ip
		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Output transformed values */
 800709a:	5c30      	ldrb	r0, [r6, r0]
		v5 -= v6;
 800709c:	ebc1 3828 	rsb	r8, r1, r8, asr #12
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 80070a0:	f3cc 2c09 	ubfx	ip, ip, #8, #10
		dst[0] = BYTECLIP((v0 + v7) >> 8);	/* Output transformed values */
 80070a4:	f805 0c10 	strb.w	r0, [r5, #-16]
		v4 -= v5;
 80070a8:	ebae 0e08 	sub.w	lr, lr, r8
		dst[7] = BYTECLIP((v0 - v7) >> 8);
 80070ac:	f816 000c 	ldrb.w	r0, [r6, ip]
 80070b0:	f805 0c09 	strb.w	r0, [r5, #-9]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 80070b4:	eb09 0001 	add.w	r0, r9, r1
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80070b8:	eba9 0101 	sub.w	r1, r9, r1
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 80070bc:	f3c0 2009 	ubfx	r0, r0, #8, #10
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80070c0:	f3c1 2109 	ubfx	r1, r1, #8, #10
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 80070c4:	5c30      	ldrb	r0, [r6, r0]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80070c6:	5c71      	ldrb	r1, [r6, r1]
		dst[1] = BYTECLIP((v1 + v6) >> 8);
 80070c8:	f805 0c0f 	strb.w	r0, [r5, #-15]
		dst[6] = BYTECLIP((v1 - v6) >> 8);
 80070cc:	f805 1c0a 	strb.w	r1, [r5, #-10]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80070d0:	eb02 0108 	add.w	r1, r2, r8
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80070d4:	eba2 0808 	sub.w	r8, r2, r8
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80070d8:	f3c1 2109 	ubfx	r1, r1, #8, #10
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80070dc:	f3c8 2809 	ubfx	r8, r8, #8, #10
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80070e0:	5c71      	ldrb	r1, [r6, r1]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80070e2:	f816 2008 	ldrb.w	r2, [r6, r8]
		dst[2] = BYTECLIP((v2 + v5) >> 8);
 80070e6:	f805 1c0e 	strb.w	r1, [r5, #-14]
		dst[5] = BYTECLIP((v2 - v5) >> 8);
 80070ea:	f805 2c0b 	strb.w	r2, [r5, #-11]
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80070ee:	eb07 020e 	add.w	r2, r7, lr
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 80070f2:	eba7 0e0e 	sub.w	lr, r7, lr
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80070f6:	f3c2 2209 	ubfx	r2, r2, #8, #10
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 80070fa:	f3ce 2e09 	ubfx	lr, lr, #8, #10
		dst[3] = BYTECLIP((v3 + v4) >> 8);
 80070fe:	5cb2      	ldrb	r2, [r6, r2]
 8007100:	f805 2c0d 	strb.w	r2, [r5, #-13]
		dst[4] = BYTECLIP((v3 - v4) >> 8);
 8007104:	f816 200e 	ldrb.w	r2, [r6, lr]
 8007108:	f805 2c0c 	strb.w	r2, [r5, #-12]
	for (i = 0; i < 8; i++) {
 800710c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800710e:	429a      	cmp	r2, r3
 8007110:	f47f af7a 	bne.w	8007008 <jd_decomp+0x348>
	for (blk = 0; blk < nby + nbc; blk++) {
 8007114:	9b05      	ldr	r3, [sp, #20]
 8007116:	3301      	adds	r3, #1
 8007118:	9305      	str	r3, [sp, #20]
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	3340      	adds	r3, #64	; 0x40
 800711e:	9308      	str	r3, [sp, #32]
 8007120:	e631      	b.n	8006d86 <jd_decomp+0xc6>
			if (b < 0) return 0 - b;			/* Err: invalid code or input error */
 8007122:	f6ff aed5 	blt.w	8006ed0 <jd_decomp+0x210>
			if (z) {
 8007126:	0903      	lsrs	r3, r0, #4
 8007128:	d003      	beq.n	8007132 <jd_decomp+0x472>
				i += z;							/* Skip zero elements */
 800712a:	441d      	add	r5, r3
				if (i >= 64) return JDR_FMT1;	/* Too long zero run */
 800712c:	2d3f      	cmp	r5, #63	; 0x3f
 800712e:	f63f ae0d 	bhi.w	8006d4c <jd_decomp+0x8c>
			if (b &= 0x0F) {					/* Bit length */
 8007132:	f010 080f 	ands.w	r8, r0, #15
 8007136:	d019      	beq.n	800716c <jd_decomp+0x4ac>
				d = bitext(jd, b);				/* Extract data bits */
 8007138:	4641      	mov	r1, r8
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff fb8b 	bl	8006856 <bitext>
				if (d < 0) return 0 - d;		/* Err: input device */
 8007140:	2800      	cmp	r0, #0
 8007142:	f6ff aec5 	blt.w	8006ed0 <jd_decomp+0x210>
				b = 1 << (b - 1);				/* MSB position */
 8007146:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 800714a:	fa0b f303 	lsl.w	r3, fp, r3
				if (!(d & b)) d -= (b << 1) - 1;/* Restore negative value if needed */
 800714e:	4218      	tst	r0, r3
 8007150:	bf02      	ittt	eq
 8007152:	005b      	lsleq	r3, r3, #1
 8007154:	f103 33ff 	addeq.w	r3, r3, #4294967295	; 0xffffffff
 8007158:	1ac0      	subeq	r0, r0, r3
				tmp[z] = d * dqf[z] >> 8;		/* De-quantize and apply scale factor of Arai algorithm */
 800715a:	4b0b      	ldr	r3, [pc, #44]	; (8007188 <jd_decomp+0x4c8>)
 800715c:	5d5a      	ldrb	r2, [r3, r5]
 800715e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
 8007162:	4358      	muls	r0, r3
 8007164:	9b01      	ldr	r3, [sp, #4]
 8007166:	1200      	asrs	r0, r0, #8
 8007168:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
		} while (++i < 64);		/* Next AC element */
 800716c:	3501      	adds	r5, #1
 800716e:	2d40      	cmp	r5, #64	; 0x40
 8007170:	f47f aed9 	bne.w	8006f26 <jd_decomp+0x266>
 8007174:	e6e0      	b.n	8006f38 <jd_decomp+0x278>
	rx = (x + mx <= jd->width) ? mx : jd->width - x;	/* Output rectangular size (it may be clipped at right/bottom end) */
 8007176:	9902      	ldr	r1, [sp, #8]
 8007178:	eba2 0901 	sub.w	r9, r2, r1
 800717c:	e63a      	b.n	8006df4 <jd_decomp+0x134>
 800717e:	bf00      	nop
 8007180:	fffff800 	.word	0xfffff800
 8007184:	08008f0a 	.word	0x08008f0a
 8007188:	0800938a 	.word	0x0800938a
			if (my == 16) {		/* Double block height? */
 800718c:	9b05      	ldr	r3, [sp, #20]
			pc = jd->mcubuf;
 800718e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
			if (my == 16) {		/* Double block height? */
 8007190:	2b10      	cmp	r3, #16
			py = pc + iy * 8;
 8007192:	eb01 05c0 	add.w	r5, r1, r0, lsl #3
			if (my == 16) {		/* Double block height? */
 8007196:	d113      	bne.n	80071c0 <jd_decomp+0x500>
				pc += 64 * 4 + (iy >> 1) * 8;
 8007198:	0843      	lsrs	r3, r0, #1
				if (iy >= 8) py += 64;
 800719a:	2807      	cmp	r0, #7
				pc += 64 * 4 + (iy >> 1) * 8;
 800719c:	f103 0320 	add.w	r3, r3, #32
				if (iy >= 8) py += 64;
 80071a0:	bf88      	it	hi
 80071a2:	3540      	addhi	r5, #64	; 0x40
				pc += 64 * 4 + (iy >> 1) * 8;
 80071a4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	mx = jd->msx * 8; my = jd->msy * 8;					/* MCU size (pixel) */
 80071a8:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80071ac:	f04f 0c00 	mov.w	ip, #0
			for (ix = 0; ix < mx; ix++) {
 80071b0:	4567      	cmp	r7, ip
 80071b2:	d10c      	bne.n	80071ce <jd_decomp+0x50e>
 80071b4:	9b07      	ldr	r3, [sp, #28]
		for (iy = 0; iy < my; iy++) {
 80071b6:	3001      	adds	r0, #1
 80071b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80071ba:	4413      	add	r3, r2
 80071bc:	9307      	str	r3, [sp, #28]
 80071be:	e63b      	b.n	8006e38 <jd_decomp+0x178>
				pc += mx * 8 + iy * 8;
 80071c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80071c4:	fb1e 0303 	smlabb	r3, lr, r3, r0
 80071c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80071cc:	e7ec      	b.n	80071a8 <jd_decomp+0x4e8>
				cr = pc[64] - 128;
 80071ce:	f891 3040 	ldrb.w	r3, [r1, #64]	; 0x40
				if (mx == 16) {					/* Double block width? */
 80071d2:	2f10      	cmp	r7, #16
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 80071d4:	780a      	ldrb	r2, [r1, #0]
				cr = pc[64] - 128;
 80071d6:	f1a3 0380 	sub.w	r3, r3, #128	; 0x80
				cb = pc[0] - 128; 	/* Get Cb/Cr component and restore right level */
 80071da:	f1a2 0280 	sub.w	r2, r2, #128	; 0x80
				cr = pc[64] - 128;
 80071de:	9308      	str	r3, [sp, #32]
				if (mx == 16) {					/* Double block width? */
 80071e0:	d13f      	bne.n	8007262 <jd_decomp+0x5a2>
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80071e2:	f1bc 0f08 	cmp.w	ip, #8
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80071e6:	f00c 0601 	and.w	r6, ip, #1
					if (ix == 8) py += 64 - 8;	/* Jump to next block if double block heigt */
 80071ea:	bf08      	it	eq
 80071ec:	3538      	addeq	r5, #56	; 0x38
					pc += ix & 1;				/* Increase chroma pointer every two pixels */
 80071ee:	4431      	add	r1, r6
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 80071f0:	f240 539b 	movw	r3, #1435	; 0x59b
 80071f4:	9e08      	ldr	r6, [sp, #32]
				yy = *py++;			/* Get Y component */
 80071f6:	f895 b000 	ldrb.w	fp, [r5]
			for (ix = 0; ix < mx; ix++) {
 80071fa:	f10c 0c01 	add.w	ip, ip, #1
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 80071fe:	435e      	muls	r6, r3
 8007200:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007204:	f108 0803 	add.w	r8, r8, #3
				yy = *py++;			/* Get Y component */
 8007208:	3501      	adds	r5, #1
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 800720a:	fb96 f6f3 	sdiv	r6, r6, r3
 800720e:	445e      	add	r6, fp
 8007210:	4b2d      	ldr	r3, [pc, #180]	; (80072c8 <jd_decomp+0x608>)
 8007212:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007216:	5d9e      	ldrb	r6, [r3, r6]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 8007218:	f240 23db 	movw	r3, #731	; 0x2db
				*rgb24++ = /* R */ BYTECLIP(yy + ((INT)(1.402 * CVACC) * cr) / CVACC);
 800721c:	f808 6c06 	strb.w	r6, [r8, #-6]
				*rgb24++ = /* G */ BYTECLIP(yy - ((INT)(0.344 * CVACC) * cb + (INT)(0.714 * CVACC) * cr) / CVACC);
 8007220:	9e08      	ldr	r6, [sp, #32]
 8007222:	4373      	muls	r3, r6
 8007224:	f44f 76b0 	mov.w	r6, #352	; 0x160
 8007228:	fb06 3302 	mla	r3, r6, r2, r3
 800722c:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8007230:	fb93 f3f6 	sdiv	r3, r3, r6
 8007234:	ebab 0303 	sub.w	r3, fp, r3
 8007238:	4e23      	ldr	r6, [pc, #140]	; (80072c8 <jd_decomp+0x608>)
 800723a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800723e:	5cf3      	ldrb	r3, [r6, r3]
 8007240:	f808 3c05 	strb.w	r3, [r8, #-5]
				*rgb24++ = /* B */ BYTECLIP(yy + ((INT)(1.772 * CVACC) * cb) / CVACC);
 8007244:	f240 7316 	movw	r3, #1814	; 0x716
 8007248:	435a      	muls	r2, r3
 800724a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800724e:	fb92 f2f3 	sdiv	r2, r2, r3
 8007252:	4493      	add	fp, r2
 8007254:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8007258:	f816 300b 	ldrb.w	r3, [r6, fp]
 800725c:	f808 3c04 	strb.w	r3, [r8, #-4]
 8007260:	e7a6      	b.n	80071b0 <jd_decomp+0x4f0>
					pc++;						/* Increase chroma pointer every pixel */
 8007262:	3101      	adds	r1, #1
 8007264:	e7c4      	b.n	80071f0 <jd_decomp+0x530>
 8007266:	f109 0201 	add.w	r2, r9, #1
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 800726a:	eba7 0709 	sub.w	r7, r7, r9
		s = d = (BYTE*)jd->workbuf;
 800726e:	6e61      	ldr	r1, [r4, #100]	; 0x64
		for (y = 0; y < ry; y++) {
 8007270:	2600      	movs	r6, #0
 8007272:	eb02 0242 	add.w	r2, r2, r2, lsl #1
			s += (mx - rx) * 3;	/* Skip truncated pixels */
 8007276:	eb07 0747 	add.w	r7, r7, r7, lsl #1
		s = d = (BYTE*)jd->workbuf;
 800727a:	460d      	mov	r5, r1
 800727c:	f1a2 0e03 	sub.w	lr, r2, #3
 8007280:	4477      	add	r7, lr
		for (y = 0; y < ry; y++) {
 8007282:	45b2      	cmp	sl, r6
 8007284:	f43f ade1 	beq.w	8006e4a <jd_decomp+0x18a>
 8007288:	4628      	mov	r0, r5
 800728a:	460b      	mov	r3, r1
 800728c:	eb01 0c02 	add.w	ip, r1, r2
 8007290:	e00b      	b.n	80072aa <jd_decomp+0x5ea>
				*d++ = *s++;
 8007292:	f810 8c03 	ldrb.w	r8, [r0, #-3]
 8007296:	f803 8c03 	strb.w	r8, [r3, #-3]
				*d++ = *s++;
 800729a:	f810 8c02 	ldrb.w	r8, [r0, #-2]
 800729e:	f803 8c02 	strb.w	r8, [r3, #-2]
				*d++ = *s++;
 80072a2:	f810 8c01 	ldrb.w	r8, [r0, #-1]
 80072a6:	f803 8c01 	strb.w	r8, [r3, #-1]
 80072aa:	3303      	adds	r3, #3
 80072ac:	3003      	adds	r0, #3
			for (x = 0; x < rx; x++) {	/* Copy effective pixels */
 80072ae:	459c      	cmp	ip, r3
 80072b0:	d1ef      	bne.n	8007292 <jd_decomp+0x5d2>
 80072b2:	4471      	add	r1, lr
 80072b4:	443d      	add	r5, r7
		for (y = 0; y < ry; y++) {
 80072b6:	3601      	adds	r6, #1
 80072b8:	e7e3      	b.n	8007282 <jd_decomp+0x5c2>
	if (scale > (JD_USE_SCALE ? 3 : 0)) return JDR_PAR;
 80072ba:	2005      	movs	r0, #5
 80072bc:	e547      	b.n	8006d4e <jd_decomp+0x8e>
			if (rc != JDR_OK) return rc;
 80072be:	2001      	movs	r0, #1
 80072c0:	e545      	b.n	8006d4e <jd_decomp+0x8e>
	return rc;
 80072c2:	2000      	movs	r0, #0
 80072c4:	e543      	b.n	8006d4e <jd_decomp+0x8e>
 80072c6:	bf00      	nop
 80072c8:	08008f0a 	.word	0x08008f0a

080072cc <USBH_UserProcess>:
*/
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{

  /* USER CODE BEGIN 2 */
  switch(id)
 80072cc:	3902      	subs	r1, #2
{
 80072ce:	b510      	push	{r4, lr}
 80072d0:	4604      	mov	r4, r0
  switch(id)
 80072d2:	2903      	cmp	r1, #3
 80072d4:	d817      	bhi.n	8007306 <USBH_UserProcess+0x3a>
 80072d6:	e8df f001 	tbb	[pc, r1]
 80072da:	0217      	.short	0x0217
 80072dc:	1319      	.short	0x1319
  {

  case HOST_USER_CLASS_SELECTED:
    {
      USBH_StatusTypeDef status;
      status = USBH_VS_SetCur(phost, VS_PROBE_CONTROL << 8);
 80072de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072e2:	f7fb fea5 	bl	8003030 <USBH_VS_SetCur>
      status = USBH_VS_GetCur(phost, VS_PROBE_CONTROL << 8);
 80072e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80072ea:	4620      	mov	r0, r4
 80072ec:	f7fb fed6 	bl	800309c <USBH_VS_GetCur>
      if (status == USBH_OK)
 80072f0:	b948      	cbnz	r0, 8007306 <USBH_UserProcess+0x3a>
      {
        USBH_VS_SetCur(phost, VS_COMMIT_CONTROL << 8);
 80072f2:	4620      	mov	r0, r4
 80072f4:	f44f 7100 	mov.w	r1, #512	; 0x200

  default:
    break;
  }
  /* USER CODE END 2 */
}
 80072f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        USBH_VS_SetCur(phost, VS_COMMIT_CONTROL << 8);
 80072fc:	f7fb be98 	b.w	8003030 <USBH_VS_SetCur>
    Appli_state = APPLICATION_DISCONNECT;
 8007300:	2203      	movs	r2, #3
    Appli_state = APPLICATION_START;
 8007302:	4b03      	ldr	r3, [pc, #12]	; (8007310 <USBH_UserProcess+0x44>)
 8007304:	701a      	strb	r2, [r3, #0]
 8007306:	bd10      	pop	{r4, pc}
    Appli_state = APPLICATION_READY;
 8007308:	2202      	movs	r2, #2
 800730a:	e7fa      	b.n	8007302 <USBH_UserProcess+0x36>
    Appli_state = APPLICATION_START;
 800730c:	2201      	movs	r2, #1
 800730e:	e7f8      	b.n	8007302 <USBH_UserProcess+0x36>
 8007310:	20004024 	.word	0x20004024

08007314 <MX_USB_HOST_Init>:
{
 8007314:	b510      	push	{r4, lr}
  USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS);
 8007316:	4c07      	ldr	r4, [pc, #28]	; (8007334 <MX_USB_HOST_Init+0x20>)
 8007318:	2201      	movs	r2, #1
 800731a:	4907      	ldr	r1, [pc, #28]	; (8007338 <MX_USB_HOST_Init+0x24>)
 800731c:	4620      	mov	r0, r4
 800731e:	f7fc f8dd 	bl	80034dc <USBH_Init>
  USBH_RegisterClass(&hUsbHostFS, USBH_VIDEO_CLASS);
 8007322:	4620      	mov	r0, r4
 8007324:	4905      	ldr	r1, [pc, #20]	; (800733c <MX_USB_HOST_Init+0x28>)
 8007326:	f7fc f923 	bl	8003570 <USBH_RegisterClass>
  USBH_Start(&hUsbHostFS);
 800732a:	4620      	mov	r0, r4
}
 800732c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBH_Start(&hUsbHostFS);
 8007330:	f7fc b96e 	b.w	8003610 <USBH_Start>
 8007334:	20007328 	.word	0x20007328
 8007338:	080072cd 	.word	0x080072cd
 800733c:	20000008 	.word	0x20000008

08007340 <MX_USB_HOST_Process>:
    USBH_Process(&hUsbHostFS);
 8007340:	4801      	ldr	r0, [pc, #4]	; (8007348 <MX_USB_HOST_Process+0x8>)
 8007342:	f7fc b96f 	b.w	8003624 <USBH_Process>
 8007346:	bf00      	nop
 8007348:	20007328 	.word	0x20007328

0800734c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800734c:	b510      	push	{r4, lr}
 800734e:	b088      	sub	sp, #32
 8007350:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007352:	2214      	movs	r2, #20
 8007354:	2100      	movs	r1, #0
 8007356:	a803      	add	r0, sp, #12
 8007358:	f000 f99e 	bl	8007698 <memset>
  if(hcdHandle->Instance==USB_OTG_HS)
 800735c:	6822      	ldr	r2, [r4, #0]
 800735e:	4b17      	ldr	r3, [pc, #92]	; (80073bc <HAL_HCD_MspInit+0x70>)
 8007360:	429a      	cmp	r2, r3
 8007362:	d128      	bne.n	80073b6 <HAL_HCD_MspInit+0x6a>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007364:	4c16      	ldr	r4, [pc, #88]	; (80073c0 <HAL_HCD_MspInit+0x74>)
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007366:	4817      	ldr	r0, [pc, #92]	; (80073c4 <HAL_HCD_MspInit+0x78>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007368:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800736a:	f043 0302 	orr.w	r3, r3, #2
 800736e:	6323      	str	r3, [r4, #48]	; 0x30
 8007370:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	9301      	str	r3, [sp, #4]
 8007378:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800737a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800737e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007380:	2302      	movs	r3, #2
 8007382:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007384:	2303      	movs	r3, #3
 8007386:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8007388:	230c      	movs	r3, #12
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800738a:	eb0d 0103 	add.w	r1, sp, r3
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800738e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007390:	f7f9 fb76 	bl	8000a80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8007394:	6b23      	ldr	r3, [r4, #48]	; 0x30

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 8007396:	204d      	movs	r0, #77	; 0x4d
 8007398:	2200      	movs	r2, #0
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800739a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800739e:	2105      	movs	r1, #5
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80073a0:	6323      	str	r3, [r4, #48]	; 0x30
 80073a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80073a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073a8:	9302      	str	r3, [sp, #8]
 80073aa:	9b02      	ldr	r3, [sp, #8]
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 80073ac:	f7f9 f96e 	bl	800068c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80073b0:	204d      	movs	r0, #77	; 0x4d
 80073b2:	f7f9 f9a3 	bl	80006fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80073b6:	b008      	add	sp, #32
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	40040000 	.word	0x40040000
 80073c0:	40023800 	.word	0x40023800
 80073c4:	40020400 	.word	0x40020400

080073c8 <HAL_HCD_SOF_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_IncTimer(hhcd->pData);
 80073c8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073cc:	f7fc bc33 	b.w	8003c36 <USBH_LL_IncTimer>

080073d0 <HAL_HCD_Connect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Connect(hhcd->pData);
 80073d0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073d4:	f7fc bc4b 	b.w	8003c6e <USBH_LL_Connect>

080073d8 <HAL_HCD_Disconnect_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_Disconnect(hhcd->pData);
 80073d8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073dc:	f7fc bc59 	b.w	8003c92 <USBH_LL_Disconnect>

080073e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80073e0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073e4:	f7fc bc73 	b.w	8003cce <USBH_LL_NotifyURBChange>

080073e8 <HAL_HCD_PortEnabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortEnabled(hhcd->pData);
 80073e8:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073ec:	f7fc bc31 	b.w	8003c52 <USBH_LL_PortEnabled>

080073f0 <HAL_HCD_PortDisabled_Callback>:
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
  USBH_LL_PortDisabled(hhcd->pData);
 80073f0:	f8d0 02c0 	ldr.w	r0, [r0, #704]	; 0x2c0
 80073f4:	f7fc bc37 	b.w	8003c66 <USBH_LL_PortDisabled>

080073f8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80073f8:	b510      	push	{r4, lr}
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 80073fa:	f890 378c 	ldrb.w	r3, [r0, #1932]	; 0x78c
{
 80073fe:	4604      	mov	r4, r0
  if (phost->id == HOST_HS) {
 8007400:	b9e3      	cbnz	r3, 800743c <USBH_LL_Init+0x44>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 8007402:	480f      	ldr	r0, [pc, #60]	; (8007440 <USBH_LL_Init+0x48>)
  phost->pData = &hhcd_USB_OTG_HS;

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8007404:	4a0f      	ldr	r2, [pc, #60]	; (8007444 <USBH_LL_Init+0x4c>)
  phost->pData = &hhcd_USB_OTG_HS;
 8007406:	f8c4 0790 	str.w	r0, [r4, #1936]	; 0x790
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800740a:	6002      	str	r2, [r0, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800740c:	220c      	movs	r2, #12
  hhcd_USB_OTG_HS.pData = phost;
 800740e:	f8c0 42c0 	str.w	r4, [r0, #704]	; 0x2c0
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8007412:	6082      	str	r2, [r0, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8007414:	2201      	movs	r2, #1
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8007416:	6103      	str	r3, [r0, #16]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8007418:	60c2      	str	r2, [r0, #12]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800741a:	2202      	movs	r2, #2
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800741c:	61c3      	str	r3, [r0, #28]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800741e:	6182      	str	r2, [r0, #24]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8007420:	6203      	str	r3, [r0, #32]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8007422:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8007424:	f7f9 fc6c 	bl	8000d00 <HAL_HCD_Init>
 8007428:	b108      	cbz	r0, 800742e <USBH_LL_Init+0x36>
  {
    Error_Handler( );
 800742a:	f7fe ff97 	bl	800635c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800742e:	4804      	ldr	r0, [pc, #16]	; (8007440 <USBH_LL_Init+0x48>)
 8007430:	f7fa f86d 	bl	800150e <HAL_HCD_GetCurrentFrame>
 8007434:	4601      	mov	r1, r0
 8007436:	4620      	mov	r0, r4
 8007438:	f7fc fbfa 	bl	8003c30 <USBH_LL_SetTimer>
  }
  return USBH_OK;
}
 800743c:	2000      	movs	r0, #0
 800743e:	bd10      	pop	{r4, pc}
 8007440:	20007acc 	.word	0x20007acc
 8007444:	40040000 	.word	0x40040000

08007448 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007448:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Start(phost->pData);
 800744a:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 800744e:	f7fa f82d 	bl	80014ac <HAL_HCD_Start>
 8007452:	2803      	cmp	r0, #3
 8007454:	bf9a      	itte	ls
 8007456:	4b02      	ldrls	r3, [pc, #8]	; (8007460 <USBH_LL_Start+0x18>)
 8007458:	5c18      	ldrbls	r0, [r3, r0]
 800745a:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800745c:	bd08      	pop	{r3, pc}
 800745e:	bf00      	nop
 8007460:	080093cd 	.word	0x080093cd

08007464 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007464:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_Stop(phost->pData);
 8007466:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 800746a:	f7fa f835 	bl	80014d8 <HAL_HCD_Stop>
 800746e:	2803      	cmp	r0, #3
 8007470:	bf9a      	itte	ls
 8007472:	4b02      	ldrls	r3, [pc, #8]	; (800747c <USBH_LL_Stop+0x18>)
 8007474:	5c18      	ldrbls	r0, [r3, r0]
 8007476:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
 
  return usb_status;
}
 8007478:	bd08      	pop	{r3, pc}
 800747a:	bf00      	nop
 800747c:	080093cd 	.word	0x080093cd

08007480 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8007480:	b508      	push	{r3, lr}
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8007482:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 8007486:	f7fa f845 	bl	8001514 <HAL_HCD_GetCurrentSpeed>
 800748a:	2802      	cmp	r0, #2
 800748c:	bf9a      	itte	ls
 800748e:	4b02      	ldrls	r3, [pc, #8]	; (8007498 <USBH_LL_GetSpeed+0x18>)
 8007490:	5c18      	ldrbls	r0, [r3, r0]
 8007492:	2001      	movhi	r0, #1
  default:
   speed = USBH_SPEED_FULL;
    break;
  }
  return  speed;
}
 8007494:	bd08      	pop	{r3, pc}
 8007496:	bf00      	nop
 8007498:	080093ca 	.word	0x080093ca

0800749c <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800749c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800749e:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 80074a2:	f7fa f82b 	bl	80014fc <HAL_HCD_ResetPort>
 80074a6:	2803      	cmp	r0, #3
 80074a8:	bf9a      	itte	ls
 80074aa:	4b02      	ldrls	r3, [pc, #8]	; (80074b4 <USBH_LL_ResetPort+0x18>)
 80074ac:	5c18      	ldrbls	r0, [r3, r0]
 80074ae:	2002      	movhi	r0, #2
  
  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80074b0:	bd08      	pop	{r3, pc}
 80074b2:	bf00      	nop
 80074b4:	080093cd 	.word	0x080093cd

080074b8 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80074b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80074ba:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 80074be:	9402      	str	r4, [sp, #8]
 80074c0:	f89d 401c 	ldrb.w	r4, [sp, #28]
 80074c4:	9401      	str	r4, [sp, #4]
 80074c6:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80074ca:	9400      	str	r4, [sp, #0]
 80074cc:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 80074d0:	f7f9 fbcb 	bl	8000c6a <HAL_HCD_HC_Init>
 80074d4:	2803      	cmp	r0, #3
 80074d6:	bf96      	itet	ls
 80074d8:	4b02      	ldrls	r3, [pc, #8]	; (80074e4 <USBH_LL_OpenPipe+0x2c>)
 80074da:	2002      	movhi	r0, #2
 80074dc:	5c18      	ldrbls	r0, [r3, r0]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80074de:	b004      	add	sp, #16
 80074e0:	bd10      	pop	{r4, pc}
 80074e2:	bf00      	nop
 80074e4:	080093cd 	.word	0x080093cd

080074e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80074e8:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80074ea:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 80074ee:	f7f9 fbf5 	bl	8000cdc <HAL_HCD_HC_Halt>
 80074f2:	2803      	cmp	r0, #3
 80074f4:	bf9a      	itte	ls
 80074f6:	4b02      	ldrls	r3, [pc, #8]	; (8007500 <USBH_LL_ClosePipe+0x18>)
 80074f8:	5c18      	ldrbls	r0, [r3, r0]
 80074fa:	2002      	movhi	r0, #2

  usb_status = USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 80074fc:	bd08      	pop	{r3, pc}
 80074fe:	bf00      	nop
 8007500:	080093cd 	.word	0x080093cd

08007504 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBH_StatusTypeDef usb_status = USBH_OK;

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007506:	f89d 4024 	ldrb.w	r4, [sp, #36]	; 0x24
 800750a:	9403      	str	r4, [sp, #12]
 800750c:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8007510:	9402      	str	r4, [sp, #8]
 8007512:	9c07      	ldr	r4, [sp, #28]
 8007514:	9401      	str	r4, [sp, #4]
 8007516:	f89d 4018 	ldrb.w	r4, [sp, #24]
 800751a:	9400      	str	r4, [sp, #0]
 800751c:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 8007520:	f7f9 fc38 	bl	8000d94 <HAL_HCD_HC_SubmitRequest>
 8007524:	2803      	cmp	r0, #3
 8007526:	bf96      	itet	ls
 8007528:	4b02      	ldrls	r3, [pc, #8]	; (8007534 <USBH_LL_SubmitURB+0x30>)
 800752a:	2002      	movhi	r0, #2
 800752c:	5c18      	ldrbls	r0, [r3, r0]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
  
  return usb_status;
}
 800752e:	b004      	add	sp, #16
 8007530:	bd10      	pop	{r4, pc}
 8007532:	bf00      	nop
 8007534:	080093cd 	.word	0x080093cd

08007538 <USBH_LL_GetURBState>:
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007538:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
 800753c:	f7f9 bfe1 	b.w	8001502 <HAL_HCD_HC_GetURBState>

08007540 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007540:	b508      	push	{r3, lr}
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_HS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_HS */
    }
  }
  HAL_Delay(200);
 8007542:	20c8      	movs	r0, #200	; 0xc8
 8007544:	f7f9 f87e 	bl	8000644 <HAL_Delay>
  return USBH_OK;
}
 8007548:	2000      	movs	r0, #0
 800754a:	bd08      	pop	{r3, pc}

0800754c <USBH_LL_SetToggle>:
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;

  if(pHandle->hc[pipe].ep_is_in)
 800754c:	2328      	movs	r3, #40	; 0x28
  pHandle = phost->pData;
 800754e:	f8d0 0790 	ldr.w	r0, [r0, #1936]	; 0x790
  if(pHandle->hc[pipe].ep_is_in)
 8007552:	fb03 0101 	mla	r1, r3, r1, r0
 8007556:	f891 303b 	ldrb.w	r3, [r1, #59]	; 0x3b
 800755a:	b11b      	cbz	r3, 8007564 <USBH_LL_SetToggle+0x18>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800755c:	f881 2050 	strb.w	r2, [r1, #80]	; 0x50
  {
    pHandle->hc[pipe].toggle_out = toggle;
  }

  return USBH_OK;
}
 8007560:	2000      	movs	r0, #0
 8007562:	4770      	bx	lr
    pHandle->hc[pipe].toggle_out = toggle;
 8007564:	f881 2051 	strb.w	r2, [r1, #81]	; 0x51
 8007568:	e7fa      	b.n	8007560 <USBH_LL_SetToggle+0x14>

0800756a <USBH_Delay>:
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 800756a:	f7f9 b86b 	b.w	8000644 <HAL_Delay>
	...

08007570 <USER_status>:
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8007570:	4b02      	ldr	r3, [pc, #8]	; (800757c <USER_status+0xc>)
 8007572:	2201      	movs	r2, #1
 8007574:	701a      	strb	r2, [r3, #0]
    return Stat;
 8007576:	7818      	ldrb	r0, [r3, #0]
  /* USER CODE END STATUS */
}
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	200001f4 	.word	0x200001f4

08007580 <USER_write>:
{ 
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
  /* USER CODE END WRITE */
}
 8007580:	2000      	movs	r0, #0
 8007582:	4770      	bx	lr

08007584 <USER_ioctl>:
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8007584:	2001      	movs	r0, #1
 8007586:	4770      	bx	lr

08007588 <USER_read>:
 8007588:	2000      	movs	r0, #0
 800758a:	4770      	bx	lr

0800758c <USER_initialize>:
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USER_initialize+0xc>)
 800758e:	2201      	movs	r2, #1
 8007590:	701a      	strb	r2, [r3, #0]
 8007592:	7818      	ldrb	r0, [r3, #0]
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	200001f4 	.word	0x200001f4

0800759c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800759c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80075d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80075a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80075a2:	e003      	b.n	80075ac <LoopCopyDataInit>

080075a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80075a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80075a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80075aa:	3104      	adds	r1, #4

080075ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80075ac:	480b      	ldr	r0, [pc, #44]	; (80075dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80075ae:	4b0c      	ldr	r3, [pc, #48]	; (80075e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80075b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80075b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80075b4:	d3f6      	bcc.n	80075a4 <CopyDataInit>
  ldr  r2, =_sbss
 80075b6:	4a0b      	ldr	r2, [pc, #44]	; (80075e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80075b8:	e002      	b.n	80075c0 <LoopFillZerobss>

080075ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80075ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80075bc:	f842 3b04 	str.w	r3, [r2], #4

080075c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80075c0:	4b09      	ldr	r3, [pc, #36]	; (80075e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80075c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80075c4:	d3f9      	bcc.n	80075ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80075c6:	f7ff f8bd 	bl	8006744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80075ca:	f000 f817 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80075ce:	f7fe fc5b 	bl	8005e88 <main>
  bx  lr    
 80075d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80075d4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80075d8:	0800947c 	.word	0x0800947c
  ldr  r0, =_sdata
 80075dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80075e0:	20000270 	.word	0x20000270
  ldr  r2, =_sbss
 80075e4:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 80075e8:	20007d94 	.word	0x20007d94

080075ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80075ec:	e7fe      	b.n	80075ec <ADC_IRQHandler>
	...

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	2000020c 	.word	0x2000020c

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4e0d      	ldr	r6, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1ba4      	subs	r4, r4, r6
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2500      	movs	r5, #0
 8007608:	42a5      	cmp	r5, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4e0b      	ldr	r6, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f001 f9ae 	bl	8008970 <_init>
 8007614:	1ba4      	subs	r4, r4, r6
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2500      	movs	r5, #0
 800761a:	42a5      	cmp	r5, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007624:	4798      	blx	r3
 8007626:	3501      	adds	r5, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800762e:	4798      	blx	r3
 8007630:	3501      	adds	r5, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	08009474 	.word	0x08009474
 8007638:	08009474 	.word	0x08009474
 800763c:	08009474 	.word	0x08009474
 8007640:	08009478 	.word	0x08009478

08007644 <malloc>:
 8007644:	4b02      	ldr	r3, [pc, #8]	; (8007650 <malloc+0xc>)
 8007646:	4601      	mov	r1, r0
 8007648:	6818      	ldr	r0, [r3, #0]
 800764a:	f000 b87b 	b.w	8007744 <_malloc_r>
 800764e:	bf00      	nop
 8007650:	2000020c 	.word	0x2000020c

08007654 <free>:
 8007654:	4b02      	ldr	r3, [pc, #8]	; (8007660 <free+0xc>)
 8007656:	4601      	mov	r1, r0
 8007658:	6818      	ldr	r0, [r3, #0]
 800765a:	f000 b825 	b.w	80076a8 <_free_r>
 800765e:	bf00      	nop
 8007660:	2000020c 	.word	0x2000020c

08007664 <memcmp>:
 8007664:	b510      	push	{r4, lr}
 8007666:	3901      	subs	r1, #1
 8007668:	4402      	add	r2, r0
 800766a:	4290      	cmp	r0, r2
 800766c:	d101      	bne.n	8007672 <memcmp+0xe>
 800766e:	2000      	movs	r0, #0
 8007670:	bd10      	pop	{r4, pc}
 8007672:	f810 3b01 	ldrb.w	r3, [r0], #1
 8007676:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800767a:	42a3      	cmp	r3, r4
 800767c:	d0f5      	beq.n	800766a <memcmp+0x6>
 800767e:	1b18      	subs	r0, r3, r4
 8007680:	bd10      	pop	{r4, pc}

08007682 <memcpy>:
 8007682:	b510      	push	{r4, lr}
 8007684:	1e43      	subs	r3, r0, #1
 8007686:	440a      	add	r2, r1
 8007688:	4291      	cmp	r1, r2
 800768a:	d100      	bne.n	800768e <memcpy+0xc>
 800768c:	bd10      	pop	{r4, pc}
 800768e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007696:	e7f7      	b.n	8007688 <memcpy+0x6>

08007698 <memset>:
 8007698:	4402      	add	r2, r0
 800769a:	4603      	mov	r3, r0
 800769c:	4293      	cmp	r3, r2
 800769e:	d100      	bne.n	80076a2 <memset+0xa>
 80076a0:	4770      	bx	lr
 80076a2:	f803 1b01 	strb.w	r1, [r3], #1
 80076a6:	e7f9      	b.n	800769c <memset+0x4>

080076a8 <_free_r>:
 80076a8:	b538      	push	{r3, r4, r5, lr}
 80076aa:	4605      	mov	r5, r0
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d045      	beq.n	800773c <_free_r+0x94>
 80076b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b4:	1f0c      	subs	r4, r1, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfb8      	it	lt
 80076ba:	18e4      	addlt	r4, r4, r3
 80076bc:	f000 fc04 	bl	8007ec8 <__malloc_lock>
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <_free_r+0x98>)
 80076c2:	6813      	ldr	r3, [r2, #0]
 80076c4:	4610      	mov	r0, r2
 80076c6:	b933      	cbnz	r3, 80076d6 <_free_r+0x2e>
 80076c8:	6063      	str	r3, [r4, #4]
 80076ca:	6014      	str	r4, [r2, #0]
 80076cc:	4628      	mov	r0, r5
 80076ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076d2:	f000 bbfa 	b.w	8007eca <__malloc_unlock>
 80076d6:	42a3      	cmp	r3, r4
 80076d8:	d90c      	bls.n	80076f4 <_free_r+0x4c>
 80076da:	6821      	ldr	r1, [r4, #0]
 80076dc:	1862      	adds	r2, r4, r1
 80076de:	4293      	cmp	r3, r2
 80076e0:	bf04      	itt	eq
 80076e2:	681a      	ldreq	r2, [r3, #0]
 80076e4:	685b      	ldreq	r3, [r3, #4]
 80076e6:	6063      	str	r3, [r4, #4]
 80076e8:	bf04      	itt	eq
 80076ea:	1852      	addeq	r2, r2, r1
 80076ec:	6022      	streq	r2, [r4, #0]
 80076ee:	6004      	str	r4, [r0, #0]
 80076f0:	e7ec      	b.n	80076cc <_free_r+0x24>
 80076f2:	4613      	mov	r3, r2
 80076f4:	685a      	ldr	r2, [r3, #4]
 80076f6:	b10a      	cbz	r2, 80076fc <_free_r+0x54>
 80076f8:	42a2      	cmp	r2, r4
 80076fa:	d9fa      	bls.n	80076f2 <_free_r+0x4a>
 80076fc:	6819      	ldr	r1, [r3, #0]
 80076fe:	1858      	adds	r0, r3, r1
 8007700:	42a0      	cmp	r0, r4
 8007702:	d10b      	bne.n	800771c <_free_r+0x74>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	4401      	add	r1, r0
 8007708:	1858      	adds	r0, r3, r1
 800770a:	4282      	cmp	r2, r0
 800770c:	6019      	str	r1, [r3, #0]
 800770e:	d1dd      	bne.n	80076cc <_free_r+0x24>
 8007710:	6810      	ldr	r0, [r2, #0]
 8007712:	6852      	ldr	r2, [r2, #4]
 8007714:	605a      	str	r2, [r3, #4]
 8007716:	4401      	add	r1, r0
 8007718:	6019      	str	r1, [r3, #0]
 800771a:	e7d7      	b.n	80076cc <_free_r+0x24>
 800771c:	d902      	bls.n	8007724 <_free_r+0x7c>
 800771e:	230c      	movs	r3, #12
 8007720:	602b      	str	r3, [r5, #0]
 8007722:	e7d3      	b.n	80076cc <_free_r+0x24>
 8007724:	6820      	ldr	r0, [r4, #0]
 8007726:	1821      	adds	r1, r4, r0
 8007728:	428a      	cmp	r2, r1
 800772a:	bf04      	itt	eq
 800772c:	6811      	ldreq	r1, [r2, #0]
 800772e:	6852      	ldreq	r2, [r2, #4]
 8007730:	6062      	str	r2, [r4, #4]
 8007732:	bf04      	itt	eq
 8007734:	1809      	addeq	r1, r1, r0
 8007736:	6021      	streq	r1, [r4, #0]
 8007738:	605c      	str	r4, [r3, #4]
 800773a:	e7c7      	b.n	80076cc <_free_r+0x24>
 800773c:	bd38      	pop	{r3, r4, r5, pc}
 800773e:	bf00      	nop
 8007740:	20004028 	.word	0x20004028

08007744 <_malloc_r>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	1ccd      	adds	r5, r1, #3
 8007748:	f025 0503 	bic.w	r5, r5, #3
 800774c:	3508      	adds	r5, #8
 800774e:	2d0c      	cmp	r5, #12
 8007750:	bf38      	it	cc
 8007752:	250c      	movcc	r5, #12
 8007754:	2d00      	cmp	r5, #0
 8007756:	4606      	mov	r6, r0
 8007758:	db01      	blt.n	800775e <_malloc_r+0x1a>
 800775a:	42a9      	cmp	r1, r5
 800775c:	d903      	bls.n	8007766 <_malloc_r+0x22>
 800775e:	230c      	movs	r3, #12
 8007760:	6033      	str	r3, [r6, #0]
 8007762:	2000      	movs	r0, #0
 8007764:	bd70      	pop	{r4, r5, r6, pc}
 8007766:	f000 fbaf 	bl	8007ec8 <__malloc_lock>
 800776a:	4a23      	ldr	r2, [pc, #140]	; (80077f8 <_malloc_r+0xb4>)
 800776c:	6814      	ldr	r4, [r2, #0]
 800776e:	4621      	mov	r1, r4
 8007770:	b991      	cbnz	r1, 8007798 <_malloc_r+0x54>
 8007772:	4c22      	ldr	r4, [pc, #136]	; (80077fc <_malloc_r+0xb8>)
 8007774:	6823      	ldr	r3, [r4, #0]
 8007776:	b91b      	cbnz	r3, 8007780 <_malloc_r+0x3c>
 8007778:	4630      	mov	r0, r6
 800777a:	f000 f8d1 	bl	8007920 <_sbrk_r>
 800777e:	6020      	str	r0, [r4, #0]
 8007780:	4629      	mov	r1, r5
 8007782:	4630      	mov	r0, r6
 8007784:	f000 f8cc 	bl	8007920 <_sbrk_r>
 8007788:	1c43      	adds	r3, r0, #1
 800778a:	d126      	bne.n	80077da <_malloc_r+0x96>
 800778c:	230c      	movs	r3, #12
 800778e:	6033      	str	r3, [r6, #0]
 8007790:	4630      	mov	r0, r6
 8007792:	f000 fb9a 	bl	8007eca <__malloc_unlock>
 8007796:	e7e4      	b.n	8007762 <_malloc_r+0x1e>
 8007798:	680b      	ldr	r3, [r1, #0]
 800779a:	1b5b      	subs	r3, r3, r5
 800779c:	d41a      	bmi.n	80077d4 <_malloc_r+0x90>
 800779e:	2b0b      	cmp	r3, #11
 80077a0:	d90f      	bls.n	80077c2 <_malloc_r+0x7e>
 80077a2:	600b      	str	r3, [r1, #0]
 80077a4:	50cd      	str	r5, [r1, r3]
 80077a6:	18cc      	adds	r4, r1, r3
 80077a8:	4630      	mov	r0, r6
 80077aa:	f000 fb8e 	bl	8007eca <__malloc_unlock>
 80077ae:	f104 000b 	add.w	r0, r4, #11
 80077b2:	1d23      	adds	r3, r4, #4
 80077b4:	f020 0007 	bic.w	r0, r0, #7
 80077b8:	1ac3      	subs	r3, r0, r3
 80077ba:	d01b      	beq.n	80077f4 <_malloc_r+0xb0>
 80077bc:	425a      	negs	r2, r3
 80077be:	50e2      	str	r2, [r4, r3]
 80077c0:	bd70      	pop	{r4, r5, r6, pc}
 80077c2:	428c      	cmp	r4, r1
 80077c4:	bf0d      	iteet	eq
 80077c6:	6863      	ldreq	r3, [r4, #4]
 80077c8:	684b      	ldrne	r3, [r1, #4]
 80077ca:	6063      	strne	r3, [r4, #4]
 80077cc:	6013      	streq	r3, [r2, #0]
 80077ce:	bf18      	it	ne
 80077d0:	460c      	movne	r4, r1
 80077d2:	e7e9      	b.n	80077a8 <_malloc_r+0x64>
 80077d4:	460c      	mov	r4, r1
 80077d6:	6849      	ldr	r1, [r1, #4]
 80077d8:	e7ca      	b.n	8007770 <_malloc_r+0x2c>
 80077da:	1cc4      	adds	r4, r0, #3
 80077dc:	f024 0403 	bic.w	r4, r4, #3
 80077e0:	42a0      	cmp	r0, r4
 80077e2:	d005      	beq.n	80077f0 <_malloc_r+0xac>
 80077e4:	1a21      	subs	r1, r4, r0
 80077e6:	4630      	mov	r0, r6
 80077e8:	f000 f89a 	bl	8007920 <_sbrk_r>
 80077ec:	3001      	adds	r0, #1
 80077ee:	d0cd      	beq.n	800778c <_malloc_r+0x48>
 80077f0:	6025      	str	r5, [r4, #0]
 80077f2:	e7d9      	b.n	80077a8 <_malloc_r+0x64>
 80077f4:	bd70      	pop	{r4, r5, r6, pc}
 80077f6:	bf00      	nop
 80077f8:	20004028 	.word	0x20004028
 80077fc:	2000402c 	.word	0x2000402c

08007800 <iprintf>:
 8007800:	b40f      	push	{r0, r1, r2, r3}
 8007802:	4b0a      	ldr	r3, [pc, #40]	; (800782c <iprintf+0x2c>)
 8007804:	b513      	push	{r0, r1, r4, lr}
 8007806:	681c      	ldr	r4, [r3, #0]
 8007808:	b124      	cbz	r4, 8007814 <iprintf+0x14>
 800780a:	69a3      	ldr	r3, [r4, #24]
 800780c:	b913      	cbnz	r3, 8007814 <iprintf+0x14>
 800780e:	4620      	mov	r0, r4
 8007810:	f000 fa6c 	bl	8007cec <__sinit>
 8007814:	ab05      	add	r3, sp, #20
 8007816:	9a04      	ldr	r2, [sp, #16]
 8007818:	68a1      	ldr	r1, [r4, #8]
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	4620      	mov	r0, r4
 800781e:	f000 fccf 	bl	80081c0 <_vfiprintf_r>
 8007822:	b002      	add	sp, #8
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	b004      	add	sp, #16
 800782a:	4770      	bx	lr
 800782c:	2000020c 	.word	0x2000020c

08007830 <putchar>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4b08      	ldr	r3, [pc, #32]	; (8007854 <putchar+0x24>)
 8007834:	681c      	ldr	r4, [r3, #0]
 8007836:	4605      	mov	r5, r0
 8007838:	b124      	cbz	r4, 8007844 <putchar+0x14>
 800783a:	69a3      	ldr	r3, [r4, #24]
 800783c:	b913      	cbnz	r3, 8007844 <putchar+0x14>
 800783e:	4620      	mov	r0, r4
 8007840:	f000 fa54 	bl	8007cec <__sinit>
 8007844:	68a2      	ldr	r2, [r4, #8]
 8007846:	4629      	mov	r1, r5
 8007848:	4620      	mov	r0, r4
 800784a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800784e:	f000 bf63 	b.w	8008718 <_putc_r>
 8007852:	bf00      	nop
 8007854:	2000020c 	.word	0x2000020c

08007858 <_puts_r>:
 8007858:	b570      	push	{r4, r5, r6, lr}
 800785a:	460e      	mov	r6, r1
 800785c:	4605      	mov	r5, r0
 800785e:	b118      	cbz	r0, 8007868 <_puts_r+0x10>
 8007860:	6983      	ldr	r3, [r0, #24]
 8007862:	b90b      	cbnz	r3, 8007868 <_puts_r+0x10>
 8007864:	f000 fa42 	bl	8007cec <__sinit>
 8007868:	69ab      	ldr	r3, [r5, #24]
 800786a:	68ac      	ldr	r4, [r5, #8]
 800786c:	b913      	cbnz	r3, 8007874 <_puts_r+0x1c>
 800786e:	4628      	mov	r0, r5
 8007870:	f000 fa3c 	bl	8007cec <__sinit>
 8007874:	4b23      	ldr	r3, [pc, #140]	; (8007904 <_puts_r+0xac>)
 8007876:	429c      	cmp	r4, r3
 8007878:	d117      	bne.n	80078aa <_puts_r+0x52>
 800787a:	686c      	ldr	r4, [r5, #4]
 800787c:	89a3      	ldrh	r3, [r4, #12]
 800787e:	071b      	lsls	r3, r3, #28
 8007880:	d51d      	bpl.n	80078be <_puts_r+0x66>
 8007882:	6923      	ldr	r3, [r4, #16]
 8007884:	b1db      	cbz	r3, 80078be <_puts_r+0x66>
 8007886:	3e01      	subs	r6, #1
 8007888:	68a3      	ldr	r3, [r4, #8]
 800788a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800788e:	3b01      	subs	r3, #1
 8007890:	60a3      	str	r3, [r4, #8]
 8007892:	b9e9      	cbnz	r1, 80078d0 <_puts_r+0x78>
 8007894:	2b00      	cmp	r3, #0
 8007896:	da2e      	bge.n	80078f6 <_puts_r+0x9e>
 8007898:	4622      	mov	r2, r4
 800789a:	210a      	movs	r1, #10
 800789c:	4628      	mov	r0, r5
 800789e:	f000 f873 	bl	8007988 <__swbuf_r>
 80078a2:	3001      	adds	r0, #1
 80078a4:	d011      	beq.n	80078ca <_puts_r+0x72>
 80078a6:	200a      	movs	r0, #10
 80078a8:	bd70      	pop	{r4, r5, r6, pc}
 80078aa:	4b17      	ldr	r3, [pc, #92]	; (8007908 <_puts_r+0xb0>)
 80078ac:	429c      	cmp	r4, r3
 80078ae:	d101      	bne.n	80078b4 <_puts_r+0x5c>
 80078b0:	68ac      	ldr	r4, [r5, #8]
 80078b2:	e7e3      	b.n	800787c <_puts_r+0x24>
 80078b4:	4b15      	ldr	r3, [pc, #84]	; (800790c <_puts_r+0xb4>)
 80078b6:	429c      	cmp	r4, r3
 80078b8:	bf08      	it	eq
 80078ba:	68ec      	ldreq	r4, [r5, #12]
 80078bc:	e7de      	b.n	800787c <_puts_r+0x24>
 80078be:	4621      	mov	r1, r4
 80078c0:	4628      	mov	r0, r5
 80078c2:	f000 f8b3 	bl	8007a2c <__swsetup_r>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d0dd      	beq.n	8007886 <_puts_r+0x2e>
 80078ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80078ce:	bd70      	pop	{r4, r5, r6, pc}
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	da04      	bge.n	80078de <_puts_r+0x86>
 80078d4:	69a2      	ldr	r2, [r4, #24]
 80078d6:	4293      	cmp	r3, r2
 80078d8:	db06      	blt.n	80078e8 <_puts_r+0x90>
 80078da:	290a      	cmp	r1, #10
 80078dc:	d004      	beq.n	80078e8 <_puts_r+0x90>
 80078de:	6823      	ldr	r3, [r4, #0]
 80078e0:	1c5a      	adds	r2, r3, #1
 80078e2:	6022      	str	r2, [r4, #0]
 80078e4:	7019      	strb	r1, [r3, #0]
 80078e6:	e7cf      	b.n	8007888 <_puts_r+0x30>
 80078e8:	4622      	mov	r2, r4
 80078ea:	4628      	mov	r0, r5
 80078ec:	f000 f84c 	bl	8007988 <__swbuf_r>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d1c9      	bne.n	8007888 <_puts_r+0x30>
 80078f4:	e7e9      	b.n	80078ca <_puts_r+0x72>
 80078f6:	6823      	ldr	r3, [r4, #0]
 80078f8:	200a      	movs	r0, #10
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	6022      	str	r2, [r4, #0]
 80078fe:	7018      	strb	r0, [r3, #0]
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	bf00      	nop
 8007904:	080093f8 	.word	0x080093f8
 8007908:	08009418 	.word	0x08009418
 800790c:	080093d8 	.word	0x080093d8

08007910 <puts>:
 8007910:	4b02      	ldr	r3, [pc, #8]	; (800791c <puts+0xc>)
 8007912:	4601      	mov	r1, r0
 8007914:	6818      	ldr	r0, [r3, #0]
 8007916:	f7ff bf9f 	b.w	8007858 <_puts_r>
 800791a:	bf00      	nop
 800791c:	2000020c 	.word	0x2000020c

08007920 <_sbrk_r>:
 8007920:	b538      	push	{r3, r4, r5, lr}
 8007922:	4c06      	ldr	r4, [pc, #24]	; (800793c <_sbrk_r+0x1c>)
 8007924:	2300      	movs	r3, #0
 8007926:	4605      	mov	r5, r0
 8007928:	4608      	mov	r0, r1
 800792a:	6023      	str	r3, [r4, #0]
 800792c:	f7fe fee4 	bl	80066f8 <_sbrk>
 8007930:	1c43      	adds	r3, r0, #1
 8007932:	d102      	bne.n	800793a <_sbrk_r+0x1a>
 8007934:	6823      	ldr	r3, [r4, #0]
 8007936:	b103      	cbz	r3, 800793a <_sbrk_r+0x1a>
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	bd38      	pop	{r3, r4, r5, pc}
 800793c:	20007d90 	.word	0x20007d90

08007940 <siprintf>:
 8007940:	b40e      	push	{r1, r2, r3}
 8007942:	b500      	push	{lr}
 8007944:	b09c      	sub	sp, #112	; 0x70
 8007946:	f44f 7102 	mov.w	r1, #520	; 0x208
 800794a:	ab1d      	add	r3, sp, #116	; 0x74
 800794c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8007950:	9002      	str	r0, [sp, #8]
 8007952:	9006      	str	r0, [sp, #24]
 8007954:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007958:	480a      	ldr	r0, [pc, #40]	; (8007984 <siprintf+0x44>)
 800795a:	9104      	str	r1, [sp, #16]
 800795c:	9107      	str	r1, [sp, #28]
 800795e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007962:	f853 2b04 	ldr.w	r2, [r3], #4
 8007966:	f8ad 1016 	strh.w	r1, [sp, #22]
 800796a:	6800      	ldr	r0, [r0, #0]
 800796c:	9301      	str	r3, [sp, #4]
 800796e:	a902      	add	r1, sp, #8
 8007970:	f000 fb08 	bl	8007f84 <_svfiprintf_r>
 8007974:	9b02      	ldr	r3, [sp, #8]
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	b01c      	add	sp, #112	; 0x70
 800797c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007980:	b003      	add	sp, #12
 8007982:	4770      	bx	lr
 8007984:	2000020c 	.word	0x2000020c

08007988 <__swbuf_r>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	460e      	mov	r6, r1
 800798c:	4614      	mov	r4, r2
 800798e:	4605      	mov	r5, r0
 8007990:	b118      	cbz	r0, 800799a <__swbuf_r+0x12>
 8007992:	6983      	ldr	r3, [r0, #24]
 8007994:	b90b      	cbnz	r3, 800799a <__swbuf_r+0x12>
 8007996:	f000 f9a9 	bl	8007cec <__sinit>
 800799a:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <__swbuf_r+0x98>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d12a      	bne.n	80079f6 <__swbuf_r+0x6e>
 80079a0:	686c      	ldr	r4, [r5, #4]
 80079a2:	69a3      	ldr	r3, [r4, #24]
 80079a4:	60a3      	str	r3, [r4, #8]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	071a      	lsls	r2, r3, #28
 80079aa:	d52e      	bpl.n	8007a0a <__swbuf_r+0x82>
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	b363      	cbz	r3, 8007a0a <__swbuf_r+0x82>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	1ac0      	subs	r0, r0, r3
 80079b6:	6963      	ldr	r3, [r4, #20]
 80079b8:	b2f6      	uxtb	r6, r6
 80079ba:	4298      	cmp	r0, r3
 80079bc:	4637      	mov	r7, r6
 80079be:	db04      	blt.n	80079ca <__swbuf_r+0x42>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f000 f928 	bl	8007c18 <_fflush_r>
 80079c8:	bb28      	cbnz	r0, 8007a16 <__swbuf_r+0x8e>
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	3b01      	subs	r3, #1
 80079ce:	60a3      	str	r3, [r4, #8]
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	1c5a      	adds	r2, r3, #1
 80079d4:	6022      	str	r2, [r4, #0]
 80079d6:	701e      	strb	r6, [r3, #0]
 80079d8:	6963      	ldr	r3, [r4, #20]
 80079da:	3001      	adds	r0, #1
 80079dc:	4298      	cmp	r0, r3
 80079de:	d004      	beq.n	80079ea <__swbuf_r+0x62>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	07db      	lsls	r3, r3, #31
 80079e4:	d519      	bpl.n	8007a1a <__swbuf_r+0x92>
 80079e6:	2e0a      	cmp	r6, #10
 80079e8:	d117      	bne.n	8007a1a <__swbuf_r+0x92>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f000 f913 	bl	8007c18 <_fflush_r>
 80079f2:	b190      	cbz	r0, 8007a1a <__swbuf_r+0x92>
 80079f4:	e00f      	b.n	8007a16 <__swbuf_r+0x8e>
 80079f6:	4b0b      	ldr	r3, [pc, #44]	; (8007a24 <__swbuf_r+0x9c>)
 80079f8:	429c      	cmp	r4, r3
 80079fa:	d101      	bne.n	8007a00 <__swbuf_r+0x78>
 80079fc:	68ac      	ldr	r4, [r5, #8]
 80079fe:	e7d0      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a00:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <__swbuf_r+0xa0>)
 8007a02:	429c      	cmp	r4, r3
 8007a04:	bf08      	it	eq
 8007a06:	68ec      	ldreq	r4, [r5, #12]
 8007a08:	e7cb      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a0a:	4621      	mov	r1, r4
 8007a0c:	4628      	mov	r0, r5
 8007a0e:	f000 f80d 	bl	8007a2c <__swsetup_r>
 8007a12:	2800      	cmp	r0, #0
 8007a14:	d0cc      	beq.n	80079b0 <__swbuf_r+0x28>
 8007a16:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	080093f8 	.word	0x080093f8
 8007a24:	08009418 	.word	0x08009418
 8007a28:	080093d8 	.word	0x080093d8

08007a2c <__swsetup_r>:
 8007a2c:	4b32      	ldr	r3, [pc, #200]	; (8007af8 <__swsetup_r+0xcc>)
 8007a2e:	b570      	push	{r4, r5, r6, lr}
 8007a30:	681d      	ldr	r5, [r3, #0]
 8007a32:	4606      	mov	r6, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	b125      	cbz	r5, 8007a42 <__swsetup_r+0x16>
 8007a38:	69ab      	ldr	r3, [r5, #24]
 8007a3a:	b913      	cbnz	r3, 8007a42 <__swsetup_r+0x16>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	f000 f955 	bl	8007cec <__sinit>
 8007a42:	4b2e      	ldr	r3, [pc, #184]	; (8007afc <__swsetup_r+0xd0>)
 8007a44:	429c      	cmp	r4, r3
 8007a46:	d10f      	bne.n	8007a68 <__swsetup_r+0x3c>
 8007a48:	686c      	ldr	r4, [r5, #4]
 8007a4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	0715      	lsls	r5, r2, #28
 8007a52:	d42c      	bmi.n	8007aae <__swsetup_r+0x82>
 8007a54:	06d0      	lsls	r0, r2, #27
 8007a56:	d411      	bmi.n	8007a7c <__swsetup_r+0x50>
 8007a58:	2209      	movs	r2, #9
 8007a5a:	6032      	str	r2, [r6, #0]
 8007a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a66:	bd70      	pop	{r4, r5, r6, pc}
 8007a68:	4b25      	ldr	r3, [pc, #148]	; (8007b00 <__swsetup_r+0xd4>)
 8007a6a:	429c      	cmp	r4, r3
 8007a6c:	d101      	bne.n	8007a72 <__swsetup_r+0x46>
 8007a6e:	68ac      	ldr	r4, [r5, #8]
 8007a70:	e7eb      	b.n	8007a4a <__swsetup_r+0x1e>
 8007a72:	4b24      	ldr	r3, [pc, #144]	; (8007b04 <__swsetup_r+0xd8>)
 8007a74:	429c      	cmp	r4, r3
 8007a76:	bf08      	it	eq
 8007a78:	68ec      	ldreq	r4, [r5, #12]
 8007a7a:	e7e6      	b.n	8007a4a <__swsetup_r+0x1e>
 8007a7c:	0751      	lsls	r1, r2, #29
 8007a7e:	d512      	bpl.n	8007aa6 <__swsetup_r+0x7a>
 8007a80:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a82:	b141      	cbz	r1, 8007a96 <__swsetup_r+0x6a>
 8007a84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a88:	4299      	cmp	r1, r3
 8007a8a:	d002      	beq.n	8007a92 <__swsetup_r+0x66>
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f7ff fe0b 	bl	80076a8 <_free_r>
 8007a92:	2300      	movs	r3, #0
 8007a94:	6363      	str	r3, [r4, #52]	; 0x34
 8007a96:	89a3      	ldrh	r3, [r4, #12]
 8007a98:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007a9c:	81a3      	strh	r3, [r4, #12]
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	6063      	str	r3, [r4, #4]
 8007aa2:	6923      	ldr	r3, [r4, #16]
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	89a3      	ldrh	r3, [r4, #12]
 8007aa8:	f043 0308 	orr.w	r3, r3, #8
 8007aac:	81a3      	strh	r3, [r4, #12]
 8007aae:	6923      	ldr	r3, [r4, #16]
 8007ab0:	b94b      	cbnz	r3, 8007ac6 <__swsetup_r+0x9a>
 8007ab2:	89a3      	ldrh	r3, [r4, #12]
 8007ab4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007abc:	d003      	beq.n	8007ac6 <__swsetup_r+0x9a>
 8007abe:	4621      	mov	r1, r4
 8007ac0:	4630      	mov	r0, r6
 8007ac2:	f000 f9c1 	bl	8007e48 <__smakebuf_r>
 8007ac6:	89a2      	ldrh	r2, [r4, #12]
 8007ac8:	f012 0301 	ands.w	r3, r2, #1
 8007acc:	d00c      	beq.n	8007ae8 <__swsetup_r+0xbc>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	60a3      	str	r3, [r4, #8]
 8007ad2:	6963      	ldr	r3, [r4, #20]
 8007ad4:	425b      	negs	r3, r3
 8007ad6:	61a3      	str	r3, [r4, #24]
 8007ad8:	6923      	ldr	r3, [r4, #16]
 8007ada:	b953      	cbnz	r3, 8007af2 <__swsetup_r+0xc6>
 8007adc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ae0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ae4:	d1ba      	bne.n	8007a5c <__swsetup_r+0x30>
 8007ae6:	bd70      	pop	{r4, r5, r6, pc}
 8007ae8:	0792      	lsls	r2, r2, #30
 8007aea:	bf58      	it	pl
 8007aec:	6963      	ldrpl	r3, [r4, #20]
 8007aee:	60a3      	str	r3, [r4, #8]
 8007af0:	e7f2      	b.n	8007ad8 <__swsetup_r+0xac>
 8007af2:	2000      	movs	r0, #0
 8007af4:	e7f7      	b.n	8007ae6 <__swsetup_r+0xba>
 8007af6:	bf00      	nop
 8007af8:	2000020c 	.word	0x2000020c
 8007afc:	080093f8 	.word	0x080093f8
 8007b00:	08009418 	.word	0x08009418
 8007b04:	080093d8 	.word	0x080093d8

08007b08 <__sflush_r>:
 8007b08:	898a      	ldrh	r2, [r1, #12]
 8007b0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b0e:	4605      	mov	r5, r0
 8007b10:	0710      	lsls	r0, r2, #28
 8007b12:	460c      	mov	r4, r1
 8007b14:	d45a      	bmi.n	8007bcc <__sflush_r+0xc4>
 8007b16:	684b      	ldr	r3, [r1, #4]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	dc05      	bgt.n	8007b28 <__sflush_r+0x20>
 8007b1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	dc02      	bgt.n	8007b28 <__sflush_r+0x20>
 8007b22:	2000      	movs	r0, #0
 8007b24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b2a:	2e00      	cmp	r6, #0
 8007b2c:	d0f9      	beq.n	8007b22 <__sflush_r+0x1a>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007b34:	682f      	ldr	r7, [r5, #0]
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	d033      	beq.n	8007ba2 <__sflush_r+0x9a>
 8007b3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007b3c:	89a3      	ldrh	r3, [r4, #12]
 8007b3e:	075a      	lsls	r2, r3, #29
 8007b40:	d505      	bpl.n	8007b4e <__sflush_r+0x46>
 8007b42:	6863      	ldr	r3, [r4, #4]
 8007b44:	1ac0      	subs	r0, r0, r3
 8007b46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007b48:	b10b      	cbz	r3, 8007b4e <__sflush_r+0x46>
 8007b4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007b4c:	1ac0      	subs	r0, r0, r3
 8007b4e:	2300      	movs	r3, #0
 8007b50:	4602      	mov	r2, r0
 8007b52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007b54:	6a21      	ldr	r1, [r4, #32]
 8007b56:	4628      	mov	r0, r5
 8007b58:	47b0      	blx	r6
 8007b5a:	1c43      	adds	r3, r0, #1
 8007b5c:	89a3      	ldrh	r3, [r4, #12]
 8007b5e:	d106      	bne.n	8007b6e <__sflush_r+0x66>
 8007b60:	6829      	ldr	r1, [r5, #0]
 8007b62:	291d      	cmp	r1, #29
 8007b64:	d84b      	bhi.n	8007bfe <__sflush_r+0xf6>
 8007b66:	4a2b      	ldr	r2, [pc, #172]	; (8007c14 <__sflush_r+0x10c>)
 8007b68:	40ca      	lsrs	r2, r1
 8007b6a:	07d6      	lsls	r6, r2, #31
 8007b6c:	d547      	bpl.n	8007bfe <__sflush_r+0xf6>
 8007b6e:	2200      	movs	r2, #0
 8007b70:	6062      	str	r2, [r4, #4]
 8007b72:	04d9      	lsls	r1, r3, #19
 8007b74:	6922      	ldr	r2, [r4, #16]
 8007b76:	6022      	str	r2, [r4, #0]
 8007b78:	d504      	bpl.n	8007b84 <__sflush_r+0x7c>
 8007b7a:	1c42      	adds	r2, r0, #1
 8007b7c:	d101      	bne.n	8007b82 <__sflush_r+0x7a>
 8007b7e:	682b      	ldr	r3, [r5, #0]
 8007b80:	b903      	cbnz	r3, 8007b84 <__sflush_r+0x7c>
 8007b82:	6560      	str	r0, [r4, #84]	; 0x54
 8007b84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b86:	602f      	str	r7, [r5, #0]
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	d0ca      	beq.n	8007b22 <__sflush_r+0x1a>
 8007b8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b90:	4299      	cmp	r1, r3
 8007b92:	d002      	beq.n	8007b9a <__sflush_r+0x92>
 8007b94:	4628      	mov	r0, r5
 8007b96:	f7ff fd87 	bl	80076a8 <_free_r>
 8007b9a:	2000      	movs	r0, #0
 8007b9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ba2:	6a21      	ldr	r1, [r4, #32]
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	47b0      	blx	r6
 8007baa:	1c41      	adds	r1, r0, #1
 8007bac:	d1c6      	bne.n	8007b3c <__sflush_r+0x34>
 8007bae:	682b      	ldr	r3, [r5, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0c3      	beq.n	8007b3c <__sflush_r+0x34>
 8007bb4:	2b1d      	cmp	r3, #29
 8007bb6:	d001      	beq.n	8007bbc <__sflush_r+0xb4>
 8007bb8:	2b16      	cmp	r3, #22
 8007bba:	d101      	bne.n	8007bc0 <__sflush_r+0xb8>
 8007bbc:	602f      	str	r7, [r5, #0]
 8007bbe:	e7b0      	b.n	8007b22 <__sflush_r+0x1a>
 8007bc0:	89a3      	ldrh	r3, [r4, #12]
 8007bc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bc6:	81a3      	strh	r3, [r4, #12]
 8007bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bcc:	690f      	ldr	r7, [r1, #16]
 8007bce:	2f00      	cmp	r7, #0
 8007bd0:	d0a7      	beq.n	8007b22 <__sflush_r+0x1a>
 8007bd2:	0793      	lsls	r3, r2, #30
 8007bd4:	680e      	ldr	r6, [r1, #0]
 8007bd6:	bf08      	it	eq
 8007bd8:	694b      	ldreq	r3, [r1, #20]
 8007bda:	600f      	str	r7, [r1, #0]
 8007bdc:	bf18      	it	ne
 8007bde:	2300      	movne	r3, #0
 8007be0:	eba6 0807 	sub.w	r8, r6, r7
 8007be4:	608b      	str	r3, [r1, #8]
 8007be6:	f1b8 0f00 	cmp.w	r8, #0
 8007bea:	dd9a      	ble.n	8007b22 <__sflush_r+0x1a>
 8007bec:	4643      	mov	r3, r8
 8007bee:	463a      	mov	r2, r7
 8007bf0:	6a21      	ldr	r1, [r4, #32]
 8007bf2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007bf4:	4628      	mov	r0, r5
 8007bf6:	47b0      	blx	r6
 8007bf8:	2800      	cmp	r0, #0
 8007bfa:	dc07      	bgt.n	8007c0c <__sflush_r+0x104>
 8007bfc:	89a3      	ldrh	r3, [r4, #12]
 8007bfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c02:	81a3      	strh	r3, [r4, #12]
 8007c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c0c:	4407      	add	r7, r0
 8007c0e:	eba8 0800 	sub.w	r8, r8, r0
 8007c12:	e7e8      	b.n	8007be6 <__sflush_r+0xde>
 8007c14:	20400001 	.word	0x20400001

08007c18 <_fflush_r>:
 8007c18:	b538      	push	{r3, r4, r5, lr}
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	4605      	mov	r5, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b1db      	cbz	r3, 8007c5a <_fflush_r+0x42>
 8007c22:	b118      	cbz	r0, 8007c2c <_fflush_r+0x14>
 8007c24:	6983      	ldr	r3, [r0, #24]
 8007c26:	b90b      	cbnz	r3, 8007c2c <_fflush_r+0x14>
 8007c28:	f000 f860 	bl	8007cec <__sinit>
 8007c2c:	4b0c      	ldr	r3, [pc, #48]	; (8007c60 <_fflush_r+0x48>)
 8007c2e:	429c      	cmp	r4, r3
 8007c30:	d109      	bne.n	8007c46 <_fflush_r+0x2e>
 8007c32:	686c      	ldr	r4, [r5, #4]
 8007c34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c38:	b17b      	cbz	r3, 8007c5a <_fflush_r+0x42>
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4628      	mov	r0, r5
 8007c3e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c42:	f7ff bf61 	b.w	8007b08 <__sflush_r>
 8007c46:	4b07      	ldr	r3, [pc, #28]	; (8007c64 <_fflush_r+0x4c>)
 8007c48:	429c      	cmp	r4, r3
 8007c4a:	d101      	bne.n	8007c50 <_fflush_r+0x38>
 8007c4c:	68ac      	ldr	r4, [r5, #8]
 8007c4e:	e7f1      	b.n	8007c34 <_fflush_r+0x1c>
 8007c50:	4b05      	ldr	r3, [pc, #20]	; (8007c68 <_fflush_r+0x50>)
 8007c52:	429c      	cmp	r4, r3
 8007c54:	bf08      	it	eq
 8007c56:	68ec      	ldreq	r4, [r5, #12]
 8007c58:	e7ec      	b.n	8007c34 <_fflush_r+0x1c>
 8007c5a:	2000      	movs	r0, #0
 8007c5c:	bd38      	pop	{r3, r4, r5, pc}
 8007c5e:	bf00      	nop
 8007c60:	080093f8 	.word	0x080093f8
 8007c64:	08009418 	.word	0x08009418
 8007c68:	080093d8 	.word	0x080093d8

08007c6c <_cleanup_r>:
 8007c6c:	4901      	ldr	r1, [pc, #4]	; (8007c74 <_cleanup_r+0x8>)
 8007c6e:	f000 b8a9 	b.w	8007dc4 <_fwalk_reent>
 8007c72:	bf00      	nop
 8007c74:	08007c19 	.word	0x08007c19

08007c78 <std.isra.0>:
 8007c78:	2300      	movs	r3, #0
 8007c7a:	b510      	push	{r4, lr}
 8007c7c:	4604      	mov	r4, r0
 8007c7e:	6003      	str	r3, [r0, #0]
 8007c80:	6043      	str	r3, [r0, #4]
 8007c82:	6083      	str	r3, [r0, #8]
 8007c84:	8181      	strh	r1, [r0, #12]
 8007c86:	6643      	str	r3, [r0, #100]	; 0x64
 8007c88:	81c2      	strh	r2, [r0, #14]
 8007c8a:	6103      	str	r3, [r0, #16]
 8007c8c:	6143      	str	r3, [r0, #20]
 8007c8e:	6183      	str	r3, [r0, #24]
 8007c90:	4619      	mov	r1, r3
 8007c92:	2208      	movs	r2, #8
 8007c94:	305c      	adds	r0, #92	; 0x5c
 8007c96:	f7ff fcff 	bl	8007698 <memset>
 8007c9a:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <std.isra.0+0x38>)
 8007c9c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c9e:	4b05      	ldr	r3, [pc, #20]	; (8007cb4 <std.isra.0+0x3c>)
 8007ca0:	62a3      	str	r3, [r4, #40]	; 0x28
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std.isra.0+0x40>)
 8007ca4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std.isra.0+0x44>)
 8007ca8:	6224      	str	r4, [r4, #32]
 8007caa:	6323      	str	r3, [r4, #48]	; 0x30
 8007cac:	bd10      	pop	{r4, pc}
 8007cae:	bf00      	nop
 8007cb0:	08008785 	.word	0x08008785
 8007cb4:	080087a7 	.word	0x080087a7
 8007cb8:	080087df 	.word	0x080087df
 8007cbc:	08008803 	.word	0x08008803

08007cc0 <__sfmoreglue>:
 8007cc0:	b570      	push	{r4, r5, r6, lr}
 8007cc2:	1e4a      	subs	r2, r1, #1
 8007cc4:	2568      	movs	r5, #104	; 0x68
 8007cc6:	4355      	muls	r5, r2
 8007cc8:	460e      	mov	r6, r1
 8007cca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007cce:	f7ff fd39 	bl	8007744 <_malloc_r>
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	b140      	cbz	r0, 8007ce8 <__sfmoreglue+0x28>
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	e880 0042 	stmia.w	r0, {r1, r6}
 8007cdc:	300c      	adds	r0, #12
 8007cde:	60a0      	str	r0, [r4, #8]
 8007ce0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007ce4:	f7ff fcd8 	bl	8007698 <memset>
 8007ce8:	4620      	mov	r0, r4
 8007cea:	bd70      	pop	{r4, r5, r6, pc}

08007cec <__sinit>:
 8007cec:	6983      	ldr	r3, [r0, #24]
 8007cee:	b510      	push	{r4, lr}
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	bb33      	cbnz	r3, 8007d42 <__sinit+0x56>
 8007cf4:	6483      	str	r3, [r0, #72]	; 0x48
 8007cf6:	64c3      	str	r3, [r0, #76]	; 0x4c
 8007cf8:	6503      	str	r3, [r0, #80]	; 0x50
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <__sinit+0x58>)
 8007cfc:	4a12      	ldr	r2, [pc, #72]	; (8007d48 <__sinit+0x5c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6282      	str	r2, [r0, #40]	; 0x28
 8007d02:	4298      	cmp	r0, r3
 8007d04:	bf04      	itt	eq
 8007d06:	2301      	moveq	r3, #1
 8007d08:	6183      	streq	r3, [r0, #24]
 8007d0a:	f000 f81f 	bl	8007d4c <__sfp>
 8007d0e:	6060      	str	r0, [r4, #4]
 8007d10:	4620      	mov	r0, r4
 8007d12:	f000 f81b 	bl	8007d4c <__sfp>
 8007d16:	60a0      	str	r0, [r4, #8]
 8007d18:	4620      	mov	r0, r4
 8007d1a:	f000 f817 	bl	8007d4c <__sfp>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	60e0      	str	r0, [r4, #12]
 8007d22:	2104      	movs	r1, #4
 8007d24:	6860      	ldr	r0, [r4, #4]
 8007d26:	f7ff ffa7 	bl	8007c78 <std.isra.0>
 8007d2a:	2201      	movs	r2, #1
 8007d2c:	2109      	movs	r1, #9
 8007d2e:	68a0      	ldr	r0, [r4, #8]
 8007d30:	f7ff ffa2 	bl	8007c78 <std.isra.0>
 8007d34:	2202      	movs	r2, #2
 8007d36:	2112      	movs	r1, #18
 8007d38:	68e0      	ldr	r0, [r4, #12]
 8007d3a:	f7ff ff9d 	bl	8007c78 <std.isra.0>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	61a3      	str	r3, [r4, #24]
 8007d42:	bd10      	pop	{r4, pc}
 8007d44:	080093d4 	.word	0x080093d4
 8007d48:	08007c6d 	.word	0x08007c6d

08007d4c <__sfp>:
 8007d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4e:	4b1c      	ldr	r3, [pc, #112]	; (8007dc0 <__sfp+0x74>)
 8007d50:	681e      	ldr	r6, [r3, #0]
 8007d52:	69b3      	ldr	r3, [r6, #24]
 8007d54:	4607      	mov	r7, r0
 8007d56:	b913      	cbnz	r3, 8007d5e <__sfp+0x12>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff ffc7 	bl	8007cec <__sinit>
 8007d5e:	3648      	adds	r6, #72	; 0x48
 8007d60:	68b4      	ldr	r4, [r6, #8]
 8007d62:	6873      	ldr	r3, [r6, #4]
 8007d64:	3b01      	subs	r3, #1
 8007d66:	d503      	bpl.n	8007d70 <__sfp+0x24>
 8007d68:	6833      	ldr	r3, [r6, #0]
 8007d6a:	b133      	cbz	r3, 8007d7a <__sfp+0x2e>
 8007d6c:	6836      	ldr	r6, [r6, #0]
 8007d6e:	e7f7      	b.n	8007d60 <__sfp+0x14>
 8007d70:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d74:	b16d      	cbz	r5, 8007d92 <__sfp+0x46>
 8007d76:	3468      	adds	r4, #104	; 0x68
 8007d78:	e7f4      	b.n	8007d64 <__sfp+0x18>
 8007d7a:	2104      	movs	r1, #4
 8007d7c:	4638      	mov	r0, r7
 8007d7e:	f7ff ff9f 	bl	8007cc0 <__sfmoreglue>
 8007d82:	6030      	str	r0, [r6, #0]
 8007d84:	2800      	cmp	r0, #0
 8007d86:	d1f1      	bne.n	8007d6c <__sfp+0x20>
 8007d88:	230c      	movs	r3, #12
 8007d8a:	603b      	str	r3, [r7, #0]
 8007d8c:	4604      	mov	r4, r0
 8007d8e:	4620      	mov	r0, r4
 8007d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007d96:	81e3      	strh	r3, [r4, #14]
 8007d98:	2301      	movs	r3, #1
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	6665      	str	r5, [r4, #100]	; 0x64
 8007d9e:	6025      	str	r5, [r4, #0]
 8007da0:	60a5      	str	r5, [r4, #8]
 8007da2:	6065      	str	r5, [r4, #4]
 8007da4:	6125      	str	r5, [r4, #16]
 8007da6:	6165      	str	r5, [r4, #20]
 8007da8:	61a5      	str	r5, [r4, #24]
 8007daa:	2208      	movs	r2, #8
 8007dac:	4629      	mov	r1, r5
 8007dae:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007db2:	f7ff fc71 	bl	8007698 <memset>
 8007db6:	6365      	str	r5, [r4, #52]	; 0x34
 8007db8:	63a5      	str	r5, [r4, #56]	; 0x38
 8007dba:	64a5      	str	r5, [r4, #72]	; 0x48
 8007dbc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8007dbe:	e7e6      	b.n	8007d8e <__sfp+0x42>
 8007dc0:	080093d4 	.word	0x080093d4

08007dc4 <_fwalk_reent>:
 8007dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dc8:	4680      	mov	r8, r0
 8007dca:	4689      	mov	r9, r1
 8007dcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007dd0:	2600      	movs	r6, #0
 8007dd2:	b914      	cbnz	r4, 8007dda <_fwalk_reent+0x16>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dda:	68a5      	ldr	r5, [r4, #8]
 8007ddc:	6867      	ldr	r7, [r4, #4]
 8007dde:	3f01      	subs	r7, #1
 8007de0:	d501      	bpl.n	8007de6 <_fwalk_reent+0x22>
 8007de2:	6824      	ldr	r4, [r4, #0]
 8007de4:	e7f5      	b.n	8007dd2 <_fwalk_reent+0xe>
 8007de6:	89ab      	ldrh	r3, [r5, #12]
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d907      	bls.n	8007dfc <_fwalk_reent+0x38>
 8007dec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007df0:	3301      	adds	r3, #1
 8007df2:	d003      	beq.n	8007dfc <_fwalk_reent+0x38>
 8007df4:	4629      	mov	r1, r5
 8007df6:	4640      	mov	r0, r8
 8007df8:	47c8      	blx	r9
 8007dfa:	4306      	orrs	r6, r0
 8007dfc:	3568      	adds	r5, #104	; 0x68
 8007dfe:	e7ee      	b.n	8007dde <_fwalk_reent+0x1a>

08007e00 <__swhatbuf_r>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	460e      	mov	r6, r1
 8007e04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e08:	2900      	cmp	r1, #0
 8007e0a:	b090      	sub	sp, #64	; 0x40
 8007e0c:	4614      	mov	r4, r2
 8007e0e:	461d      	mov	r5, r3
 8007e10:	da07      	bge.n	8007e22 <__swhatbuf_r+0x22>
 8007e12:	2300      	movs	r3, #0
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	89b3      	ldrh	r3, [r6, #12]
 8007e18:	061a      	lsls	r2, r3, #24
 8007e1a:	d410      	bmi.n	8007e3e <__swhatbuf_r+0x3e>
 8007e1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e20:	e00e      	b.n	8007e40 <__swhatbuf_r+0x40>
 8007e22:	aa01      	add	r2, sp, #4
 8007e24:	f000 fd14 	bl	8008850 <_fstat_r>
 8007e28:	2800      	cmp	r0, #0
 8007e2a:	dbf2      	blt.n	8007e12 <__swhatbuf_r+0x12>
 8007e2c:	9a02      	ldr	r2, [sp, #8]
 8007e2e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007e32:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007e36:	425a      	negs	r2, r3
 8007e38:	415a      	adcs	r2, r3
 8007e3a:	602a      	str	r2, [r5, #0]
 8007e3c:	e7ee      	b.n	8007e1c <__swhatbuf_r+0x1c>
 8007e3e:	2340      	movs	r3, #64	; 0x40
 8007e40:	2000      	movs	r0, #0
 8007e42:	6023      	str	r3, [r4, #0]
 8007e44:	b010      	add	sp, #64	; 0x40
 8007e46:	bd70      	pop	{r4, r5, r6, pc}

08007e48 <__smakebuf_r>:
 8007e48:	898b      	ldrh	r3, [r1, #12]
 8007e4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007e4c:	079d      	lsls	r5, r3, #30
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	d507      	bpl.n	8007e64 <__smakebuf_r+0x1c>
 8007e54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	6123      	str	r3, [r4, #16]
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	6163      	str	r3, [r4, #20]
 8007e60:	b002      	add	sp, #8
 8007e62:	bd70      	pop	{r4, r5, r6, pc}
 8007e64:	ab01      	add	r3, sp, #4
 8007e66:	466a      	mov	r2, sp
 8007e68:	f7ff ffca 	bl	8007e00 <__swhatbuf_r>
 8007e6c:	9900      	ldr	r1, [sp, #0]
 8007e6e:	4605      	mov	r5, r0
 8007e70:	4630      	mov	r0, r6
 8007e72:	f7ff fc67 	bl	8007744 <_malloc_r>
 8007e76:	b948      	cbnz	r0, 8007e8c <__smakebuf_r+0x44>
 8007e78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e7c:	059a      	lsls	r2, r3, #22
 8007e7e:	d4ef      	bmi.n	8007e60 <__smakebuf_r+0x18>
 8007e80:	f023 0303 	bic.w	r3, r3, #3
 8007e84:	f043 0302 	orr.w	r3, r3, #2
 8007e88:	81a3      	strh	r3, [r4, #12]
 8007e8a:	e7e3      	b.n	8007e54 <__smakebuf_r+0xc>
 8007e8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ec4 <__smakebuf_r+0x7c>)
 8007e8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e90:	89a3      	ldrh	r3, [r4, #12]
 8007e92:	6020      	str	r0, [r4, #0]
 8007e94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e98:	81a3      	strh	r3, [r4, #12]
 8007e9a:	9b00      	ldr	r3, [sp, #0]
 8007e9c:	6163      	str	r3, [r4, #20]
 8007e9e:	9b01      	ldr	r3, [sp, #4]
 8007ea0:	6120      	str	r0, [r4, #16]
 8007ea2:	b15b      	cbz	r3, 8007ebc <__smakebuf_r+0x74>
 8007ea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f000 fce3 	bl	8008874 <_isatty_r>
 8007eae:	b128      	cbz	r0, 8007ebc <__smakebuf_r+0x74>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	f023 0303 	bic.w	r3, r3, #3
 8007eb6:	f043 0301 	orr.w	r3, r3, #1
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	89a3      	ldrh	r3, [r4, #12]
 8007ebe:	431d      	orrs	r5, r3
 8007ec0:	81a5      	strh	r5, [r4, #12]
 8007ec2:	e7cd      	b.n	8007e60 <__smakebuf_r+0x18>
 8007ec4:	08007c6d 	.word	0x08007c6d

08007ec8 <__malloc_lock>:
 8007ec8:	4770      	bx	lr

08007eca <__malloc_unlock>:
 8007eca:	4770      	bx	lr

08007ecc <__ssputs_r>:
 8007ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ed0:	688e      	ldr	r6, [r1, #8]
 8007ed2:	429e      	cmp	r6, r3
 8007ed4:	4682      	mov	sl, r0
 8007ed6:	460c      	mov	r4, r1
 8007ed8:	4691      	mov	r9, r2
 8007eda:	4698      	mov	r8, r3
 8007edc:	d835      	bhi.n	8007f4a <__ssputs_r+0x7e>
 8007ede:	898a      	ldrh	r2, [r1, #12]
 8007ee0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007ee4:	d031      	beq.n	8007f4a <__ssputs_r+0x7e>
 8007ee6:	6825      	ldr	r5, [r4, #0]
 8007ee8:	6909      	ldr	r1, [r1, #16]
 8007eea:	1a6f      	subs	r7, r5, r1
 8007eec:	6965      	ldr	r5, [r4, #20]
 8007eee:	2302      	movs	r3, #2
 8007ef0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ef4:	fb95 f5f3 	sdiv	r5, r5, r3
 8007ef8:	f108 0301 	add.w	r3, r8, #1
 8007efc:	443b      	add	r3, r7
 8007efe:	429d      	cmp	r5, r3
 8007f00:	bf38      	it	cc
 8007f02:	461d      	movcc	r5, r3
 8007f04:	0553      	lsls	r3, r2, #21
 8007f06:	d531      	bpl.n	8007f6c <__ssputs_r+0xa0>
 8007f08:	4629      	mov	r1, r5
 8007f0a:	f7ff fc1b 	bl	8007744 <_malloc_r>
 8007f0e:	4606      	mov	r6, r0
 8007f10:	b950      	cbnz	r0, 8007f28 <__ssputs_r+0x5c>
 8007f12:	230c      	movs	r3, #12
 8007f14:	f8ca 3000 	str.w	r3, [sl]
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f1e:	81a3      	strh	r3, [r4, #12]
 8007f20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f28:	463a      	mov	r2, r7
 8007f2a:	6921      	ldr	r1, [r4, #16]
 8007f2c:	f7ff fba9 	bl	8007682 <memcpy>
 8007f30:	89a3      	ldrh	r3, [r4, #12]
 8007f32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007f36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007f3a:	81a3      	strh	r3, [r4, #12]
 8007f3c:	6126      	str	r6, [r4, #16]
 8007f3e:	6165      	str	r5, [r4, #20]
 8007f40:	443e      	add	r6, r7
 8007f42:	1bed      	subs	r5, r5, r7
 8007f44:	6026      	str	r6, [r4, #0]
 8007f46:	60a5      	str	r5, [r4, #8]
 8007f48:	4646      	mov	r6, r8
 8007f4a:	4546      	cmp	r6, r8
 8007f4c:	bf28      	it	cs
 8007f4e:	4646      	movcs	r6, r8
 8007f50:	4632      	mov	r2, r6
 8007f52:	4649      	mov	r1, r9
 8007f54:	6820      	ldr	r0, [r4, #0]
 8007f56:	f000 fcaf 	bl	80088b8 <memmove>
 8007f5a:	68a3      	ldr	r3, [r4, #8]
 8007f5c:	1b9b      	subs	r3, r3, r6
 8007f5e:	60a3      	str	r3, [r4, #8]
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	441e      	add	r6, r3
 8007f64:	6026      	str	r6, [r4, #0]
 8007f66:	2000      	movs	r0, #0
 8007f68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f6c:	462a      	mov	r2, r5
 8007f6e:	f000 fcbd 	bl	80088ec <_realloc_r>
 8007f72:	4606      	mov	r6, r0
 8007f74:	2800      	cmp	r0, #0
 8007f76:	d1e1      	bne.n	8007f3c <__ssputs_r+0x70>
 8007f78:	6921      	ldr	r1, [r4, #16]
 8007f7a:	4650      	mov	r0, sl
 8007f7c:	f7ff fb94 	bl	80076a8 <_free_r>
 8007f80:	e7c7      	b.n	8007f12 <__ssputs_r+0x46>
	...

08007f84 <_svfiprintf_r>:
 8007f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	b09d      	sub	sp, #116	; 0x74
 8007f8a:	4680      	mov	r8, r0
 8007f8c:	9303      	str	r3, [sp, #12]
 8007f8e:	898b      	ldrh	r3, [r1, #12]
 8007f90:	061c      	lsls	r4, r3, #24
 8007f92:	460d      	mov	r5, r1
 8007f94:	4616      	mov	r6, r2
 8007f96:	d50f      	bpl.n	8007fb8 <_svfiprintf_r+0x34>
 8007f98:	690b      	ldr	r3, [r1, #16]
 8007f9a:	b96b      	cbnz	r3, 8007fb8 <_svfiprintf_r+0x34>
 8007f9c:	2140      	movs	r1, #64	; 0x40
 8007f9e:	f7ff fbd1 	bl	8007744 <_malloc_r>
 8007fa2:	6028      	str	r0, [r5, #0]
 8007fa4:	6128      	str	r0, [r5, #16]
 8007fa6:	b928      	cbnz	r0, 8007fb4 <_svfiprintf_r+0x30>
 8007fa8:	230c      	movs	r3, #12
 8007faa:	f8c8 3000 	str.w	r3, [r8]
 8007fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fb2:	e0c5      	b.n	8008140 <_svfiprintf_r+0x1bc>
 8007fb4:	2340      	movs	r3, #64	; 0x40
 8007fb6:	616b      	str	r3, [r5, #20]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	9309      	str	r3, [sp, #36]	; 0x24
 8007fbc:	2320      	movs	r3, #32
 8007fbe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007fc2:	2330      	movs	r3, #48	; 0x30
 8007fc4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007fc8:	f04f 0b01 	mov.w	fp, #1
 8007fcc:	4637      	mov	r7, r6
 8007fce:	463c      	mov	r4, r7
 8007fd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d13c      	bne.n	8008052 <_svfiprintf_r+0xce>
 8007fd8:	ebb7 0a06 	subs.w	sl, r7, r6
 8007fdc:	d00b      	beq.n	8007ff6 <_svfiprintf_r+0x72>
 8007fde:	4653      	mov	r3, sl
 8007fe0:	4632      	mov	r2, r6
 8007fe2:	4629      	mov	r1, r5
 8007fe4:	4640      	mov	r0, r8
 8007fe6:	f7ff ff71 	bl	8007ecc <__ssputs_r>
 8007fea:	3001      	adds	r0, #1
 8007fec:	f000 80a3 	beq.w	8008136 <_svfiprintf_r+0x1b2>
 8007ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ff2:	4453      	add	r3, sl
 8007ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8007ff6:	783b      	ldrb	r3, [r7, #0]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 809c 	beq.w	8008136 <_svfiprintf_r+0x1b2>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008004:	9304      	str	r3, [sp, #16]
 8008006:	9307      	str	r3, [sp, #28]
 8008008:	9205      	str	r2, [sp, #20]
 800800a:	9306      	str	r3, [sp, #24]
 800800c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008010:	931a      	str	r3, [sp, #104]	; 0x68
 8008012:	2205      	movs	r2, #5
 8008014:	7821      	ldrb	r1, [r4, #0]
 8008016:	4850      	ldr	r0, [pc, #320]	; (8008158 <_svfiprintf_r+0x1d4>)
 8008018:	f7f8 f8fa 	bl	8000210 <memchr>
 800801c:	1c67      	adds	r7, r4, #1
 800801e:	9b04      	ldr	r3, [sp, #16]
 8008020:	b9d8      	cbnz	r0, 800805a <_svfiprintf_r+0xd6>
 8008022:	06d9      	lsls	r1, r3, #27
 8008024:	bf44      	itt	mi
 8008026:	2220      	movmi	r2, #32
 8008028:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800802c:	071a      	lsls	r2, r3, #28
 800802e:	bf44      	itt	mi
 8008030:	222b      	movmi	r2, #43	; 0x2b
 8008032:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008036:	7822      	ldrb	r2, [r4, #0]
 8008038:	2a2a      	cmp	r2, #42	; 0x2a
 800803a:	d016      	beq.n	800806a <_svfiprintf_r+0xe6>
 800803c:	9a07      	ldr	r2, [sp, #28]
 800803e:	2100      	movs	r1, #0
 8008040:	200a      	movs	r0, #10
 8008042:	4627      	mov	r7, r4
 8008044:	3401      	adds	r4, #1
 8008046:	783b      	ldrb	r3, [r7, #0]
 8008048:	3b30      	subs	r3, #48	; 0x30
 800804a:	2b09      	cmp	r3, #9
 800804c:	d951      	bls.n	80080f2 <_svfiprintf_r+0x16e>
 800804e:	b1c9      	cbz	r1, 8008084 <_svfiprintf_r+0x100>
 8008050:	e011      	b.n	8008076 <_svfiprintf_r+0xf2>
 8008052:	2b25      	cmp	r3, #37	; 0x25
 8008054:	d0c0      	beq.n	8007fd8 <_svfiprintf_r+0x54>
 8008056:	4627      	mov	r7, r4
 8008058:	e7b9      	b.n	8007fce <_svfiprintf_r+0x4a>
 800805a:	4a3f      	ldr	r2, [pc, #252]	; (8008158 <_svfiprintf_r+0x1d4>)
 800805c:	1a80      	subs	r0, r0, r2
 800805e:	fa0b f000 	lsl.w	r0, fp, r0
 8008062:	4318      	orrs	r0, r3
 8008064:	9004      	str	r0, [sp, #16]
 8008066:	463c      	mov	r4, r7
 8008068:	e7d3      	b.n	8008012 <_svfiprintf_r+0x8e>
 800806a:	9a03      	ldr	r2, [sp, #12]
 800806c:	1d11      	adds	r1, r2, #4
 800806e:	6812      	ldr	r2, [r2, #0]
 8008070:	9103      	str	r1, [sp, #12]
 8008072:	2a00      	cmp	r2, #0
 8008074:	db01      	blt.n	800807a <_svfiprintf_r+0xf6>
 8008076:	9207      	str	r2, [sp, #28]
 8008078:	e004      	b.n	8008084 <_svfiprintf_r+0x100>
 800807a:	4252      	negs	r2, r2
 800807c:	f043 0302 	orr.w	r3, r3, #2
 8008080:	9207      	str	r2, [sp, #28]
 8008082:	9304      	str	r3, [sp, #16]
 8008084:	783b      	ldrb	r3, [r7, #0]
 8008086:	2b2e      	cmp	r3, #46	; 0x2e
 8008088:	d10e      	bne.n	80080a8 <_svfiprintf_r+0x124>
 800808a:	787b      	ldrb	r3, [r7, #1]
 800808c:	2b2a      	cmp	r3, #42	; 0x2a
 800808e:	f107 0101 	add.w	r1, r7, #1
 8008092:	d132      	bne.n	80080fa <_svfiprintf_r+0x176>
 8008094:	9b03      	ldr	r3, [sp, #12]
 8008096:	1d1a      	adds	r2, r3, #4
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	9203      	str	r2, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	bfb8      	it	lt
 80080a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80080a4:	3702      	adds	r7, #2
 80080a6:	9305      	str	r3, [sp, #20]
 80080a8:	4c2c      	ldr	r4, [pc, #176]	; (800815c <_svfiprintf_r+0x1d8>)
 80080aa:	7839      	ldrb	r1, [r7, #0]
 80080ac:	2203      	movs	r2, #3
 80080ae:	4620      	mov	r0, r4
 80080b0:	f7f8 f8ae 	bl	8000210 <memchr>
 80080b4:	b138      	cbz	r0, 80080c6 <_svfiprintf_r+0x142>
 80080b6:	2340      	movs	r3, #64	; 0x40
 80080b8:	1b00      	subs	r0, r0, r4
 80080ba:	fa03 f000 	lsl.w	r0, r3, r0
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	4303      	orrs	r3, r0
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	3701      	adds	r7, #1
 80080c6:	7839      	ldrb	r1, [r7, #0]
 80080c8:	4825      	ldr	r0, [pc, #148]	; (8008160 <_svfiprintf_r+0x1dc>)
 80080ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80080ce:	2206      	movs	r2, #6
 80080d0:	1c7e      	adds	r6, r7, #1
 80080d2:	f7f8 f89d 	bl	8000210 <memchr>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d035      	beq.n	8008146 <_svfiprintf_r+0x1c2>
 80080da:	4b22      	ldr	r3, [pc, #136]	; (8008164 <_svfiprintf_r+0x1e0>)
 80080dc:	b9fb      	cbnz	r3, 800811e <_svfiprintf_r+0x19a>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	f023 0307 	bic.w	r3, r3, #7
 80080e6:	3308      	adds	r3, #8
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080ec:	444b      	add	r3, r9
 80080ee:	9309      	str	r3, [sp, #36]	; 0x24
 80080f0:	e76c      	b.n	8007fcc <_svfiprintf_r+0x48>
 80080f2:	fb00 3202 	mla	r2, r0, r2, r3
 80080f6:	2101      	movs	r1, #1
 80080f8:	e7a3      	b.n	8008042 <_svfiprintf_r+0xbe>
 80080fa:	2300      	movs	r3, #0
 80080fc:	9305      	str	r3, [sp, #20]
 80080fe:	4618      	mov	r0, r3
 8008100:	240a      	movs	r4, #10
 8008102:	460f      	mov	r7, r1
 8008104:	3101      	adds	r1, #1
 8008106:	783a      	ldrb	r2, [r7, #0]
 8008108:	3a30      	subs	r2, #48	; 0x30
 800810a:	2a09      	cmp	r2, #9
 800810c:	d903      	bls.n	8008116 <_svfiprintf_r+0x192>
 800810e:	2b00      	cmp	r3, #0
 8008110:	d0ca      	beq.n	80080a8 <_svfiprintf_r+0x124>
 8008112:	9005      	str	r0, [sp, #20]
 8008114:	e7c8      	b.n	80080a8 <_svfiprintf_r+0x124>
 8008116:	fb04 2000 	mla	r0, r4, r0, r2
 800811a:	2301      	movs	r3, #1
 800811c:	e7f1      	b.n	8008102 <_svfiprintf_r+0x17e>
 800811e:	ab03      	add	r3, sp, #12
 8008120:	9300      	str	r3, [sp, #0]
 8008122:	462a      	mov	r2, r5
 8008124:	4b10      	ldr	r3, [pc, #64]	; (8008168 <_svfiprintf_r+0x1e4>)
 8008126:	a904      	add	r1, sp, #16
 8008128:	4640      	mov	r0, r8
 800812a:	f3af 8000 	nop.w
 800812e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8008132:	4681      	mov	r9, r0
 8008134:	d1d9      	bne.n	80080ea <_svfiprintf_r+0x166>
 8008136:	89ab      	ldrh	r3, [r5, #12]
 8008138:	065b      	lsls	r3, r3, #25
 800813a:	f53f af38 	bmi.w	8007fae <_svfiprintf_r+0x2a>
 800813e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008140:	b01d      	add	sp, #116	; 0x74
 8008142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008146:	ab03      	add	r3, sp, #12
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	462a      	mov	r2, r5
 800814c:	4b06      	ldr	r3, [pc, #24]	; (8008168 <_svfiprintf_r+0x1e4>)
 800814e:	a904      	add	r1, sp, #16
 8008150:	4640      	mov	r0, r8
 8008152:	f000 f9c1 	bl	80084d8 <_printf_i>
 8008156:	e7ea      	b.n	800812e <_svfiprintf_r+0x1aa>
 8008158:	08009438 	.word	0x08009438
 800815c:	0800943e 	.word	0x0800943e
 8008160:	08009442 	.word	0x08009442
 8008164:	00000000 	.word	0x00000000
 8008168:	08007ecd 	.word	0x08007ecd

0800816c <__sfputc_r>:
 800816c:	6893      	ldr	r3, [r2, #8]
 800816e:	3b01      	subs	r3, #1
 8008170:	2b00      	cmp	r3, #0
 8008172:	b410      	push	{r4}
 8008174:	6093      	str	r3, [r2, #8]
 8008176:	da09      	bge.n	800818c <__sfputc_r+0x20>
 8008178:	6994      	ldr	r4, [r2, #24]
 800817a:	42a3      	cmp	r3, r4
 800817c:	db02      	blt.n	8008184 <__sfputc_r+0x18>
 800817e:	b2cb      	uxtb	r3, r1
 8008180:	2b0a      	cmp	r3, #10
 8008182:	d103      	bne.n	800818c <__sfputc_r+0x20>
 8008184:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008188:	f7ff bbfe 	b.w	8007988 <__swbuf_r>
 800818c:	6813      	ldr	r3, [r2, #0]
 800818e:	1c58      	adds	r0, r3, #1
 8008190:	6010      	str	r0, [r2, #0]
 8008192:	7019      	strb	r1, [r3, #0]
 8008194:	b2c8      	uxtb	r0, r1
 8008196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800819a:	4770      	bx	lr

0800819c <__sfputs_r>:
 800819c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800819e:	4606      	mov	r6, r0
 80081a0:	460f      	mov	r7, r1
 80081a2:	4614      	mov	r4, r2
 80081a4:	18d5      	adds	r5, r2, r3
 80081a6:	42ac      	cmp	r4, r5
 80081a8:	d101      	bne.n	80081ae <__sfputs_r+0x12>
 80081aa:	2000      	movs	r0, #0
 80081ac:	e007      	b.n	80081be <__sfputs_r+0x22>
 80081ae:	463a      	mov	r2, r7
 80081b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081b4:	4630      	mov	r0, r6
 80081b6:	f7ff ffd9 	bl	800816c <__sfputc_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d1f3      	bne.n	80081a6 <__sfputs_r+0xa>
 80081be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080081c0 <_vfiprintf_r>:
 80081c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	b09d      	sub	sp, #116	; 0x74
 80081c6:	460c      	mov	r4, r1
 80081c8:	4617      	mov	r7, r2
 80081ca:	9303      	str	r3, [sp, #12]
 80081cc:	4606      	mov	r6, r0
 80081ce:	b118      	cbz	r0, 80081d8 <_vfiprintf_r+0x18>
 80081d0:	6983      	ldr	r3, [r0, #24]
 80081d2:	b90b      	cbnz	r3, 80081d8 <_vfiprintf_r+0x18>
 80081d4:	f7ff fd8a 	bl	8007cec <__sinit>
 80081d8:	4b7c      	ldr	r3, [pc, #496]	; (80083cc <_vfiprintf_r+0x20c>)
 80081da:	429c      	cmp	r4, r3
 80081dc:	d157      	bne.n	800828e <_vfiprintf_r+0xce>
 80081de:	6874      	ldr	r4, [r6, #4]
 80081e0:	89a3      	ldrh	r3, [r4, #12]
 80081e2:	0718      	lsls	r0, r3, #28
 80081e4:	d55d      	bpl.n	80082a2 <_vfiprintf_r+0xe2>
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d05a      	beq.n	80082a2 <_vfiprintf_r+0xe2>
 80081ec:	2300      	movs	r3, #0
 80081ee:	9309      	str	r3, [sp, #36]	; 0x24
 80081f0:	2320      	movs	r3, #32
 80081f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081f6:	2330      	movs	r3, #48	; 0x30
 80081f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081fc:	f04f 0b01 	mov.w	fp, #1
 8008200:	46b8      	mov	r8, r7
 8008202:	4645      	mov	r5, r8
 8008204:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008208:	2b00      	cmp	r3, #0
 800820a:	d155      	bne.n	80082b8 <_vfiprintf_r+0xf8>
 800820c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008210:	d00b      	beq.n	800822a <_vfiprintf_r+0x6a>
 8008212:	4653      	mov	r3, sl
 8008214:	463a      	mov	r2, r7
 8008216:	4621      	mov	r1, r4
 8008218:	4630      	mov	r0, r6
 800821a:	f7ff ffbf 	bl	800819c <__sfputs_r>
 800821e:	3001      	adds	r0, #1
 8008220:	f000 80c4 	beq.w	80083ac <_vfiprintf_r+0x1ec>
 8008224:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008226:	4453      	add	r3, sl
 8008228:	9309      	str	r3, [sp, #36]	; 0x24
 800822a:	f898 3000 	ldrb.w	r3, [r8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 80bc 	beq.w	80083ac <_vfiprintf_r+0x1ec>
 8008234:	2300      	movs	r3, #0
 8008236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	9205      	str	r2, [sp, #20]
 8008240:	9306      	str	r3, [sp, #24]
 8008242:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008246:	931a      	str	r3, [sp, #104]	; 0x68
 8008248:	2205      	movs	r2, #5
 800824a:	7829      	ldrb	r1, [r5, #0]
 800824c:	4860      	ldr	r0, [pc, #384]	; (80083d0 <_vfiprintf_r+0x210>)
 800824e:	f7f7 ffdf 	bl	8000210 <memchr>
 8008252:	f105 0801 	add.w	r8, r5, #1
 8008256:	9b04      	ldr	r3, [sp, #16]
 8008258:	2800      	cmp	r0, #0
 800825a:	d131      	bne.n	80082c0 <_vfiprintf_r+0x100>
 800825c:	06d9      	lsls	r1, r3, #27
 800825e:	bf44      	itt	mi
 8008260:	2220      	movmi	r2, #32
 8008262:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008266:	071a      	lsls	r2, r3, #28
 8008268:	bf44      	itt	mi
 800826a:	222b      	movmi	r2, #43	; 0x2b
 800826c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8008270:	782a      	ldrb	r2, [r5, #0]
 8008272:	2a2a      	cmp	r2, #42	; 0x2a
 8008274:	d02c      	beq.n	80082d0 <_vfiprintf_r+0x110>
 8008276:	9a07      	ldr	r2, [sp, #28]
 8008278:	2100      	movs	r1, #0
 800827a:	200a      	movs	r0, #10
 800827c:	46a8      	mov	r8, r5
 800827e:	3501      	adds	r5, #1
 8008280:	f898 3000 	ldrb.w	r3, [r8]
 8008284:	3b30      	subs	r3, #48	; 0x30
 8008286:	2b09      	cmp	r3, #9
 8008288:	d96d      	bls.n	8008366 <_vfiprintf_r+0x1a6>
 800828a:	b371      	cbz	r1, 80082ea <_vfiprintf_r+0x12a>
 800828c:	e026      	b.n	80082dc <_vfiprintf_r+0x11c>
 800828e:	4b51      	ldr	r3, [pc, #324]	; (80083d4 <_vfiprintf_r+0x214>)
 8008290:	429c      	cmp	r4, r3
 8008292:	d101      	bne.n	8008298 <_vfiprintf_r+0xd8>
 8008294:	68b4      	ldr	r4, [r6, #8]
 8008296:	e7a3      	b.n	80081e0 <_vfiprintf_r+0x20>
 8008298:	4b4f      	ldr	r3, [pc, #316]	; (80083d8 <_vfiprintf_r+0x218>)
 800829a:	429c      	cmp	r4, r3
 800829c:	bf08      	it	eq
 800829e:	68f4      	ldreq	r4, [r6, #12]
 80082a0:	e79e      	b.n	80081e0 <_vfiprintf_r+0x20>
 80082a2:	4621      	mov	r1, r4
 80082a4:	4630      	mov	r0, r6
 80082a6:	f7ff fbc1 	bl	8007a2c <__swsetup_r>
 80082aa:	2800      	cmp	r0, #0
 80082ac:	d09e      	beq.n	80081ec <_vfiprintf_r+0x2c>
 80082ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80082b2:	b01d      	add	sp, #116	; 0x74
 80082b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082b8:	2b25      	cmp	r3, #37	; 0x25
 80082ba:	d0a7      	beq.n	800820c <_vfiprintf_r+0x4c>
 80082bc:	46a8      	mov	r8, r5
 80082be:	e7a0      	b.n	8008202 <_vfiprintf_r+0x42>
 80082c0:	4a43      	ldr	r2, [pc, #268]	; (80083d0 <_vfiprintf_r+0x210>)
 80082c2:	1a80      	subs	r0, r0, r2
 80082c4:	fa0b f000 	lsl.w	r0, fp, r0
 80082c8:	4318      	orrs	r0, r3
 80082ca:	9004      	str	r0, [sp, #16]
 80082cc:	4645      	mov	r5, r8
 80082ce:	e7bb      	b.n	8008248 <_vfiprintf_r+0x88>
 80082d0:	9a03      	ldr	r2, [sp, #12]
 80082d2:	1d11      	adds	r1, r2, #4
 80082d4:	6812      	ldr	r2, [r2, #0]
 80082d6:	9103      	str	r1, [sp, #12]
 80082d8:	2a00      	cmp	r2, #0
 80082da:	db01      	blt.n	80082e0 <_vfiprintf_r+0x120>
 80082dc:	9207      	str	r2, [sp, #28]
 80082de:	e004      	b.n	80082ea <_vfiprintf_r+0x12a>
 80082e0:	4252      	negs	r2, r2
 80082e2:	f043 0302 	orr.w	r3, r3, #2
 80082e6:	9207      	str	r2, [sp, #28]
 80082e8:	9304      	str	r3, [sp, #16]
 80082ea:	f898 3000 	ldrb.w	r3, [r8]
 80082ee:	2b2e      	cmp	r3, #46	; 0x2e
 80082f0:	d110      	bne.n	8008314 <_vfiprintf_r+0x154>
 80082f2:	f898 3001 	ldrb.w	r3, [r8, #1]
 80082f6:	2b2a      	cmp	r3, #42	; 0x2a
 80082f8:	f108 0101 	add.w	r1, r8, #1
 80082fc:	d137      	bne.n	800836e <_vfiprintf_r+0x1ae>
 80082fe:	9b03      	ldr	r3, [sp, #12]
 8008300:	1d1a      	adds	r2, r3, #4
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	9203      	str	r2, [sp, #12]
 8008306:	2b00      	cmp	r3, #0
 8008308:	bfb8      	it	lt
 800830a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800830e:	f108 0802 	add.w	r8, r8, #2
 8008312:	9305      	str	r3, [sp, #20]
 8008314:	4d31      	ldr	r5, [pc, #196]	; (80083dc <_vfiprintf_r+0x21c>)
 8008316:	f898 1000 	ldrb.w	r1, [r8]
 800831a:	2203      	movs	r2, #3
 800831c:	4628      	mov	r0, r5
 800831e:	f7f7 ff77 	bl	8000210 <memchr>
 8008322:	b140      	cbz	r0, 8008336 <_vfiprintf_r+0x176>
 8008324:	2340      	movs	r3, #64	; 0x40
 8008326:	1b40      	subs	r0, r0, r5
 8008328:	fa03 f000 	lsl.w	r0, r3, r0
 800832c:	9b04      	ldr	r3, [sp, #16]
 800832e:	4303      	orrs	r3, r0
 8008330:	9304      	str	r3, [sp, #16]
 8008332:	f108 0801 	add.w	r8, r8, #1
 8008336:	f898 1000 	ldrb.w	r1, [r8]
 800833a:	4829      	ldr	r0, [pc, #164]	; (80083e0 <_vfiprintf_r+0x220>)
 800833c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008340:	2206      	movs	r2, #6
 8008342:	f108 0701 	add.w	r7, r8, #1
 8008346:	f7f7 ff63 	bl	8000210 <memchr>
 800834a:	2800      	cmp	r0, #0
 800834c:	d034      	beq.n	80083b8 <_vfiprintf_r+0x1f8>
 800834e:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <_vfiprintf_r+0x224>)
 8008350:	bb03      	cbnz	r3, 8008394 <_vfiprintf_r+0x1d4>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	3307      	adds	r3, #7
 8008356:	f023 0307 	bic.w	r3, r3, #7
 800835a:	3308      	adds	r3, #8
 800835c:	9303      	str	r3, [sp, #12]
 800835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008360:	444b      	add	r3, r9
 8008362:	9309      	str	r3, [sp, #36]	; 0x24
 8008364:	e74c      	b.n	8008200 <_vfiprintf_r+0x40>
 8008366:	fb00 3202 	mla	r2, r0, r2, r3
 800836a:	2101      	movs	r1, #1
 800836c:	e786      	b.n	800827c <_vfiprintf_r+0xbc>
 800836e:	2300      	movs	r3, #0
 8008370:	9305      	str	r3, [sp, #20]
 8008372:	4618      	mov	r0, r3
 8008374:	250a      	movs	r5, #10
 8008376:	4688      	mov	r8, r1
 8008378:	3101      	adds	r1, #1
 800837a:	f898 2000 	ldrb.w	r2, [r8]
 800837e:	3a30      	subs	r2, #48	; 0x30
 8008380:	2a09      	cmp	r2, #9
 8008382:	d903      	bls.n	800838c <_vfiprintf_r+0x1cc>
 8008384:	2b00      	cmp	r3, #0
 8008386:	d0c5      	beq.n	8008314 <_vfiprintf_r+0x154>
 8008388:	9005      	str	r0, [sp, #20]
 800838a:	e7c3      	b.n	8008314 <_vfiprintf_r+0x154>
 800838c:	fb05 2000 	mla	r0, r5, r0, r2
 8008390:	2301      	movs	r3, #1
 8008392:	e7f0      	b.n	8008376 <_vfiprintf_r+0x1b6>
 8008394:	ab03      	add	r3, sp, #12
 8008396:	9300      	str	r3, [sp, #0]
 8008398:	4622      	mov	r2, r4
 800839a:	4b13      	ldr	r3, [pc, #76]	; (80083e8 <_vfiprintf_r+0x228>)
 800839c:	a904      	add	r1, sp, #16
 800839e:	4630      	mov	r0, r6
 80083a0:	f3af 8000 	nop.w
 80083a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80083a8:	4681      	mov	r9, r0
 80083aa:	d1d8      	bne.n	800835e <_vfiprintf_r+0x19e>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	065b      	lsls	r3, r3, #25
 80083b0:	f53f af7d 	bmi.w	80082ae <_vfiprintf_r+0xee>
 80083b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083b6:	e77c      	b.n	80082b2 <_vfiprintf_r+0xf2>
 80083b8:	ab03      	add	r3, sp, #12
 80083ba:	9300      	str	r3, [sp, #0]
 80083bc:	4622      	mov	r2, r4
 80083be:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <_vfiprintf_r+0x228>)
 80083c0:	a904      	add	r1, sp, #16
 80083c2:	4630      	mov	r0, r6
 80083c4:	f000 f888 	bl	80084d8 <_printf_i>
 80083c8:	e7ec      	b.n	80083a4 <_vfiprintf_r+0x1e4>
 80083ca:	bf00      	nop
 80083cc:	080093f8 	.word	0x080093f8
 80083d0:	08009438 	.word	0x08009438
 80083d4:	08009418 	.word	0x08009418
 80083d8:	080093d8 	.word	0x080093d8
 80083dc:	0800943e 	.word	0x0800943e
 80083e0:	08009442 	.word	0x08009442
 80083e4:	00000000 	.word	0x00000000
 80083e8:	0800819d 	.word	0x0800819d

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4691      	mov	r9, r2
 80083f2:	461f      	mov	r7, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	f8c9 3000 	str.w	r3, [r9]
 8008406:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800840a:	4606      	mov	r6, r0
 800840c:	460c      	mov	r4, r1
 800840e:	b112      	cbz	r2, 8008416 <_printf_common+0x2a>
 8008410:	3301      	adds	r3, #1
 8008412:	f8c9 3000 	str.w	r3, [r9]
 8008416:	6823      	ldr	r3, [r4, #0]
 8008418:	0699      	lsls	r1, r3, #26
 800841a:	bf42      	ittt	mi
 800841c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008420:	3302      	addmi	r3, #2
 8008422:	f8c9 3000 	strmi.w	r3, [r9]
 8008426:	6825      	ldr	r5, [r4, #0]
 8008428:	f015 0506 	ands.w	r5, r5, #6
 800842c:	d107      	bne.n	800843e <_printf_common+0x52>
 800842e:	f104 0a19 	add.w	sl, r4, #25
 8008432:	68e3      	ldr	r3, [r4, #12]
 8008434:	f8d9 2000 	ldr.w	r2, [r9]
 8008438:	1a9b      	subs	r3, r3, r2
 800843a:	429d      	cmp	r5, r3
 800843c:	db29      	blt.n	8008492 <_printf_common+0xa6>
 800843e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008442:	6822      	ldr	r2, [r4, #0]
 8008444:	3300      	adds	r3, #0
 8008446:	bf18      	it	ne
 8008448:	2301      	movne	r3, #1
 800844a:	0692      	lsls	r2, r2, #26
 800844c:	d42e      	bmi.n	80084ac <_printf_common+0xc0>
 800844e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008452:	4639      	mov	r1, r7
 8008454:	4630      	mov	r0, r6
 8008456:	47c0      	blx	r8
 8008458:	3001      	adds	r0, #1
 800845a:	d021      	beq.n	80084a0 <_printf_common+0xb4>
 800845c:	6823      	ldr	r3, [r4, #0]
 800845e:	68e5      	ldr	r5, [r4, #12]
 8008460:	f8d9 2000 	ldr.w	r2, [r9]
 8008464:	f003 0306 	and.w	r3, r3, #6
 8008468:	2b04      	cmp	r3, #4
 800846a:	bf08      	it	eq
 800846c:	1aad      	subeq	r5, r5, r2
 800846e:	68a3      	ldr	r3, [r4, #8]
 8008470:	6922      	ldr	r2, [r4, #16]
 8008472:	bf0c      	ite	eq
 8008474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008478:	2500      	movne	r5, #0
 800847a:	4293      	cmp	r3, r2
 800847c:	bfc4      	itt	gt
 800847e:	1a9b      	subgt	r3, r3, r2
 8008480:	18ed      	addgt	r5, r5, r3
 8008482:	f04f 0900 	mov.w	r9, #0
 8008486:	341a      	adds	r4, #26
 8008488:	454d      	cmp	r5, r9
 800848a:	d11b      	bne.n	80084c4 <_printf_common+0xd8>
 800848c:	2000      	movs	r0, #0
 800848e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008492:	2301      	movs	r3, #1
 8008494:	4652      	mov	r2, sl
 8008496:	4639      	mov	r1, r7
 8008498:	4630      	mov	r0, r6
 800849a:	47c0      	blx	r8
 800849c:	3001      	adds	r0, #1
 800849e:	d103      	bne.n	80084a8 <_printf_common+0xbc>
 80084a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a8:	3501      	adds	r5, #1
 80084aa:	e7c2      	b.n	8008432 <_printf_common+0x46>
 80084ac:	18e1      	adds	r1, r4, r3
 80084ae:	1c5a      	adds	r2, r3, #1
 80084b0:	2030      	movs	r0, #48	; 0x30
 80084b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084b6:	4422      	add	r2, r4
 80084b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084c0:	3302      	adds	r3, #2
 80084c2:	e7c4      	b.n	800844e <_printf_common+0x62>
 80084c4:	2301      	movs	r3, #1
 80084c6:	4622      	mov	r2, r4
 80084c8:	4639      	mov	r1, r7
 80084ca:	4630      	mov	r0, r6
 80084cc:	47c0      	blx	r8
 80084ce:	3001      	adds	r0, #1
 80084d0:	d0e6      	beq.n	80084a0 <_printf_common+0xb4>
 80084d2:	f109 0901 	add.w	r9, r9, #1
 80084d6:	e7d7      	b.n	8008488 <_printf_common+0x9c>

080084d8 <_printf_i>:
 80084d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80084dc:	4617      	mov	r7, r2
 80084de:	7e0a      	ldrb	r2, [r1, #24]
 80084e0:	b085      	sub	sp, #20
 80084e2:	2a6e      	cmp	r2, #110	; 0x6e
 80084e4:	4698      	mov	r8, r3
 80084e6:	4606      	mov	r6, r0
 80084e8:	460c      	mov	r4, r1
 80084ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80084ec:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80084f0:	f000 80bc 	beq.w	800866c <_printf_i+0x194>
 80084f4:	d81a      	bhi.n	800852c <_printf_i+0x54>
 80084f6:	2a63      	cmp	r2, #99	; 0x63
 80084f8:	d02e      	beq.n	8008558 <_printf_i+0x80>
 80084fa:	d80a      	bhi.n	8008512 <_printf_i+0x3a>
 80084fc:	2a00      	cmp	r2, #0
 80084fe:	f000 80c8 	beq.w	8008692 <_printf_i+0x1ba>
 8008502:	2a58      	cmp	r2, #88	; 0x58
 8008504:	f000 808a 	beq.w	800861c <_printf_i+0x144>
 8008508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800850c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8008510:	e02a      	b.n	8008568 <_printf_i+0x90>
 8008512:	2a64      	cmp	r2, #100	; 0x64
 8008514:	d001      	beq.n	800851a <_printf_i+0x42>
 8008516:	2a69      	cmp	r2, #105	; 0x69
 8008518:	d1f6      	bne.n	8008508 <_printf_i+0x30>
 800851a:	6821      	ldr	r1, [r4, #0]
 800851c:	681a      	ldr	r2, [r3, #0]
 800851e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8008522:	d023      	beq.n	800856c <_printf_i+0x94>
 8008524:	1d11      	adds	r1, r2, #4
 8008526:	6019      	str	r1, [r3, #0]
 8008528:	6813      	ldr	r3, [r2, #0]
 800852a:	e027      	b.n	800857c <_printf_i+0xa4>
 800852c:	2a73      	cmp	r2, #115	; 0x73
 800852e:	f000 80b4 	beq.w	800869a <_printf_i+0x1c2>
 8008532:	d808      	bhi.n	8008546 <_printf_i+0x6e>
 8008534:	2a6f      	cmp	r2, #111	; 0x6f
 8008536:	d02a      	beq.n	800858e <_printf_i+0xb6>
 8008538:	2a70      	cmp	r2, #112	; 0x70
 800853a:	d1e5      	bne.n	8008508 <_printf_i+0x30>
 800853c:	680a      	ldr	r2, [r1, #0]
 800853e:	f042 0220 	orr.w	r2, r2, #32
 8008542:	600a      	str	r2, [r1, #0]
 8008544:	e003      	b.n	800854e <_printf_i+0x76>
 8008546:	2a75      	cmp	r2, #117	; 0x75
 8008548:	d021      	beq.n	800858e <_printf_i+0xb6>
 800854a:	2a78      	cmp	r2, #120	; 0x78
 800854c:	d1dc      	bne.n	8008508 <_printf_i+0x30>
 800854e:	2278      	movs	r2, #120	; 0x78
 8008550:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8008554:	496e      	ldr	r1, [pc, #440]	; (8008710 <_printf_i+0x238>)
 8008556:	e064      	b.n	8008622 <_printf_i+0x14a>
 8008558:	681a      	ldr	r2, [r3, #0]
 800855a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800855e:	1d11      	adds	r1, r2, #4
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008568:	2301      	movs	r3, #1
 800856a:	e0a3      	b.n	80086b4 <_printf_i+0x1dc>
 800856c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8008570:	f102 0104 	add.w	r1, r2, #4
 8008574:	6019      	str	r1, [r3, #0]
 8008576:	d0d7      	beq.n	8008528 <_printf_i+0x50>
 8008578:	f9b2 3000 	ldrsh.w	r3, [r2]
 800857c:	2b00      	cmp	r3, #0
 800857e:	da03      	bge.n	8008588 <_printf_i+0xb0>
 8008580:	222d      	movs	r2, #45	; 0x2d
 8008582:	425b      	negs	r3, r3
 8008584:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008588:	4962      	ldr	r1, [pc, #392]	; (8008714 <_printf_i+0x23c>)
 800858a:	220a      	movs	r2, #10
 800858c:	e017      	b.n	80085be <_printf_i+0xe6>
 800858e:	6820      	ldr	r0, [r4, #0]
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008596:	d003      	beq.n	80085a0 <_printf_i+0xc8>
 8008598:	1d08      	adds	r0, r1, #4
 800859a:	6018      	str	r0, [r3, #0]
 800859c:	680b      	ldr	r3, [r1, #0]
 800859e:	e006      	b.n	80085ae <_printf_i+0xd6>
 80085a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80085a4:	f101 0004 	add.w	r0, r1, #4
 80085a8:	6018      	str	r0, [r3, #0]
 80085aa:	d0f7      	beq.n	800859c <_printf_i+0xc4>
 80085ac:	880b      	ldrh	r3, [r1, #0]
 80085ae:	4959      	ldr	r1, [pc, #356]	; (8008714 <_printf_i+0x23c>)
 80085b0:	2a6f      	cmp	r2, #111	; 0x6f
 80085b2:	bf14      	ite	ne
 80085b4:	220a      	movne	r2, #10
 80085b6:	2208      	moveq	r2, #8
 80085b8:	2000      	movs	r0, #0
 80085ba:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80085be:	6865      	ldr	r5, [r4, #4]
 80085c0:	60a5      	str	r5, [r4, #8]
 80085c2:	2d00      	cmp	r5, #0
 80085c4:	f2c0 809c 	blt.w	8008700 <_printf_i+0x228>
 80085c8:	6820      	ldr	r0, [r4, #0]
 80085ca:	f020 0004 	bic.w	r0, r0, #4
 80085ce:	6020      	str	r0, [r4, #0]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d13f      	bne.n	8008654 <_printf_i+0x17c>
 80085d4:	2d00      	cmp	r5, #0
 80085d6:	f040 8095 	bne.w	8008704 <_printf_i+0x22c>
 80085da:	4675      	mov	r5, lr
 80085dc:	2a08      	cmp	r2, #8
 80085de:	d10b      	bne.n	80085f8 <_printf_i+0x120>
 80085e0:	6823      	ldr	r3, [r4, #0]
 80085e2:	07da      	lsls	r2, r3, #31
 80085e4:	d508      	bpl.n	80085f8 <_printf_i+0x120>
 80085e6:	6923      	ldr	r3, [r4, #16]
 80085e8:	6862      	ldr	r2, [r4, #4]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	bfde      	ittt	le
 80085ee:	2330      	movle	r3, #48	; 0x30
 80085f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80085f8:	ebae 0305 	sub.w	r3, lr, r5
 80085fc:	6123      	str	r3, [r4, #16]
 80085fe:	f8cd 8000 	str.w	r8, [sp]
 8008602:	463b      	mov	r3, r7
 8008604:	aa03      	add	r2, sp, #12
 8008606:	4621      	mov	r1, r4
 8008608:	4630      	mov	r0, r6
 800860a:	f7ff feef 	bl	80083ec <_printf_common>
 800860e:	3001      	adds	r0, #1
 8008610:	d155      	bne.n	80086be <_printf_i+0x1e6>
 8008612:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008616:	b005      	add	sp, #20
 8008618:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800861c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8008620:	493c      	ldr	r1, [pc, #240]	; (8008714 <_printf_i+0x23c>)
 8008622:	6822      	ldr	r2, [r4, #0]
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	f012 0f80 	tst.w	r2, #128	; 0x80
 800862a:	f100 0504 	add.w	r5, r0, #4
 800862e:	601d      	str	r5, [r3, #0]
 8008630:	d001      	beq.n	8008636 <_printf_i+0x15e>
 8008632:	6803      	ldr	r3, [r0, #0]
 8008634:	e002      	b.n	800863c <_printf_i+0x164>
 8008636:	0655      	lsls	r5, r2, #25
 8008638:	d5fb      	bpl.n	8008632 <_printf_i+0x15a>
 800863a:	8803      	ldrh	r3, [r0, #0]
 800863c:	07d0      	lsls	r0, r2, #31
 800863e:	bf44      	itt	mi
 8008640:	f042 0220 	orrmi.w	r2, r2, #32
 8008644:	6022      	strmi	r2, [r4, #0]
 8008646:	b91b      	cbnz	r3, 8008650 <_printf_i+0x178>
 8008648:	6822      	ldr	r2, [r4, #0]
 800864a:	f022 0220 	bic.w	r2, r2, #32
 800864e:	6022      	str	r2, [r4, #0]
 8008650:	2210      	movs	r2, #16
 8008652:	e7b1      	b.n	80085b8 <_printf_i+0xe0>
 8008654:	4675      	mov	r5, lr
 8008656:	fbb3 f0f2 	udiv	r0, r3, r2
 800865a:	fb02 3310 	mls	r3, r2, r0, r3
 800865e:	5ccb      	ldrb	r3, [r1, r3]
 8008660:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008664:	4603      	mov	r3, r0
 8008666:	2800      	cmp	r0, #0
 8008668:	d1f5      	bne.n	8008656 <_printf_i+0x17e>
 800866a:	e7b7      	b.n	80085dc <_printf_i+0x104>
 800866c:	6808      	ldr	r0, [r1, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	6949      	ldr	r1, [r1, #20]
 8008672:	f010 0f80 	tst.w	r0, #128	; 0x80
 8008676:	d004      	beq.n	8008682 <_printf_i+0x1aa>
 8008678:	1d10      	adds	r0, r2, #4
 800867a:	6018      	str	r0, [r3, #0]
 800867c:	6813      	ldr	r3, [r2, #0]
 800867e:	6019      	str	r1, [r3, #0]
 8008680:	e007      	b.n	8008692 <_printf_i+0x1ba>
 8008682:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008686:	f102 0004 	add.w	r0, r2, #4
 800868a:	6018      	str	r0, [r3, #0]
 800868c:	6813      	ldr	r3, [r2, #0]
 800868e:	d0f6      	beq.n	800867e <_printf_i+0x1a6>
 8008690:	8019      	strh	r1, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	4675      	mov	r5, lr
 8008698:	e7b1      	b.n	80085fe <_printf_i+0x126>
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	1d11      	adds	r1, r2, #4
 800869e:	6019      	str	r1, [r3, #0]
 80086a0:	6815      	ldr	r5, [r2, #0]
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f7f7 fdb2 	bl	8000210 <memchr>
 80086ac:	b108      	cbz	r0, 80086b2 <_printf_i+0x1da>
 80086ae:	1b40      	subs	r0, r0, r5
 80086b0:	6060      	str	r0, [r4, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	2300      	movs	r3, #0
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	e79f      	b.n	80085fe <_printf_i+0x126>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4639      	mov	r1, r7
 80086c4:	4630      	mov	r0, r6
 80086c6:	47c0      	blx	r8
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0a2      	beq.n	8008612 <_printf_i+0x13a>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	d507      	bpl.n	80086e2 <_printf_i+0x20a>
 80086d2:	2500      	movs	r5, #0
 80086d4:	f104 0919 	add.w	r9, r4, #25
 80086d8:	68e3      	ldr	r3, [r4, #12]
 80086da:	9a03      	ldr	r2, [sp, #12]
 80086dc:	1a9b      	subs	r3, r3, r2
 80086de:	429d      	cmp	r5, r3
 80086e0:	db05      	blt.n	80086ee <_printf_i+0x216>
 80086e2:	68e0      	ldr	r0, [r4, #12]
 80086e4:	9b03      	ldr	r3, [sp, #12]
 80086e6:	4298      	cmp	r0, r3
 80086e8:	bfb8      	it	lt
 80086ea:	4618      	movlt	r0, r3
 80086ec:	e793      	b.n	8008616 <_printf_i+0x13e>
 80086ee:	2301      	movs	r3, #1
 80086f0:	464a      	mov	r2, r9
 80086f2:	4639      	mov	r1, r7
 80086f4:	4630      	mov	r0, r6
 80086f6:	47c0      	blx	r8
 80086f8:	3001      	adds	r0, #1
 80086fa:	d08a      	beq.n	8008612 <_printf_i+0x13a>
 80086fc:	3501      	adds	r5, #1
 80086fe:	e7eb      	b.n	80086d8 <_printf_i+0x200>
 8008700:	2b00      	cmp	r3, #0
 8008702:	d1a7      	bne.n	8008654 <_printf_i+0x17c>
 8008704:	780b      	ldrb	r3, [r1, #0]
 8008706:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800870a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800870e:	e765      	b.n	80085dc <_printf_i+0x104>
 8008710:	0800945a 	.word	0x0800945a
 8008714:	08009449 	.word	0x08009449

08008718 <_putc_r>:
 8008718:	b570      	push	{r4, r5, r6, lr}
 800871a:	460d      	mov	r5, r1
 800871c:	4614      	mov	r4, r2
 800871e:	4606      	mov	r6, r0
 8008720:	b118      	cbz	r0, 800872a <_putc_r+0x12>
 8008722:	6983      	ldr	r3, [r0, #24]
 8008724:	b90b      	cbnz	r3, 800872a <_putc_r+0x12>
 8008726:	f7ff fae1 	bl	8007cec <__sinit>
 800872a:	4b13      	ldr	r3, [pc, #76]	; (8008778 <_putc_r+0x60>)
 800872c:	429c      	cmp	r4, r3
 800872e:	d112      	bne.n	8008756 <_putc_r+0x3e>
 8008730:	6874      	ldr	r4, [r6, #4]
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	3b01      	subs	r3, #1
 8008736:	2b00      	cmp	r3, #0
 8008738:	60a3      	str	r3, [r4, #8]
 800873a:	da16      	bge.n	800876a <_putc_r+0x52>
 800873c:	69a2      	ldr	r2, [r4, #24]
 800873e:	4293      	cmp	r3, r2
 8008740:	db02      	blt.n	8008748 <_putc_r+0x30>
 8008742:	b2eb      	uxtb	r3, r5
 8008744:	2b0a      	cmp	r3, #10
 8008746:	d110      	bne.n	800876a <_putc_r+0x52>
 8008748:	4622      	mov	r2, r4
 800874a:	4629      	mov	r1, r5
 800874c:	4630      	mov	r0, r6
 800874e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008752:	f7ff b919 	b.w	8007988 <__swbuf_r>
 8008756:	4b09      	ldr	r3, [pc, #36]	; (800877c <_putc_r+0x64>)
 8008758:	429c      	cmp	r4, r3
 800875a:	d101      	bne.n	8008760 <_putc_r+0x48>
 800875c:	68b4      	ldr	r4, [r6, #8]
 800875e:	e7e8      	b.n	8008732 <_putc_r+0x1a>
 8008760:	4b07      	ldr	r3, [pc, #28]	; (8008780 <_putc_r+0x68>)
 8008762:	429c      	cmp	r4, r3
 8008764:	bf08      	it	eq
 8008766:	68f4      	ldreq	r4, [r6, #12]
 8008768:	e7e3      	b.n	8008732 <_putc_r+0x1a>
 800876a:	6823      	ldr	r3, [r4, #0]
 800876c:	1c5a      	adds	r2, r3, #1
 800876e:	6022      	str	r2, [r4, #0]
 8008770:	701d      	strb	r5, [r3, #0]
 8008772:	b2e8      	uxtb	r0, r5
 8008774:	bd70      	pop	{r4, r5, r6, pc}
 8008776:	bf00      	nop
 8008778:	080093f8 	.word	0x080093f8
 800877c:	08009418 	.word	0x08009418
 8008780:	080093d8 	.word	0x080093d8

08008784 <__sread>:
 8008784:	b510      	push	{r4, lr}
 8008786:	460c      	mov	r4, r1
 8008788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800878c:	f000 f8d4 	bl	8008938 <_read_r>
 8008790:	2800      	cmp	r0, #0
 8008792:	bfab      	itete	ge
 8008794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008796:	89a3      	ldrhlt	r3, [r4, #12]
 8008798:	181b      	addge	r3, r3, r0
 800879a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800879e:	bfac      	ite	ge
 80087a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80087a2:	81a3      	strhlt	r3, [r4, #12]
 80087a4:	bd10      	pop	{r4, pc}

080087a6 <__swrite>:
 80087a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087aa:	461f      	mov	r7, r3
 80087ac:	898b      	ldrh	r3, [r1, #12]
 80087ae:	05db      	lsls	r3, r3, #23
 80087b0:	4605      	mov	r5, r0
 80087b2:	460c      	mov	r4, r1
 80087b4:	4616      	mov	r6, r2
 80087b6:	d505      	bpl.n	80087c4 <__swrite+0x1e>
 80087b8:	2302      	movs	r3, #2
 80087ba:	2200      	movs	r2, #0
 80087bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087c0:	f000 f868 	bl	8008894 <_lseek_r>
 80087c4:	89a3      	ldrh	r3, [r4, #12]
 80087c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80087ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80087ce:	81a3      	strh	r3, [r4, #12]
 80087d0:	4632      	mov	r2, r6
 80087d2:	463b      	mov	r3, r7
 80087d4:	4628      	mov	r0, r5
 80087d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087da:	f000 b817 	b.w	800880c <_write_r>

080087de <__sseek>:
 80087de:	b510      	push	{r4, lr}
 80087e0:	460c      	mov	r4, r1
 80087e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80087e6:	f000 f855 	bl	8008894 <_lseek_r>
 80087ea:	1c43      	adds	r3, r0, #1
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	bf15      	itete	ne
 80087f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80087f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80087f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80087fa:	81a3      	strheq	r3, [r4, #12]
 80087fc:	bf18      	it	ne
 80087fe:	81a3      	strhne	r3, [r4, #12]
 8008800:	bd10      	pop	{r4, pc}

08008802 <__sclose>:
 8008802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008806:	f000 b813 	b.w	8008830 <_close_r>
	...

0800880c <_write_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4c07      	ldr	r4, [pc, #28]	; (800882c <_write_r+0x20>)
 8008810:	4605      	mov	r5, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7fd ff5e 	bl	80066dc <_write>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_write_r+0x1e>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	b103      	cbz	r3, 800882a <_write_r+0x1e>
 8008828:	602b      	str	r3, [r5, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20007d90 	.word	0x20007d90

08008830 <_close_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4c06      	ldr	r4, [pc, #24]	; (800884c <_close_r+0x1c>)
 8008834:	2300      	movs	r3, #0
 8008836:	4605      	mov	r5, r0
 8008838:	4608      	mov	r0, r1
 800883a:	6023      	str	r3, [r4, #0]
 800883c:	f7fd ff76 	bl	800672c <_close>
 8008840:	1c43      	adds	r3, r0, #1
 8008842:	d102      	bne.n	800884a <_close_r+0x1a>
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	b103      	cbz	r3, 800884a <_close_r+0x1a>
 8008848:	602b      	str	r3, [r5, #0]
 800884a:	bd38      	pop	{r3, r4, r5, pc}
 800884c:	20007d90 	.word	0x20007d90

08008850 <_fstat_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4c07      	ldr	r4, [pc, #28]	; (8008870 <_fstat_r+0x20>)
 8008854:	2300      	movs	r3, #0
 8008856:	4605      	mov	r5, r0
 8008858:	4608      	mov	r0, r1
 800885a:	4611      	mov	r1, r2
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	f7fd ff68 	bl	8006732 <_fstat>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d102      	bne.n	800886c <_fstat_r+0x1c>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	b103      	cbz	r3, 800886c <_fstat_r+0x1c>
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	20007d90 	.word	0x20007d90

08008874 <_isatty_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4c06      	ldr	r4, [pc, #24]	; (8008890 <_isatty_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4605      	mov	r5, r0
 800887c:	4608      	mov	r0, r1
 800887e:	6023      	str	r3, [r4, #0]
 8008880:	f7fd ff5c 	bl	800673c <_isatty>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_isatty_r+0x1a>
 8008888:	6823      	ldr	r3, [r4, #0]
 800888a:	b103      	cbz	r3, 800888e <_isatty_r+0x1a>
 800888c:	602b      	str	r3, [r5, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	20007d90 	.word	0x20007d90

08008894 <_lseek_r>:
 8008894:	b538      	push	{r3, r4, r5, lr}
 8008896:	4c07      	ldr	r4, [pc, #28]	; (80088b4 <_lseek_r+0x20>)
 8008898:	4605      	mov	r5, r0
 800889a:	4608      	mov	r0, r1
 800889c:	4611      	mov	r1, r2
 800889e:	2200      	movs	r2, #0
 80088a0:	6022      	str	r2, [r4, #0]
 80088a2:	461a      	mov	r2, r3
 80088a4:	f7fd ff4c 	bl	8006740 <_lseek>
 80088a8:	1c43      	adds	r3, r0, #1
 80088aa:	d102      	bne.n	80088b2 <_lseek_r+0x1e>
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	b103      	cbz	r3, 80088b2 <_lseek_r+0x1e>
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	bd38      	pop	{r3, r4, r5, pc}
 80088b4:	20007d90 	.word	0x20007d90

080088b8 <memmove>:
 80088b8:	4288      	cmp	r0, r1
 80088ba:	b510      	push	{r4, lr}
 80088bc:	eb01 0302 	add.w	r3, r1, r2
 80088c0:	d803      	bhi.n	80088ca <memmove+0x12>
 80088c2:	1e42      	subs	r2, r0, #1
 80088c4:	4299      	cmp	r1, r3
 80088c6:	d10c      	bne.n	80088e2 <memmove+0x2a>
 80088c8:	bd10      	pop	{r4, pc}
 80088ca:	4298      	cmp	r0, r3
 80088cc:	d2f9      	bcs.n	80088c2 <memmove+0xa>
 80088ce:	1881      	adds	r1, r0, r2
 80088d0:	1ad2      	subs	r2, r2, r3
 80088d2:	42d3      	cmn	r3, r2
 80088d4:	d100      	bne.n	80088d8 <memmove+0x20>
 80088d6:	bd10      	pop	{r4, pc}
 80088d8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80088dc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80088e0:	e7f7      	b.n	80088d2 <memmove+0x1a>
 80088e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80088ea:	e7eb      	b.n	80088c4 <memmove+0xc>

080088ec <_realloc_r>:
 80088ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ee:	4607      	mov	r7, r0
 80088f0:	4614      	mov	r4, r2
 80088f2:	460e      	mov	r6, r1
 80088f4:	b921      	cbnz	r1, 8008900 <_realloc_r+0x14>
 80088f6:	4611      	mov	r1, r2
 80088f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80088fc:	f7fe bf22 	b.w	8007744 <_malloc_r>
 8008900:	b922      	cbnz	r2, 800890c <_realloc_r+0x20>
 8008902:	f7fe fed1 	bl	80076a8 <_free_r>
 8008906:	4625      	mov	r5, r4
 8008908:	4628      	mov	r0, r5
 800890a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800890c:	f000 f826 	bl	800895c <_malloc_usable_size_r>
 8008910:	4284      	cmp	r4, r0
 8008912:	d90f      	bls.n	8008934 <_realloc_r+0x48>
 8008914:	4621      	mov	r1, r4
 8008916:	4638      	mov	r0, r7
 8008918:	f7fe ff14 	bl	8007744 <_malloc_r>
 800891c:	4605      	mov	r5, r0
 800891e:	2800      	cmp	r0, #0
 8008920:	d0f2      	beq.n	8008908 <_realloc_r+0x1c>
 8008922:	4631      	mov	r1, r6
 8008924:	4622      	mov	r2, r4
 8008926:	f7fe feac 	bl	8007682 <memcpy>
 800892a:	4631      	mov	r1, r6
 800892c:	4638      	mov	r0, r7
 800892e:	f7fe febb 	bl	80076a8 <_free_r>
 8008932:	e7e9      	b.n	8008908 <_realloc_r+0x1c>
 8008934:	4635      	mov	r5, r6
 8008936:	e7e7      	b.n	8008908 <_realloc_r+0x1c>

08008938 <_read_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4c07      	ldr	r4, [pc, #28]	; (8008958 <_read_r+0x20>)
 800893c:	4605      	mov	r5, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	6022      	str	r2, [r4, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7fd feba 	bl	80066c0 <_read>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_read_r+0x1e>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	b103      	cbz	r3, 8008956 <_read_r+0x1e>
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20007d90 	.word	0x20007d90

0800895c <_malloc_usable_size_r>:
 800895c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8008960:	2800      	cmp	r0, #0
 8008962:	f1a0 0004 	sub.w	r0, r0, #4
 8008966:	bfbc      	itt	lt
 8008968:	580b      	ldrlt	r3, [r1, r0]
 800896a:	18c0      	addlt	r0, r0, r3
 800896c:	4770      	bx	lr
	...

08008970 <_init>:
 8008970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008972:	bf00      	nop
 8008974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008976:	bc08      	pop	{r3}
 8008978:	469e      	mov	lr, r3
 800897a:	4770      	bx	lr

0800897c <_fini>:
 800897c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800897e:	bf00      	nop
 8008980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008982:	bc08      	pop	{r3}
 8008984:	469e      	mov	lr, r3
 8008986:	4770      	bx	lr
